"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –±–æ—Ç—ñ.
–†–æ–∑—à–∏—Ä–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ (FSM).
"""
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional

# --- –ù–û–í–Ü –ö–õ–ê–í–Ü–ê–¢–£–†–ò –î–õ–Ø FSM –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü ---

def create_party_confirmation_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ç—ñ.
    –ö—Ä–æ–∫ 1 –Ω–∞—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–∞–∫, –¥–æ–ø–æ–º–æ–∂–∏", callback_data="party_start_creation")
    builder.button(text="‚ùå –ù—ñ, —è —Å–∞–º", callback_data="party_cancel_creation")
    return builder.as_markup()

def create_role_selection_keyboard(available_roles: List[str]) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º –ø–∞—Ç—ñ.
    –ö—Ä–æ–∫ 2 –Ω–∞—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.

    Args:
        available_roles: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–ª–µ–π –¥–ª—è –≤–∏–±–æ—Ä—É.
    """
    builder = InlineKeyboardBuilder()
    # –ö–∞—Ä—Ç–∞ –µ–º–æ–¥–∑—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–∞ –∫—Ä–∞—â–æ–≥–æ UX
    role_emoji_map = {
        "–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô",
        "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"
    }
    for role in available_roles:
        emoji = role_emoji_map.get(role, "üîπ")
        builder.button(text=f"{emoji} {role}", callback_data=f"party_role_select:{role}")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –≤ —Ä—è–¥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
    return builder.as_markup()


# --- –û–ù–û–í–õ–ï–ù–ê –ö–õ–ê–í–Ü–ê–¢–£–†–ê –õ–û–ë–Ü ---

def create_dynamic_lobby_keyboard(lobby_id: str, user_id: int, lobby_data: Dict) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±—ñ.
    –ö–Ω–æ–ø–∫–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ª—ñ–¥–µ—Ä, —É—á–∞—Å–Ω–∏–∫, —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á).
    """
    builder = InlineKeyboardBuilder()
    players = lobby_data.get("players", {})
    leader_id = lobby_data.get("leader_id")

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è" –≤–∏–¥–∏–º–∞ –¥–ª—è –≤—Å—ñ—Ö, —Ö—Ç–æ —â–µ –Ω–µ –≤ –ø–∞—Ç—ñ
    if user_id not in players:
        builder.button(text="‚ûï –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data=f"party_join:{lobby_id}")

    # –ö–Ω–æ–ø–∫–∞ "–í–∏–π—Ç–∏" –≤–∏–¥–∏–º–∞ –¥–ª—è –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, –∫—Ä—ñ–º –ª—ñ–¥–µ—Ä–∞
    if user_id in players and user_id != leader_id:
        builder.button(text="‚ùå –í–∏–π—Ç–∏ –∑ –ø–∞—Ç—ñ", callback_data=f"party_leave:{lobby_id}")

    # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –≤–∏–¥–∏–º–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ª—ñ–¥–µ—Ä–∞ –ø–∞—Ç—ñ
    if user_id == leader_id:
        builder.button(text="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ", callback_data=f"party_cancel_lobby:{lobby_id}")

    return builder.as_markup()
