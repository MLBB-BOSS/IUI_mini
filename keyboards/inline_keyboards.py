"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –±–æ—Ç—ñ.
–†–æ–∑—à–∏—Ä–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ (FSM) —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.
"""
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–æ–ª–µ–π —Ç—É—Ç, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
ALL_ROLES: List[str] = ["–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"]

# --- üîÑ –û–ù–û–í–õ–ï–ù–Ü –ö–õ–ê–í–Ü–ê–¢–£–†–ò –î–õ–Ø FSM –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü ---

def create_party_confirmation_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ç—ñ.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–∞–∫, –¥–æ–ø–æ–º–æ–∂–∏", callback_data="party_start_creation")
    builder.button(text="‚ùå –ù—ñ, —è —Å–∞–º", callback_data="party_cancel_creation")
    builder.adjust(2)
    return builder.as_markup()

def create_game_mode_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –≥—Ä–∏ —É –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="party_set_mode:Ranked")
    builder.button(text="üéÆ –ö–ª–∞—Å–∏–∫–∞", callback_data="party_set_mode:Classic")
    builder.button(text="‚öîÔ∏è –†–µ–∂–∏–º –±–æ—é", callback_data="party_set_mode:Brawl")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_confirmation")
    builder.adjust(2)
    return builder.as_markup()

def create_party_size_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É –ø–∞—Ç—ñ —É –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –î—É–æ (2)", callback_data="party_set_size:2")
    builder.button(text="üë• –¢—Ä—ñ–æ (3)", callback_data="party_set_size:3")
    builder.button(text="üë• –§—É–ª–ª –ü–∞—Ç—ñ (5)", callback_data="party_set_size:5")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_game_mode")
    builder.adjust(2)
    return builder.as_markup()

def create_role_selection_keyboard(available_roles: List[str], lobby_id: str) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ —É –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    role_emoji_map = {
        "–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô",
        "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"
    }
    for role in available_roles:
        emoji = role_emoji_map.get(role, "üîπ")
        builder.button(text=f"{emoji} {role}", callback_data=f"party_select_role:{lobby_id}:{role}")
    
    if lobby_id == "initial":
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_party_size")
        builder.adjust(2) 
    else:
        builder.adjust(2)
        builder.row(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è", callback_data=f"party_cancel_join:{lobby_id}"))
        
    return builder.as_markup()

def create_required_roles_keyboard(
    available_roles: List[str], 
    selected_roles: List[str], 
    num_to_select: int
) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –±–∞–∂–∞–Ω–∏—Ö —Ä–æ–ª–µ–π –∑ –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç–æ–º —É –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}

    for role in available_roles:
        emoji = role_emoji_map.get(role, "üîπ")
        text = f"‚úÖ {emoji} {role}" if role in selected_roles else f"{emoji} {role}"
        builder.button(text=text, callback_data=f"party_req_role:{role}")

    if len(selected_roles) == num_to_select:
        builder.button(text="üëç –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="party_confirm_roles")
    else:
        remaining = num_to_select - len(selected_roles)
        builder.button(text=f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏: {remaining}", callback_data="party_dummy_button")

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_leader_role")
    
    builder.adjust(2)
    return builder.as_markup()

def create_lobby_keyboard(lobby_id: int, lobby_data: Dict) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±—ñ.
    """
    builder = InlineKeyboardBuilder()
    lobby_state = lobby_data.get("state", "open")
    
    if lobby_state == "joining":
        taken_roles = [p["role"] for p in lobby_data["players"].values()]
        required_roles = lobby_data.get('required_roles', [])
        if required_roles:
            available_roles = [r for r in required_roles if r not in taken_roles]
        else:
            available_roles = [r for r in ALL_ROLES if r not in taken_roles]
        
        role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}
        for role in available_roles:
            emoji = role_emoji_map.get(role, "üîπ")
            builder.button(text=f"{emoji} {role}", callback_data=f"party_select_role:{lobby_id}:{role}")
        builder.adjust(2) 
        builder.row(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è", callback_data=f"party_cancel_join:{lobby_id}"))

    else: # lobby_state == "open"
        players = lobby_data.get("players", {})
        party_size = lobby_data.get("party_size", 5)
        
        button_row = []
        if len(players) < party_size:
            button_row.append(InlineKeyboardButton(text="‚ûï –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data=f"party_join:{lobby_id}"))
        
        button_row.append(InlineKeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç–∏ –ø–∞—Ç—ñ", callback_data=f"party_leave:{lobby_id}"))
        builder.row(*button_row)
        builder.row(InlineKeyboardButton(text="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ", callback_data=f"party_cancel_lobby:{lobby_id}"))
        
    return builder.as_markup()

# === –ö–õ–ê–í–Ü–ê–¢–£–†–ò –î–õ–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –¢–ê –ü–†–û–§–Ü–õ–Æ ===
# ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É —Ñ–∞–π–ª—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
def create_profile_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –ø–æ—á–∞—Ç–∫–æ–≤—É, –∫–æ–º–ø–∞–∫—Ç–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏", callback_data="profile_menu_expand"),
        InlineKeyboardButton(text="üö™ –í–∏–π—Ç–∏", callback_data="profile_menu_close")
    )
    return builder.as_markup()

def create_expanded_profile_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –Ω–∞–ø–∏—Å–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile_update_basic")
    builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_add_stats")
    builder.button(text="ü¶∏ –ì–µ—Ä–æ—ó", callback_data="profile_add_heroes")
    builder.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="profile_delete")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_menu_collapse")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def create_delete_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="delete_confirm_yes"),
            InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="delete_confirm_no")
        ]
    ])