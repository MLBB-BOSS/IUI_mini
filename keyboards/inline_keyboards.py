"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –±–æ—Ç—ñ.
–í–∫–ª—é—á–∞—î:
- –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ (FSM)
- —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –æ–¥–Ω–æ–∫–Ω–æ–ø–∫–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º —Ç–∞ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–º –æ–≥–ª—è–¥–æ–º
- –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫–∞—Ä—É—Å–µ–ª–ª—é –ø—Ä–æ—Ñ—ñ–ª—é
- –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
- ‚ùóÔ∏è –ù–û–í–ï: –î–∏–Ω–∞–º—ñ—á–Ω–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º'—é—Ç—É.
"""
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ‚ùóÔ∏è –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
from database.models import UserSettings

# –ö–æ—Ä–æ—Ç–∫—ñ –∫–æ–¥–∏ —Ä–æ–ª–µ–π –¥–ª—è –ø–∞—Ç—ñ
ALL_ROLES: list[str] = ["EXP", "–õ–Ü–°", "–ú–Ü–î", "–ê–î–ö", "–†–û–£–ú"]

# -------------------------------------------------------------------
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ (FSM)
# -------------------------------------------------------------------

def create_party_confirmation_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ:
    | ‚úÖ –¢–∞–∫ | ‚ùå –ù—ñ | ‚ÑπÔ∏è –Ü–Ω—Ñ–æ |
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–∞–∫", callback_data="party_start_creation")
    builder.button(text="‚ùå –ù—ñ", callback_data="party_cancel_creation")
    builder.button(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ", callback_data="party_show_info")
    builder.adjust(2, 1)
    return builder.as_markup()

def create_party_info_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –µ–∫—Ä–∞–Ω—É –¥–æ–≤—ñ–¥–∫–∏ –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ:
    | ‚óÄÔ∏è –ù–∞–∑–∞–¥ |
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_confirmation")
    return builder.as_markup()

def create_game_mode_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –≥—Ä–∏:
    | üèÜ –†–∞–Ω–∫ | üïπÔ∏è –ö–ª–∞—Å–∏–∫–∞ |
    | ‚öîÔ∏è –†–µ–∂–∏–º –±–æ—é | ‚óÄÔ∏è –ù–∞–∑–∞–¥ |
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –†–∞–Ω–∫", callback_data="party_set_mode:Ranked")
    builder.button(text="üïπÔ∏è –ö–ª–∞—Å–∏–∫–∞", callback_data="party_set_mode:Classic")
    builder.button(text="‚öîÔ∏è –†–µ–∂–∏–º –±–æ—é", callback_data="party_set_mode:Brawl")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_confirmation")
    builder.adjust(2)
    return builder.as_markup()

def create_party_size_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É –ø–∞—Ç—ñ:
    | üë• –î—É–æ | üë• –¢—Ä—ñ–æ |
    | üë• –§—É–ª–ª | ‚óÄÔ∏è –ù–∞–∑–∞–¥ |
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –î—É–æ", callback_data="party_set_size:2")
    builder.button(text="üë• –¢—Ä—ñ–æ", callback_data="party_set_size:3")
    builder.button(text="üë• –§—É–ª–ª", callback_data="party_set_size:5")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_game_mode")
    builder.adjust(2, 2)
    return builder.as_markup()

def create_role_selection_keyboard(
    available_roles: list[str],
    lobby_id: str
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ:
    - –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ —Ä–æ–∑–º—ñ—â—É—é—Ç—å—Å—è —É –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ.
    - –Ø–∫—â–æ lobby_id == "initial", –¥–æ–¥–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ ‚óÄÔ∏è –ù–∞–∑–∞–¥.
    - –Ü–Ω–∞–∫—à–µ –ø—ñ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –∑ º—è–≤–ª—è—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    role_emoji_map = {"EXP": "‚öîÔ∏è", "–õ–Ü–°": "üå≥", "–ú–Ü–î": "üßô", "–ê–î–ö": "üèπ", "–†–û–£–ú": "üõ°Ô∏è"}
    for role in available_roles:
        emoji = role_emoji_map.get(role, "üîπ")
        builder.button(
            text=f"{emoji} {role}",
            callback_data=f"party_select_role:{lobby_id}:{role}"
        )
    if lobby_id == "initial":
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_party_size")
        builder.adjust(2)
    else:
        builder.adjust(2, 1)
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                callback_data=f"party_cancel_join:{lobby_id}"
            )
        )
    return builder.as_markup()

def create_required_roles_keyboard(
    available_roles: list[str],
    selected_roles: list[str],
    num_to_select: int
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∏–±–æ—Ä—É –±–∞–∂–∞–Ω–∏—Ö —Ä–æ–ª–µ–π:
    - –ü–µ—Ä–µ–ª—ñ–∫ —Ä–æ–ª–µ–π —É 2 –∫–æ–ª–æ–Ω–∫–∏, –≤—ñ–¥–º—ñ—á–µ–Ω—ñ –æ–±—Ä–∞–Ω—ñ.
    - –ü—ñ–¥ —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–∫–∞ ‚úÖ –ì–æ—Ç–æ–≤–æ –∞–±–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä ‚è≥ –©–µ N.
    - –ö–Ω–æ–ø–∫–∞ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –ª—ñ–¥–µ—Ä–∞.
    """
    builder = InlineKeyboardBuilder()
    role_emoji_map = {"EXP": "‚öîÔ∏è", "–õ–Ü–°": "üå≥", "–ú–Ü–î": "üßô", "–ê–î–ö": "üèπ", "–†–û–£–ú": "üõ°Ô∏è"}
    for role in available_roles:
        emoji = role_emoji_map.get(role, "üîπ")
        if role in selected_roles:
            text = f"‚úÖ {emoji} {role}"
        else:
            text = f"{emoji} {role}"
        builder.button(text=text, callback_data=f"party_req_role:{role}")
    builder.adjust(2)

    action_buttons = []
    if len(selected_roles) == num_to_select:
        action_buttons.append(
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="party_confirm_roles")
        )
    else:
        remaining = num_to_select - len(selected_roles)
        action_buttons.append(
            InlineKeyboardButton(text=f"‚è≥ –©–µ {remaining}", callback_data="party_dummy_button")
        )
    action_buttons.append(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="party_step_back:to_leader_role")
    )
    builder.row(*action_buttons)
    return builder.as_markup()

def create_lobby_keyboard(
    lobby_id: int,
    lobby_data: dict
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±—ñ:
    - –Ø–∫—â–æ —Å—Ç–∞–Ω 'joining', –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–ª–µ–π —ñ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.
    - –Ø–∫—â–æ 'open', –ø–æ–∫–∞–∑—É—î ‚ûï –£–≤—ñ–π—Ç–∏, ‚ùå –í–∏–π—Ç–∏, üö´ –ó–∞–∫—Ä–∏—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    lobby_state = lobby_data.get("state", "open")
    role_emoji_map = {"EXP": "‚öîÔ∏è", "–õ–Ü–°": "üå≥", "–ú–Ü–î": "üßô", "–ê–î–ö": "üèπ", "–†–û–£–ú": "üõ°Ô∏è"}

    if lobby_state == "joining":
        taken = [p["role"] for p in lobby_data["players"].values()]
        required = lobby_data.get("required_roles", [])
        if required:
            available = [r for r in required if r not in taken]
        else:
            available = [r for r in ALL_ROLES if r not in taken]
        for role in available:
            emoji = role_emoji_map.get(role, "üîπ")
            builder.button(
                text=f"{emoji} {role}",
                callback_data=f"party_select_role:{lobby_id}:{role}"
            )
        builder.adjust(2)
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                callback_data=f"party_cancel_join:{lobby_id}"
            )
        )
    else:
        players = lobby_data.get("players", {})
        size = lobby_data.get("party_size", 5)
        if len(players) < size:
            builder.button(text="‚ûï –£–≤—ñ–π—Ç–∏", callback_data=f"party_join:{lobby_id}")
        builder.button(text="‚ùå –í–∏–π—Ç–∏", callback_data=f"party_leave:{lobby_id}")
        builder.button(text="üö´ –ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"party_cancel_lobby:{lobby_id}")
        builder.adjust(2, 1)

    return builder.as_markup()

# -------------------------------------------------------------------
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# -------------------------------------------------------------------

def create_profile_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –æ–¥–Ω–æ–∫–Ω–æ–ø–∫–æ–≤–∏–π —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ—ñ–ª—é:
    | üìã –ú–µ–Ω—é |
    –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–µ –º–µ–Ω—é –∑ –æ–≥–ª—è–¥–æ–º –¥—ñ–π.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="profile_show_menu")
    )
    return builder.as_markup()

def create_profile_menu_overview_keyboard(
    current_page: int,
    total_pages: int
) -> InlineKeyboardMarkup:
    """
    –†–æ–∑–≥–æ—Ä–Ω—É—Ç–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é.
    1. –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–ª—é, —Ç—ñ–ª—å–∫–∏ —Å—Ç—Ä—ñ–ª–∫–∏, —è–∫—â–æ –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:
       | ‚óÄÔ∏è | ‚ñ∂Ô∏è |
    2. –î—ñ—ó:
       | üîÑ –ü—Ä–æ—Ñ—ñ–ª—å | üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ |
       | ü¶∏ –ì–µ—Ä–æ—ó   | üñºÔ∏è –ê–≤–∞—Ç–∞—Ä      |
       | üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ | ‚óÄÔ∏è –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–µ–Ω—é |
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–¥–∞—î–º–æ —Å—Ç—Ä—ñ–ª–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ª–∏—à–µ –∫–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó
    if total_pages > 1:
        prev_disabled = current_page <= 1
        next_disabled = current_page >= total_pages
        # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
        builder.button(
            text="‚óÄÔ∏è",
            callback_data=f"profile_prev_page:{current_page-1}",
            disabled=prev_disabled
        )
        # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥"
        builder.button(
            text="‚ñ∂Ô∏è",
            callback_data=f"profile_next_page:{current_page+1}",
            disabled=next_disabled
        )
        # –†–æ–∑—Ç–∞—à—É–≤–∞—Ç–∏ –æ–±–∏–¥–≤—ñ –≤ –æ–¥–∏–Ω —Ä—è–¥
        builder.adjust(2)

    # –û—Å–Ω–æ–≤–Ω—ñ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    builder.button(text="üîÑ –ü—Ä–æ—Ñ—ñ–ª—å",     callback_data="profile_update_basic")
    builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_update_stats")
    builder.button(text="ü¶∏ –ì–µ—Ä–æ—ó",       callback_data="profile_update_heroes")
    builder.button(text="üñºÔ∏è –ê–≤–∞—Ç–∞—Ä",     callback_data="profile_update_avatar")
    builder.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",   callback_data="profile_delete")
    builder.button(text="‚óÄÔ∏è –ó–∞–∫—Ä–∏—Ç–∏",    callback_data="profile_hide_menu")
    # –í–∏–∫–ª–∞–¥–∫–∞ —É –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ
    builder.adjust(2, 2, 2)

    return builder.as_markup()

# -------------------------------------------------------------------
# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
# -------------------------------------------------------------------

def create_delete_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:
    | ‚úÖ –¢–∞–∫ | ‚ùå –ù—ñ |
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="delete_confirm_yes"),
        InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="delete_confirm_no")
    )
    return builder.as_markup()

# -------------------------------------------------------------------
# ‚ùóÔ∏è –ù–û–í–ê –°–ï–ö–¶–Ü–Ø: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# -------------------------------------------------------------------

def create_mute_settings_keyboard(settings: UserSettings) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –º'—é—Ç—É.
    
    Args:
        settings: –û–±'—î–∫—Ç UserSettings –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
        
    Returns:
        –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    builder = InlineKeyboardBuilder()

    # –°–ª–æ–≤–Ω–∏–∫: –∫–ª—é—á_–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è -> (–¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, –ï–º–æ–¥–∑—ñ)
    options = {
        "chat": ("–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", "üí¨"),
        "vision": ("–ê–Ω–∞–ª—ñ–∑ —Ñ–æ—Ç–æ", "üì∏"),
        "party": ("–ó–±—ñ—Ä –ø–∞—Ç—ñ", "üéÆ"),
    }

    for key, (text, emoji) in options.items():
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å (True/False) –¥–ª—è –∫–ª—é—á–∞
        is_muted = getattr(settings, f"mute_{key}", False)
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        status_emoji = "‚ùå" if is_muted else "‚úÖ"
        button_text = f"{status_emoji} {text}"
        
        # –§–æ—Ä–º—É—î–º–æ callback_data
        callback_data = f"toggle_mute:{key}"
        
        builder.button(text=button_text, callback_data=callback_data)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é
    builder.row(InlineKeyboardButton(text="üëå –ì–æ—Ç–æ–≤–æ", callback_data="close_settings_menu"))
    
    # –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å
    builder.adjust(1, 1, 1, 1)
    
    return builder.as_markup()
