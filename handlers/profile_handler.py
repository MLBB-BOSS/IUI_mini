"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫–∞—Ä—É—Å–µ–ª—ñ.
–†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞–º–∏ –ø—Ä–æ—Ñ—ñ–ª—é.
"""
import asyncio
from enum import Enum, auto
from typing import Dict, Any, Optional, List, Union, Tuple

from aiogram import Bot, Router, F, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, 
    InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError

from database.crud import get_user_by_telegram_id
from config import logger
from keyboards.inline_keyboards import create_profile_menu_keyboard

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ—É—Ç–µ—Ä
profile_carousel_router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –∫–∞—Ä—É—Å–µ–ª—ñ
class CarouselType(Enum):
    """–¢–∏–ø–∏ —Å–ª–∞–π–¥—ñ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é."""
    AVATAR = auto()  # –ö–∞—Å—Ç–æ–º–Ω–∏–π –∞–≤–∞—Ç–∞—Ä (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–∞–π–¥)
    PROFILE = auto()  # –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
    STATS = auto()    # –°–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    HEROES = auto()   # –°–∫—Ä—ñ–Ω—à–æ—Ç —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤

# –ú–∞–ø–ø—ñ–Ω–≥ —Ç–∏–ø—ñ–≤ –∫–∞—Ä—É—Å–µ–ª—ñ –Ω–∞ –∫–ª—é—á—ñ –≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
CAROUSEL_TYPE_TO_KEY = {
    CarouselType.AVATAR: "custom_avatar_file_id",
    CarouselType.PROFILE: "profile_screenshot_file_id",
    CarouselType.STATS: "stats_screenshot_file_id",
    CarouselType.HEROES: "heroes_screenshot_file_id",
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Å–ª–∞–π–¥—É
CAROUSEL_TYPE_TO_TITLE = {
    CarouselType.AVATAR: "üé≠ –ê–≤–∞—Ç–∞—Ä",
    CarouselType.PROFILE: "üë§ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å",
    CarouselType.STATS: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    CarouselType.HEROES: "ü¶∏ –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó",
}

# –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π placeholder –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
DEFAULT_IMAGE_URL = "https://res.cloudinary.com/ha1pzppgf/image/upload/v1748286434/file_0000000017a46246b78bf97e2ecd9348_zuk16r.png"

def create_carousel_keyboard(
    current_type: CarouselType,
    available_types: List[CarouselType]
) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª–ª—é –ø—Ä–æ—Ñ—ñ–ª—é.
    
    Args:
        current_type: –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–∞–π–¥—É.
        available_types: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å–ª–∞–π–¥—ñ–≤.
        
    Returns:
        –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.
    """
    builder = InlineKeyboardBuilder()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö
    current_idx = available_types.index(current_type)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ª—ñ–≤–æ—Ä—É—á/–ø—Ä–∞–≤–æ—Ä—É—á, —è–∫—â–æ —î –∫—É–¥–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏
    nav_row = []
    
    if current_idx > 0:  # –Ø–∫—â–æ –Ω–µ –ø–µ—Ä—à–∏–π —Å–ª–∞–π–¥, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
        prev_type = available_types[current_idx - 1]
        nav_row.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"carousel:goto:{prev_type.name}"
        ))
    else:
        # Placeholder –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        nav_row.append(InlineKeyboardButton(
            text="‚Ä¢",
            callback_data="carousel:noop"
        ))
    
    # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü—ñ—ó
    position_text = f"{current_idx + 1}/{len(available_types)}"
    nav_row.append(InlineKeyboardButton(
        text=position_text,
        callback_data="carousel:noop"
    ))
    
    if current_idx < len(available_types) - 1:  # –Ø–∫—â–æ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–∞–π–¥, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥"
        next_type = available_types[current_idx + 1]
        nav_row.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"carousel:goto:{next_type.name}"
        ))
    else:
        # Placeholder –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        nav_row.append(InlineKeyboardButton(
            text="‚Ä¢",
            callback_data="carousel:noop"
        ))
        
    builder.row(*nav_row)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É —Å–ª–∞–π–¥—É
    edit_callback_map = {
        CarouselType.AVATAR: "profile_add_avatar",
        CarouselType.PROFILE: "profile_update_basic",
        CarouselType.STATS: "profile_add_stats",
        CarouselType.HEROES: "profile_add_heroes",
    }
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
            callback_data=edit_callback_map[current_type]
        ),
        InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            callback_data="profile_menu_expand"
        )
    )
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏—Ö–æ–¥—É
    builder.row(
        InlineKeyboardButton(
            text="üö™ –ó–∞–∫—Ä–∏—Ç–∏",
            callback_data="profile_carousel_close"
        )
    )
    
    return builder.as_markup()

def format_profile_info(user_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º.
    
    Args:
        user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    nickname = user_data.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
    player_id = user_data.get('player_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    server_id = user_data.get('server_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    rank = user_data.get('current_rank', '–ù–µ–≤—ñ–¥–æ–º–æ')
    win_rate = user_data.get('win_rate', '–ù–µ–≤—ñ–¥–æ–º–æ')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ–≤—ñ–¥–æ–º–æ"
    matches = user_data.get('total_matches', '–ù–µ–≤—ñ–¥–æ–º–æ')
    heroes = user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    
    return (
        f"üë§ <b>{nickname}</b>\n"
        f"üÜî <b>ID:</b> {player_id} ({server_id})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {rank}\n"
        f"üìä <b>WR:</b> {win_rate_str} ({matches} –º–∞—Ç—á—ñ–≤)\n"
        f"ü¶∏ <b>–ì–µ—Ä–æ—ó:</b> {heroes}"
    )

def get_caption_for_carousel_type(
    carousel_type: CarouselType,
    user_data: Dict[str, Any]
) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥–ø–∏—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ª–∞–π–¥—É –∫–∞—Ä—É—Å–µ–ª—ñ.
    
    Args:
        carousel_type: –¢–∏–ø —Å–ª–∞–π–¥—É –∫–∞—Ä—É—Å–µ–ª—ñ.
        user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        
    Returns:
        –ü—ñ–¥–ø–∏—Å –¥–ª—è —Å–ª–∞–π–¥—É –∫–∞—Ä—É—Å–µ–ª—ñ.
    """
    title = CAROUSEL_TYPE_TO_TITLE.get(carousel_type, "–ü—Ä–æ—Ñ—ñ–ª—å")
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –Ω–∞ –∞–≤–∞—Ç–∞—Ä—Ü—ñ
    if carousel_type == CarouselType.AVATAR:
        return f"<b>{title}</b>\n\n{format_profile_info(user_data)}"
    
    # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ - –ø—Ä–æ—Å—Ç—ñ—à–∏–π –ø—ñ–¥–ø–∏—Å
    return f"<b>{title}</b>"

async def show_profile_carousel(
    bot: Bot,
    chat_id: int,
    user_id: int,
    carousel_type: CarouselType = CarouselType.AVATAR,
    message_to_edit: Optional[Message] = None,
) -> Union[Message, bool]:
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —Å–ª–∞–π–¥ –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
    
    Args:
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        chat_id: ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è.
        carousel_type: –¢–∏–ø —Å–ª–∞–π–¥—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        message_to_edit: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (—è–∫—â–æ —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è).
        
    Returns:
        –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ True, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        if message_to_edit:
            await message_to_edit.edit_text("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /profile –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        else:
            return await bot.send_message(chat_id, "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /profile –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        return False
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Ç–∏–ø–∏ —Å–ª–∞–π–¥—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ
    available_types = []
    for c_type in CarouselType:
        key = CAROUSEL_TYPE_TO_KEY.get(c_type)
        if key and user_data.get(key):
            available_types.append(c_type)
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Ö–æ—á–∞ –± –∞–≤–∞—Ç–∞—Ä –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
    if not available_types:
        available_types = [CarouselType.AVATAR]
    
    # –Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–æ–≥–æ —Ç–∏–ø—É –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö, –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if carousel_type not in available_types:
        carousel_type = available_types[0]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ file_id –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É
    file_id_key = CAROUSEL_TYPE_TO_KEY.get(carousel_type)
    file_id = user_data.get(file_id_key) if file_id_key else None
    
    # –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    if not file_id:
        file_id = DEFAULT_IMAGE_URL
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = create_carousel_keyboard(carousel_type, available_types)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ–¥–ø–∏—Å
    caption = get_caption_for_carousel_type(carousel_type, user_data)
    
    try:
        if message_to_edit:
            # –†–µ–¥–∞–≥—É—î–º–æ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_to_edit.message_id,
                media=InputMediaPhoto(
                    media=file_id,
                    caption=caption,
                    parse_mode="HTML"
                ),
                reply_markup=keyboard
            )
            return True
        else:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return await bot.send_photo(
                chat_id=chat_id,
                photo=file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ: {e}")
        if message_to_edit:
            await message_to_edit.edit_text(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å."
            )
        else:
            return await bot.send_message(
                chat_id, 
                "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å."
            )
        return False

@profile_carousel_router.message(Command("profile"))
async def cmd_profile_carousel(message: Message, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∫–∞—Ä—É—Å–µ–ª—ñ.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –∫–∞—Ä—É—Å–µ–ª—ñ.
    """
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ —á–∞—Ç—É
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /profile: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    user_data = await get_user_by_telegram_id(user_id)
    
    if not user_data:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        sent_message = await bot.send_message(
            chat_id,
            "üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n"
            "–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç "
            "–≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞). üì∏"
        )
        
        # –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –≤ registration_handler
        # –ù–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
        await show_profile_carousel(bot, chat_id, user_id)

@profile_carousel_router.callback_query(F.data.startswith("carousel:goto:"))
async def carousel_navigation(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ —Å–ª–∞–π–¥—ñ–≤.
    """
    if not callback.message or not callback.from_user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –í–∏—Ç—è–≥—É—î–º–æ —Ç–∏–ø –∫–∞—Ä—É—Å–µ–ª—ñ –∑ callback_data
    carousel_type_name = callback.data.split(":")[-1]
    try:
        carousel_type = CarouselType[carousel_type_name]
    except (KeyError, ValueError):
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–ª–∞–π–¥—É")
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
    result = await show_profile_carousel(
        bot,
        callback.message.chat.id,
        callback.from_user.id,
        carousel_type,
        callback.message
    )
    
    if result:
        await callback.answer()
    else:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ü–µ–π —Ç–∏–ø —Å–ª–∞–π–¥—É")

@profile_carousel_router.callback_query(F.data == "profile_carousel_close")
async def close_profile_carousel(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    if not callback.message:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    try:
        await callback.message.delete()
        await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ: {e}")
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é", show_alert=True)

@profile_carousel_router.callback_query(F.data == "carousel:noop")
async def carousel_noop(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ "–ø—É—Å—Ç–∏—Ö" –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—É—Å–µ–ª—ñ (—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏, –∑–∞–≥–ª—É—à–∫–∏).
    """
    await callback.answer()

def register_profile_carousel_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∫–∞—Ä—É—Å–µ–ª–ª—é –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    dp.include_router(profile_carousel_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
