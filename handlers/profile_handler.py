"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫–∞—Ä—É—Å–µ–ª—ñ.
–†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞–º–∏ –ø—Ä–æ—Ñ—ñ–ª—é.
"""
import asyncio
from enum import Enum, auto
from typing import Dict, Any, Optional, List, Union, Tuple

from aiogram import Bot, Router, F, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, 
    InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError

from database.crud import get_user_by_telegram_id
from config import logger
from keyboards.inline_keyboards import create_profile_menu_keyboard, create_expanded_profile_menu_keyboard

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ—É—Ç–µ—Ä
profile_carousel_router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –∫–∞—Ä—É—Å–µ–ª—ñ
class CarouselType(Enum):
    """–¢–∏–ø–∏ —Å–ª–∞–π–¥—ñ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é."""
    AVATAR = auto()  # –ö–∞—Å—Ç–æ–º–Ω–∏–π –∞–≤–∞—Ç–∞—Ä (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–∞–π–¥)
    PROFILE = auto()  # –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
    STATS = auto()    # –°–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    HEROES = auto()   # –°–∫—Ä—ñ–Ω—à–æ—Ç —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤

# –ú–∞–ø–ø—ñ–Ω–≥ —Ç–∏–ø—ñ–≤ –∫–∞—Ä—É—Å–µ–ª—ñ –Ω–∞ –∫–ª—é—á—ñ –≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
CAROUSEL_TYPE_TO_KEY = {
    CarouselType.AVATAR: "custom_avatar_file_id",
    CarouselType.PROFILE: "profile_screenshot_file_id",
    CarouselType.STATS: "stats_screenshot_file_id",
    CarouselType.HEROES: "heroes_screenshot_file_id",
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Å–ª–∞–π–¥—É
CAROUSEL_TYPE_TO_TITLE = {
    CarouselType.AVATAR: "üé≠ –ê–≤–∞—Ç–∞—Ä",
    CarouselType.PROFILE: "üë§ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å",
    CarouselType.STATS: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    CarouselType.HEROES: "ü¶∏ –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó",
}

# –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π placeholder –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
DEFAULT_IMAGE_URL = "https://res.cloudinary.com/ha1pzppgf/image/upload/v1748286434/file_0000000017a46246b78bf97e2ecd9348_zuk16r.png"

def create_carousel_keyboard(
    current_type: CarouselType,
    available_types: List[CarouselType]
) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª–ª—é –ø—Ä–æ—Ñ—ñ–ª—é.
    """
    builder = InlineKeyboardBuilder()
    current_idx = available_types.index(current_type)
    
    nav_row = []
    if current_idx > 0:
        prev_type = available_types[current_idx - 1]
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"carousel:goto:{prev_type.name}"))
    else:
        nav_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop"))
    
    position_text = f"{current_idx + 1}/{len(available_types)}"
    nav_row.append(InlineKeyboardButton(text=position_text, callback_data="carousel:noop"))
    
    if current_idx < len(available_types) - 1:
        next_type = available_types[current_idx + 1]
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"carousel:goto:{next_type.name}"))
    else:
        nav_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop"))
        
    builder.row(*nav_row)
    
    edit_callback_map = {
        CarouselType.AVATAR: "profile_add_avatar",
        CarouselType.PROFILE: "profile_update_basic",
        CarouselType.STATS: "profile_add_stats",
        CarouselType.HEROES: "profile_add_heroes",
    }
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ü–µ —Ñ–æ—Ç–æ", callback_data=edit_callback_map[current_type]),
        InlineKeyboardButton(text="‚öôÔ∏è –ë—ñ–ª—å—à–µ –æ–ø—Ü—ñ–π", callback_data="profile_menu_expand")
    )
    
    builder.row(InlineKeyboardButton(text="üö™ –ó–∞–∫—Ä–∏—Ç–∏", callback_data="profile_carousel_close"))
    
    return builder.as_markup()

def format_profile_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é."""
    nickname = user_data.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
    player_id = user_data.get('player_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    server_id = user_data.get('server_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    rank = user_data.get('current_rank', '–ù–µ–≤—ñ–¥–æ–º–æ')
    win_rate = user_data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ–≤—ñ–¥–æ–º–æ"
    matches = user_data.get('total_matches', '–ù–µ–≤—ñ–¥–æ–º–æ')
    heroes = user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    
    return (
        f"üë§ <b>{nickname}</b>\n"
        f"üÜî <b>ID:</b> {player_id} ({server_id})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {rank}\n"
        f"üìä <b>WR:</b> {win_rate_str} ({matches} –º–∞—Ç—á—ñ–≤)\n"
        f"ü¶∏ <b>–ì–µ—Ä–æ—ó:</b> {heroes}"
    )

def get_caption_for_carousel_type(
    carousel_type: CarouselType,
    user_data: Dict[str, Any]
) -> str:
    """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥–ø–∏—Å –¥–ª—è —Å–ª–∞–π–¥—É."""
    title = CAROUSEL_TYPE_TO_TITLE.get(carousel_type, "–ü—Ä–æ—Ñ—ñ–ª—å")
    if carousel_type == CarouselType.AVATAR:
        return f"<b>{title}</b>\n\n{format_profile_info(user_data)}"
    return f"<b>{title}</b>"

async def show_profile_carousel(
    bot: Bot,
    chat_id: int,
    user_id: int,
    carousel_type: CarouselType = CarouselType.AVATAR,
    message_to_edit: Optional[Message] = None,
) -> Union[Message, bool]:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —Å–ª–∞–π–¥ –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        text = "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /profile –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        if message_to_edit:
            await message_to_edit.edit_text(text)
        else:
            return await bot.send_message(chat_id, text)
        return False
    
    available_types = [c_type for c_type in CarouselType if CAROUSEL_TYPE_TO_KEY.get(c_type) and user_data.get(CAROUSEL_TYPE_TO_KEY[c_type])]
    if not available_types:
        available_types = [CarouselType.AVATAR]
    
    if carousel_type not in available_types:
        carousel_type = available_types[0]
    
    file_id_key = CAROUSEL_TYPE_TO_KEY.get(carousel_type)
    file_id = user_data.get(file_id_key) if file_id_key else None
    if not file_id:
        file_id = DEFAULT_IMAGE_URL
    
    keyboard = create_carousel_keyboard(carousel_type, available_types)
    caption = get_caption_for_carousel_type(carousel_type, user_data)
    
    media = InputMediaPhoto(media=file_id, caption=caption, parse_mode="HTML")
    
    try:
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if message_to_edit:
            # –Ø–∫—â–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–≥—É—î–º–æ –º–µ–¥—ñ–∞
            if message_to_edit.photo:
                await bot.edit_message_media(
                    chat_id=chat_id, message_id=message_to_edit.message_id,
                    media=media, reply_markup=keyboard
                )
            else: # –Ø–∫—â–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —Ç–µ–∫—Å—Ç, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ
                await message_to_edit.delete()
                await bot.send_photo(
                    chat_id=chat_id, photo=file_id, caption=caption,
                    reply_markup=keyboard, parse_mode="HTML"
                )
            return True
        else: # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return await bot.send_photo(
                chat_id=chat_id, photo=file_id, caption=caption,
                reply_markup=keyboard, parse_mode="HTML"
            )
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ: {e}")
        error_text = "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å."
        if message_to_edit:
            await message_to_edit.edit_text(error_text)
        else:
            return await bot.send_message(chat_id, error_text)
        return False

@profile_carousel_router.message(Command("profile"))
async def cmd_profile_carousel(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∫–∞—Ä—É—Å–µ–ª—ñ."""
    if not message.from_user: return
    
    await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —É —ñ–Ω—à–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    try:
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /profile: {e}")
    
    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        await state.set_state(RegistrationFSM.waiting_for_basic_photo)
        sent_message = await bot.send_message(
            chat_id,
            "üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n"
            "–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç "
            "–≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞). üì∏"
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)
    else:
        await show_profile_carousel(bot, chat_id, user_id)

@profile_carousel_router.callback_query(F.data.startswith("carousel:goto:"))
async def carousel_navigation(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ."""
    if not callback.message or not callback.from_user:
        return await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    try:
        carousel_type = CarouselType[callback.data.split(":")[-1]]
    except (KeyError, ValueError):
        return await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–ª–∞–π–¥—É")
    
    if await show_profile_carousel(bot, callback.message.chat.id, callback.from_user.id, carousel_type, callback.message):
        await callback.answer()
    else:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ü–µ–π —Ç–∏–ø —Å–ª–∞–π–¥—É")

@profile_carousel_router.callback_query(F.data == "profile_carousel_close")
async def close_profile_carousel(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–∞—Ä—É—Å–µ–ª—ñ."""
    if not callback.message: return await callback.answer("–ü–æ–º–∏–ª–∫–∞")
    try:
        await callback.message.delete()
        await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ")
    except TelegramAPIError:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é", show_alert=True)

@profile_carousel_router.callback_query(F.data == "carousel:noop")
async def carousel_noop(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ "–ø—É—Å—Ç–∏—Ö" –∫–Ω–æ–ø–æ–∫."""
    await callback.answer()

@profile_carousel_router.callback_query(F.data == "profile_menu_expand")
async def expand_menu_from_carousel(callback: CallbackQuery):
    """–†–æ–∑–≥–æ—Ä—Ç–∞—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –∫–∞—Ä—É—Å–µ–ª—ñ."""
    if not callback.message: return await callback.answer("–ü–æ–º–∏–ª–∫–∞")
    await callback.message.edit_reply_markup(reply_markup=create_expanded_profile_menu_keyboard())
    await callback.answer()

def register_profile_carousel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é."""
    dp.include_router(profile_carousel_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")