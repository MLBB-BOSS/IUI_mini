import html
import logging
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List
from collections import defaultdict

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

# === –°–•–û–í–ò–©–ï –Ü–°–¢–û–†–Ü–á –î–Ü–ê–õ–û–ì–Ü–í ===
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ defaultdict –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è deque –¥–ª—è –Ω–æ–≤–∏—Ö —á–∞—Ç—ñ–≤.
# deque –∑ maxlen - –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
chat_histories: Dict[int, Deque[Dict[str, str]]] = defaultdict(
    lambda: deque(maxlen=MAX_CHAT_HISTORY_LENGTH)
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
general_router = Router()


@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º."""
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")

    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"

    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥:
‚Ä¢ <code>/analyzeprofile</code> ‚Äì –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.
‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/go –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–Ω–∫</code>).
"""

    try:
        await message.answer_photo(
            photo=WELCOME_IMAGE_URL,
            caption=welcome_caption,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name_escaped}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        fallback_text = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.
–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–∫–æ–º–∞–Ω–¥–∞ <code>/analyzeprofile</code>).
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ (–∫–æ–º–∞–Ω–¥–∞ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code>).
"""
        try:
            await message.answer(fallback_text, parse_mode=ParseMode.HTML)
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except TelegramAPIError as e_text:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped}: {e_text}")


@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go. –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ GPT —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∏–Ω–∞–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ."""
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")

    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name_escaped}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>"
        )
        return

    thinking_messages = [
        f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name_escaped}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—É –ø–æ—Ä–∞–¥—É!",
        f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, {user_name_escaped}, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name_escaped}: {e}")

    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {e}")

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {processing_time:.2f}—Å")

    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.8 GPT (gpt-4.1)</i>"

    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ, —á–∞—Å—Ç–∏–Ω–∞–º–∏).")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} –Ω–∞–≤—ñ—Ç—å —á–∞—Å—Ç–∏–Ω–∞–º–∏: {e}", exc_info=True)
        # –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        pass


@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–≤–∏—á–∞–π–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —à—É–∫–∞—î –≤ –Ω–∏—Ö —Ç—Ä–∏–≥–µ—Ä–∏
    —ñ –≥–µ–Ω–µ—Ä—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI.
    """
    if not message.text or message.text.startswith('/'):
        return # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    text_lower = message.text.lower()
    chat_id = message.chat.id
    user = message.from_user
    user_name = user.first_name if user else "–î—Ä—É–∂–µ"

    # –ó–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—Ç–æ—á–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –¥–ª—è –ø–æ–≤–Ω–æ—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    chat_histories[chat_id].append({"role": "user", "content": message.text})

    # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä
    matched_trigger_mood = None
    for trigger, mood in CONVERSATIONAL_TRIGGERS.items():
        if trigger in text_lower:
            matched_trigger_mood = mood
            logger.info(f"–í —á–∞—Ç—ñ {chat_id} –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∏–≥–µ—Ä '{trigger}' –≤—ñ–¥ '{user_name}'.")
            break # –ó–Ω–∞–π—à–ª–∏ –ø–µ—Ä—à–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ

    if matched_trigger_mood:
        try:
            # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ø—ñ—é —ñ—Å—Ç–æ—Ä—ñ—ó –≤ —Å–µ—Ä–≤—ñ—Å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ race conditions
            history_for_api = list(chat_histories[chat_id])

            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                reply_text = await gpt.generate_conversational_reply(
                    user_name=user_name,
                    chat_history=history_for_api,
                    trigger_mood=matched_trigger_mood
                )

            if reply_text and "<i>" not in reply_text: # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É
                # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
                chat_histories[chat_id].append({"role": "assistant", "content": reply_text})
                await message.reply(reply_text)
                logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–æ–∑–º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —á–∞—Ç {chat_id}.")
            elif reply_text:
                 logger.warning(f"–°–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å—Ö–æ–∂–µ –Ω–∞ –ø–æ–º–∏–ª–∫—É, –¥–ª—è —á–∞—Ç—É {chat_id}: {reply_text}")
            else:
                 logger.error(f"–°–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —á–∞—Ç—É {chat_id}.")

        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–∏–≥–µ—Ä–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id}: {e}")


async def error_handler(update_event: Update, exception: Exception, bot: Bot):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ error_handler: {exception} –¥–ª—è update: {update_event.model_dump_json(exclude_none=True)}", exc_info=True)

    chat_id: Optional[int] = None
    user_name: str = "–¥—Ä—É–∂–µ"

    if update_event.message and update_event.message.chat:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user:
            user_name = html.escape(update_event.message.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å")
    elif update_event.callback_query and update_event.callback_query.message and update_event.callback_query.message.chat:
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user:
            user_name = html.escape(update_event.callback_query.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å")
        try:
            await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except Exception: pass

    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."

    if chat_id:
        try:
            await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")


def register_general_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp.include_router(general_router)
    logger.info("–ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ç—Ä–∏–≥–µ—Ä–∏) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")