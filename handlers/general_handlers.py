"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ "–ü–∞—Ç—ñ-–º–µ–Ω–µ–¥–∂–µ—Ä–∞".

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–∏—Ö –ª–æ–±—ñ.
- –û–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ (/start, /go).
- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–æ–∑–º–æ–≤–Ω–æ–≥–æ AI –Ω–∞ –±–∞–∑—ñ OpenAI.
- –ì–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.
"""
import html
import time
from collections import defaultdict
from datetime import datetime, timezone, timedelta
from typing import Dict, Any

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

import database
from config import (
    logger, PARTY_TRIGGER_PHRASES, PARTY_LOBBY_ROLES, OPENAI_API_KEY, WELCOME_IMAGE_URL,
    ADMIN_USER_ID, CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH, BOT_NAMES,
    CONVERSATIONAL_COOLDOWN_SECONDS
)
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard, create_party_size_keyboard,
    create_lobby_lifetime_keyboard, create_role_selection_keyboard,
    create_dynamic_lobby_keyboard
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

general_router = Router()

# =============================================================================
# ======================== FINITE STATE MACHINES (FSM) ========================
# =============================================================================

class PartyFSM(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ."""
    waiting_for_size = State()
    waiting_for_lifetime = State()
    waiting_for_initiator_role = State()
    waiting_for_joiner_role = State()

class ConversationalFSM(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    chatting = State()

# –ö–µ—à –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –≤ —Ä–æ–∑–º–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
conversational_cooldown_cache: Dict[int, float] = defaultdict(float)


# =============================================================================
# ============================ HELPER FUNCTIONS ===============================
# =============================================================================

async def format_lobby_message(lobby_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ.

    Args:
        lobby_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ª–æ–±—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.
    """
    players = lobby_data.get("players", {})
    party_size = lobby_data.get("party_size", 5)
    
    player_lines = [
        f"‚úÖ <b>{html.escape(p['full_name'])}</b> ‚Äî <i>{p['role']}</i>"
        for p in players.values()
    ]
    players_text = "\n".join(player_lines) if player_lines else "<i>–ü–æ–∫–∏ —â–æ –Ω—ñ–∫–æ–≥–æ...</i>"
    
    roles_left = lobby_data.get("roles_left", [])
    roles_text = "\n".join([f"‚Ä¢ {role}" for role in roles_left]) if roles_left else "<i>–í—Å—ñ —Ä–æ–ª—ñ –∑–∞–π–Ω—è—Ç—ñ!</i>"
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ expires_at —ñ—Å–Ω—É—î, —ñ–Ω–∞–∫—à–µ —Å—Ç–∞–≤–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    expires_at = lobby_data.get('expires_at', time.time())
    expires_dt = datetime.fromtimestamp(expires_at, tz=timezone(timedelta(hours=3))) # Kyiv time
    expires_str = expires_dt.strftime('%H:%M, %d.%m')
    
    return (
        f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ! (–¥–æ {expires_str})</b>\n\n"
        f"<b>–ì—Ä–∞–≤—Ü—ñ –≤ –ø–∞—Ç—ñ ({len(players)}/{party_size}):</b>\n{players_text}\n\n"
        f"<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n{roles_text}"
    )

async def update_lobby_message(bot: Bot, chat_id: int, user_id: int | None = None):
    """
    –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.

    Args:
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä `Bot`.
        chat_id: ID —á–∞—Ç—É, –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ.
        user_id: (–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
                 –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.
    """
    lobby_data = database.get_lobby(chat_id)
    if not lobby_data or "message_id" not in lobby_data:
        return

    try:
        new_text = await format_lobby_message(lobby_data)
        # –Ø–∫—â–æ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 0 –¥–ª—è "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ" –≤–∏–≥–ª—è–¥—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        keyboard_user_id = user_id if user_id is not None else 0
        
        await bot.edit_message_text(
            text=new_text,
            chat_id=chat_id,
            message_id=lobby_data["message_id"],
            reply_markup=create_dynamic_lobby_keyboard(keyboard_user_id, lobby_data),
            parse_mode=ParseMode.HTML
        )
    except TelegramAPIError as e:
        if "message to edit not found" in str(e).lower() or "message is not modified" in str(e).lower():
            logger.warning(f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–µ –∞–±–æ –Ω–µ–∑–º—ñ–Ω–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –≤ —á–∞—Ç—ñ {chat_id}.")
        else:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –≤ —á–∞—Ç—ñ {chat_id}: {e}")
            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ, –≤–∏–¥–∞–ª—è—î–º–æ –ª–æ–±—ñ –∑ –ë–î
            if "message to edit not found" in str(e).lower():
                database.remove_lobby(chat_id)


# =============================================================================
# ========================= LOBBY MANAGER HANDLERS ============================
# =============================================================================

@general_router.message(F.text.lower().in_(PARTY_TRIGGER_PHRASES))
async def on_party_trigger(message: types.Message, state: FSMContext):
    """–†–µ–∞–≥—É—î –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ."""
    if database.get_lobby(message.chat.id):
        await message.reply("‚òùÔ∏è –í —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ –π–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ç—ñ. –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å!")
        return
    await message.reply(
        "–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ?",
        reply_markup=create_party_confirmation_keyboard()
    )
    await state.clear()

@general_router.callback_query(F.data == "party_create_no")
async def on_party_creation_cancel(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–º–æ–≤—É –≤—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ."""
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥, –∑–≤–µ—Ä—Ç–∞–π—Å—è, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à! üòâ")
    await callback.answer()

@general_router.callback_query(F.data == "party_create_yes")
async def on_party_creation_start(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ, –∑–∞–ø–∏—Ç—É—é—á–∏ —Ä–æ–∑–º—ñ—Ä –ø–∞—Ç—ñ."""
    await callback.message.edit_text(
        "–ß—É–¥–æ–≤–æ! –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–∞—Ç—ñ:",
        reply_markup=create_party_size_keyboard()
    )
    await state.set_state(PartyFSM.waiting_for_size)
    await callback.answer()

@general_router.callback_query(PartyFSM.waiting_for_size, F.data.startswith("party_size_"))
async def on_party_size_select(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É –ø–∞—Ç—ñ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —á–∞—Å –∂–∏—Ç—Ç—è –ª–æ–±—ñ."""
    await state.update_data(party_size=int(callback.data.split("_")[-1]))
    await callback.message.edit_text(
        "–ü—Ä–∏–π–Ω—è—Ç–æ. –Ø–∫ –¥–æ–≤–≥–æ –ª–æ–±—ñ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–º:",
        reply_markup=create_lobby_lifetime_keyboard()
    )
    await state.set_state(PartyFSM.waiting_for_lifetime)
    await callback.answer()

@general_router.callback_query(PartyFSM.waiting_for_lifetime, F.data.startswith("party_lifetime_"))
async def on_lobby_lifetime_select(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —á–∞—Å—É –∂–∏—Ç—Ç—è –ª–æ–±—ñ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ä–æ–ª—å —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞."""
    lifetime_seconds = int(callback.data.split("_")[-1])
    await state.update_data(expires_at=int(time.time()) + lifetime_seconds)
    await callback.message.edit_text(
        "–î–æ–±—Ä–µ. –Ü –æ—Å—Ç–∞–Ω–Ω—î: –æ–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=create_role_selection_keyboard(PARTY_LOBBY_ROLES)
    )
    await state.set_state(PartyFSM.waiting_for_initiator_role)
    await callback.answer()

@general_router.callback_query(PartyFSM.waiting_for_initiator_role, F.data.startswith("party_role_select_"))
async def on_initiator_role_select(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º."""
    user_data = await state.get_data()
    await state.clear()

    user, chat = callback.from_user, callback.message.chat
    selected_role = callback.data.split("party_role_select_")[-1]
    
    roles_left = [r for r in PARTY_LOBBY_ROLES if r != selected_role]
    
    lobby_data = {
        "chat_id": chat.id,
        "leader_id": user.id,
        "party_size": user_data["party_size"],
        "players": {str(user.id): {"full_name": user.full_name, "role": selected_role}},
        "roles_left": roles_left,
        "expires_at": user_data["expires_at"]
    }

    await callback.message.delete()
    
    lobby_text = await format_lobby_message(lobby_data)
    lobby_msg = await bot.send_message(
        chat.id,
        lobby_text,
        reply_markup=create_dynamic_lobby_keyboard(user.id, lobby_data),
        parse_mode=ParseMode.HTML
    )
    
    # –î–æ–¥–∞—î–º–æ message_id –¥–æ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    lobby_data["message_id"] = lobby_msg.message_id
    database.add_lobby(**lobby_data)
    logger.info(f"–õ—ñ–¥–µ—Ä {user.full_name} (ID: {user.id}) —Å—Ç–≤–æ—Ä–∏–≤ –Ω–æ–≤–µ –ª–æ–±—ñ –≤ —á–∞—Ç—ñ {chat.id}.")
    await callback.answer()

@general_router.callback_query(F.data == "party_join")
async def on_party_join(callback: types.CallbackQuery, state: FSMContext):
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–±—ñ."""
    lobby = database.get_lobby(callback.message.chat.id)
    user_id_str = str(callback.from_user.id)

    if not lobby or user_id_str in lobby["players"] or len(lobby["players"]) >= lobby["party_size"]:
        await callback.answer("–í–∏ –≤–∂–µ —É –ø–∞—Ç—ñ, –∞–±–æ –ª–æ–±—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ/–Ω–µ–∞–∫—Ç–∏–≤–Ω–µ!", show_alert=True)
        return
        
    if not lobby.get("roles_left"):
        await callback.answer("–ù–∞ –∂–∞–ª—å, –≤—ñ–ª—å–Ω–∏—Ö —Ä–æ–ª–µ–π –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å.", show_alert=True)
        return

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫"
    await callback.answer()
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –∑–∞–ø–∏—Ç–æ–º —Ä–æ–ª—ñ
    await callback.message.reply(
        f"{html.escape(callback.from_user.first_name)}, –æ–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=create_role_selection_keyboard(lobby["roles_left"]),
        # –ë–∞–∂–∞–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "—Å–∞–º–æ–∑–Ω–∏—â—É–≤–∞–Ω–∏–º" –∞–±–æ –≤–∏–¥–∞–ª—è—Ç–∏ –π–æ–≥–æ –ø–æ—Ç—ñ–º
    )
    await state.set_state(PartyFSM.waiting_for_joiner_role)


@general_router.callback_query(PartyFSM.waiting_for_joiner_role, F.data.startswith("party_role_select_"))
async def on_joiner_role_select(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –¥–æ –ª–æ–±—ñ."""
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–ª—ñ
    try:
        await callback.message.delete()
    except TelegramAPIError:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ.")

    await state.clear()
    
    user, chat = callback.from_user, callback.message.chat
    lobby = database.get_lobby(chat.id)
    if not lobby: return

    selected_role = callback.data.split("party_role_select_")[-1]
    if selected_role not in lobby.get("roles_left", []):
        await callback.answer("–¶—è —Ä–æ–ª—å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    lobby["players"][str(user.id)] = {"full_name": user.full_name, "role": selected_role}
    lobby["roles_left"].remove(selected_role)
    
    database.add_lobby(**lobby)
    await update_lobby_message(bot, chat.id, user.id)
    await callback.answer(f"–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø–∞—Ç—ñ —è–∫ {selected_role}!", show_alert=True)

    if len(lobby["players"]) >= lobby["party_size"]:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç—ñ {chat.id} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—ñ–±—Ä–∞–Ω–∞!")
        await bot.edit_message_reply_markup(chat.id, lobby["message_id"], reply_markup=None)
        
        leader_info = lobby["players"].get(str(lobby["leader_id"]))
        leader_mention = f"<a href='tg://user?id={lobby['leader_id']}'>{leader_info['full_name']}</a>" if leader_info else "–õ—ñ–¥–µ—Ä"
        
        mentions = [
            f"<a href='tg://user?id={uid}'>{p_info['full_name']}</a>"
            for uid, p_info in lobby["players"].items()
        ]
        
        await bot.send_message(
            chat.id,
            f"‚öîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!</b>\n–õ—ñ–¥–µ—Ä: {leader_mention}\n–ì—Ä–∞–≤—Ü—ñ: {', '.join(mentions)}\n\n<b>–£—Å—ñ –≤ –≥—Ä—É!</b>",
            parse_mode=ParseMode.HTML,
            reply_to_message_id=lobby["message_id"]
        )
        database.remove_lobby(chat.id)

@general_router.callback_query(F.data == "party_leave")
async def on_party_leave(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏—Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑ –ª–æ–±—ñ."""
    user, chat = callback.from_user, callback.message.chat
    lobby = database.get_lobby(chat.id)
    user_id_str = str(user.id)

    if not lobby or user_id_str not in lobby["players"]:
        await callback.answer("–í–∏ –Ω–µ –≤ —Ü—å–æ–º—É –ø–∞—Ç—ñ.", show_alert=True)
        return
        
    if user.id == lobby.get("leader_id"):
        await callback.answer("–õ—ñ–¥–µ—Ä –Ω–µ –º–æ–∂–µ –≤–∏–π—Ç–∏, –ª–∏—à–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ.", show_alert=True)
        return

    removed_player_role = lobby["players"].pop(user_id_str)["role"]
    if removed_player_role not in lobby["roles_left"]:
        lobby["roles_left"].append(removed_player_role)
        
    database.add_lobby(**lobby)
    await update_lobby_message(bot, chat.id, user.id)
    await callback.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –ø–∞—Ç—ñ.", show_alert=True)

@general_router.callback_query(F.data == "party_cancel")
async def on_party_cancel(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ª–æ–±—ñ –π–æ–≥–æ –ª—ñ–¥–µ—Ä–æ–º."""
    user, chat = callback.from_user, callback.message.chat
    lobby = database.get_lobby(chat.id)

    if not lobby or user.id != lobby.get("leader_id"):
        await callback.answer("–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –ø–∞—Ç—ñ –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ!", show_alert=True)
        return
        
    database.remove_lobby(chat.id)
    await callback.message.edit_text("üö´ <b>–õ–æ–±—ñ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –π–æ–≥–æ –ª—ñ–¥–µ—Ä–æ–º.</b>")
    await callback.answer("–õ–æ–±—ñ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


# =============================================================================
# ========================== COMMAND HANDLERS =================================
# =============================================================================

@general_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start, –≤—ñ—Ç–∞—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await state.clear()
    user_name = html.escape(message.from_user.first_name)
    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! –Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.\n\n"
        "<b>–©–æ —è –º–æ–∂—É:</b>\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–≥—Ä–æ–≤—ñ –ª–æ–±—ñ (–Ω–∞–ø–∏—à–∏ '–≥–æ –ø–∞—Ç—ñ' –≤ —á–∞—Ç—ñ).\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≥—Ä—É (–∫–æ–º–∞–Ω–¥–∞ /go –∞–±–æ –ø—Ä–æ—Å—Ç–æ –∑–≥–∞–¥–∞–π –º–µ–Ω–µ –≤ —á–∞—Ç—ñ).\n"
        "‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (–º–∞–π–±—É—Ç–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è!).\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–æ—á–Ω–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, —ñ —è –¥–æ–ø–æ–º–æ–∂—É!"
    )
    try:
        # –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await message.answer_photo(WELCOME_IMAGE_URL, caption=welcome_text)
    except TelegramAPIError:
        await message.answer(welcome_text)

@general_router.message(Command("go"))
async def cmd_go(message: types.Message, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /go, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ OpenAI –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç.
    """
    user_name = html.escape(message.from_user.first_name)
    query = message.text.replace("/go", "").strip()

    if not query:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go.")
        return

    thinking_msg = await message.reply("‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –∑–∞–ø–∏—Ç...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response = await gpt.get_response(user_name, query)
        await send_message_in_chunks(bot, message.chat.id, response, initial_message_to_edit=thinking_msg)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É cmd_go: {e}", exc_info=True)
        await thinking_msg.edit_text("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. üòî")


# =============================================================================
# ====================== CONVERSATIONAL AI HANDLERS ===========================
# =============================================================================

def is_bot_mentioned_or_private(message: types.Message, bot_info: types.User) -> bool:
    """
    –§—ñ–ª—å—Ç—Ä, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–∏–º, –∞–±–æ —á–∏ –∑–≥–∞–¥–∞–ª–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ.
    """
    if message.chat.type == 'private':
        return True
    if message.text:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≥–∞–¥–∫–∏ –∑–∞ @username –∞–±–æ –∑–∞ —ñ–º–µ–Ω–µ–º
        bot_username = f"@{bot_info.username}"
        return bot_username in message.text or any(name.lower() in message.text.lower() for name in BOT_NAMES)
    return False

@general_router.message(
    lambda msg: is_bot_mentioned_or_private(msg, bot.get_me()),
    F.text,
    ~F.text.lower().in_(PARTY_TRIGGER_PHRASES),
    ~CommandStart(),
    ~Command("go")
)
async def on_conversational_trigger(message: types.Message, state: FSMContext, bot: Bot):
    """
    –†–µ–∞–≥—É—î –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ –∫–æ–º–∞–Ω–¥–∏), –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ñ –±–æ—Ç—É,
    —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —Ä–æ–∑–º–æ–≤—É.
    """
    user_id = message.from_user.id
    current_time = time.time()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É
    if current_time - conversational_cooldown_cache[user_id] < CONVERSATIONAL_COOLDOWN_SECONDS:
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —è–∫–µ—Å—å —Ç–∏—Ö–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
        logger.info(f"–ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
        return

    await state.set_state(ConversationalFSM.chatting)
    user_data = await state.get_data()
    history = user_data.get('history', [])
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    history.append({"role": "user", "content": message.text})
    
    # –û–±—Ä—ñ–∑–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –ª—ñ–º—ñ—Ç
    if len(history) > MAX_CHAT_HISTORY_LENGTH:
        history = history[-MAX_CHAT_HISTORY_LENGTH:]

    thinking_msg = await message.reply("ü§î –î—É–º–∞—é...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            # –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            response_text = await gpt.get_response_with_history(history)
        
        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        await send_message_in_chunks(bot, message.chat.id, response_text, initial_message_to_edit=thinking_msg)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó
        conversational_cooldown_cache[user_id] = current_time

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑–º–æ–≤–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É: {e}", exc_info=True)
        await thinking_msg.edit_text("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear() # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏


# =============================================================================
# ============================= ERROR HANDLER =================================
# =============================================================================

async def error_handler(event: types.ErrorEvent, bot: Bot):
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫. –õ–æ–≥—É—î –≤–∏–Ω—è—Ç–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception}", exc_info=True)
    
    chat_id = None
    if event.update.callback_query:
        chat_id = event.update.callback_query.message.chat.id
        try:
            await event.update.callback_query.answer(
                "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞...", show_alert=True
            )
        except TelegramAPIError:
            pass # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback, –Ω—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
    elif event.update.message:
        chat_id = event.update.message.chat.id

    if chat_id:
        try:
            await bot.send_message(
                chat_id,
                "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞. "
                "–Ø –≤–∂–µ —Å–ø–æ–≤—ñ—Å—Ç–∏–≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤, —ñ –≤–æ–Ω–∏ –≤—Å–µ –≤–∏–ø—Ä–∞–≤–ª—è—Ç—å!"
            )
        except TelegramAPIError:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}.")


# =============================================================================
# =========================== HANDLER REGISTRATION ============================
# =============================================================================

def register_general_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ.
    """
    dp.include_router(general_router)
    logger.info("‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (v3.1 - Conversational) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")