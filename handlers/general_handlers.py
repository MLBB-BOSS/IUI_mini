import html
import logging
import time
from datetime import datetime, timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext


# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
# –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —à–ª—è—Ö–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞—Ç–æ—á–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
from config import ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logger –∑ config
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks
# from ..config import ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger # –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–Ω–æ—Å–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É
# from ..services.openai_service import MLBBChatGPT
# from ..utils.message_utils import send_message_in_chunks


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∏–π
# logger = logging.getLogger(__name__)

async def cmd_start(message: Message, state: FSMContext, bot: Bot): # –î–æ–¥–∞–Ω–æ bot –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ send_message_in_chunks
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º."""
    await state.clear() # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")

    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"

    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥:
‚Ä¢ <code>/analyzeprofile</code> ‚Äì –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.
‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/go –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–Ω–∫</code>).
"""

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bot –ø–µ—Ä–µ–¥–∞–Ω–∏–π –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∞–±–æ bot –∑ message.bot
        await message.answer_photo(
            photo=WELCOME_IMAGE_URL,
            caption=welcome_caption,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name_escaped}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
        fallback_text = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.
–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–∫–æ–º–∞–Ω–¥–∞ <code>/analyzeprofile</code>).
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ (–∫–æ–º–∞–Ω–¥–∞ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code>).
"""
        try:
            await message.answer(fallback_text, parse_mode=ParseMode.HTML)
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except TelegramAPIError as e_text:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped}: {e_text}")


async def cmd_go(message: Message, state: FSMContext, bot: Bot): # –î–æ–¥–∞–Ω–æ bot –¥–ª—è send_message_in_chunks
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go. –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ GPT —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–∞—Å—Ç–∏–Ω–∞–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ."""
    await state.clear() # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    # –í–∏–ª—É—á–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /go —Ç–∞ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")

    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name_escaped}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>"
        )
        return

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
    thinking_messages = [
        f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name_escaped}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—É –ø–æ—Ä–∞–¥—É!",
        f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, {user_name_escaped}, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name_escaped}: {e}")

    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî" # Default error
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OPENAI_API_KEY –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {e}")
        # response_text –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {processing_time:.2f}—Å")

    admin_info = ""
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ADMIN_USER_ID –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.8 GPT (gpt-4.1)</i>" # –í–µ—Ä—Å—ñ—é –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥

    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(
            bot_instance=bot, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ, —á–∞—Å—Ç–∏–Ω–∞–º–∏).")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} –Ω–∞–≤—ñ—Ç—å —á–∞—Å—Ç–∏–Ω–∞–º–∏: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. (–ö–æ–¥: GO_SEND_FAIL)"
            if thinking_msg:
                 try:
                    await thinking_msg.edit_text(final_error_msg, parse_mode=None)
                 except TelegramAPIError: 
                    await message.reply(final_error_msg, parse_mode=None)
            else: 
                await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err_send:
            logger.error(f"–ó–æ–≤—Å—ñ–º –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name_escaped}: {final_err_send}")

async def error_handler(update_event: Update, exception: Exception, bot: Bot): # –î–æ–¥–∞–Ω–æ bot
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ error_handler: {exception} –¥–ª—è update: {update_event.model_dump_json(exclude_none=True)}", exc_info=True)

    chat_id: Optional[int] = None
    user_name: str = "–¥—Ä—É–∂–µ" # Default user name

    # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ chat_id —Ç–∞ user_name –∑ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–ø–¥–µ–π—Ç—ñ–≤
    if update_event.message and update_event.message.chat:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user:
            user_name = html.escape(update_event.message.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å")
    elif update_event.callback_query and update_event.callback_query.message and update_event.callback_query.message.chat:
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user:
            user_name = html.escape(update_event.callback_query.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å")
        try:
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫—É, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" —É –∫–ª—ñ—î–Ω—Ç–∞
            await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except Exception: pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–ª–±–µ–∫ –Ω–µ –≤–¥–∞–ª–∞—Å—è

    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É –∞–±–æ –¥–≤—ñ."

    if chat_id:
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            await bot.send_message(chat_id, error_message_text, parse_mode=None) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
def register_general_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_go, Command("go"))
    # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ —Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è –≤ dp.errors.register
    # dp.errors.register(error_handler) # –¶–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤ main.py
    logger.info("–ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
