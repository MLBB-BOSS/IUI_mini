"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –û–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ (/start, /go, /search).
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –≤ —á–∞—Ç—ñ.
- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
- –ì–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.
- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞.

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä—ñ `general_router`, —â–æ –æ–±—Ä–æ–±–ª—è—î
–≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
–õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –≤–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º–∏–π –º–æ–¥—É–ª—å `party_handler`.
"""
import html
import logging
import re
import time
import base64
import io
import random
from datetime import datetime, timezone, timedelta
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update, CallbackQuery, PhotoSize, BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from openai import RateLimitError

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH,
    BOT_NAMES, CONVERSATIONAL_COOLDOWN_SECONDS,
    VISION_AUTO_RESPONSE_ENABLED, VISION_RESPONSE_COOLDOWN_SECONDS, 
    VISION_MAX_IMAGE_SIZE_MB, VISION_CONTENT_EMOJIS, SEARCH_COOLDOWN_SECONDS
)
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∏
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks
from utils.formatter import format_bot_response
# üß† –Ü–ú–ü–û–†–¢–£–Ñ–ú–û –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ë–î –¢–ê –ù–û–í–ò–ú–ò –®–ê–†–ê–ú–ò –ü–ê–ú'–Ø–¢–Ü
from database.crud import get_user_settings, update_user_settings
from utils.session_memory import SessionData, load_session, save_session
from utils.cache_manager import load_user_cache, save_user_cache, clear_user_cache


# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –£ –ü–ê–ú'–Ø–¢–Ü ===
chat_cooldowns: dict[int, float] = {}
vision_cooldowns: dict[int, float] = {}
search_cooldowns: dict[int, float] = {}

# üß† –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
PERSONALIZATION_TRIGGERS = [
    "–º—ñ–π —Ä–∞–Ω–≥", "–º–æ—ó –≥–µ—Ä–æ—ó", "–º–æ—ó—Ö –≥–µ—Ä–æ—ó–≤", "–º–æ—ó —É–ª—é–±–ª–µ–Ω—ñ",
    "–º—ñ–π –≤—ñ–Ω—Ä–µ–π—Ç", "–º–æ—è —Å—Ç–∞—Ç–∞", "–º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "–ø—Ä–æ –º–µ–Ω–µ"
]
# üíé –ù–û–í–ï: –¢—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—ñ –∫—Ä–∞—â–µ –æ–±—Ä–æ–±–∏—Ç–∏ —á–µ—Ä–µ–∑ /go
DETAILED_REQUEST_TRIGGERS = [
    "–ø–æ—Ä–∞–¥—å", "–ø–æ—è—Å–Ω–∏", "—Ä–æ–∑–∫–∞–∂–∏", "–≥–∞–π–¥", "–∫–æ–≥–æ –∫—Ä–∞—â–µ", "—â–æ –∫—Ä–∞—â–µ",
    "—è–∫ –≥—Ä–∞—Ç–∏", "—â–æ –∑–±–∏—Ä–∞—Ç–∏", "–∫–æ–Ω—Ç—Ä–ø—ñ–∫"
]


# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–û–£–¢–ï–†–Ü–í –¢–ê –ö–õ–Ü–Ñ–ù–¢–Ü–í ===
general_router = Router()
# üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ GPT –∫–ª—ñ—î–Ω—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö
gpt_client = MLBBChatGPT(OPENAI_API_KEY)


# === –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø –ö–û–ú–ê–ù–î –ë–û–¢–ê ===
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="profile", description="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å (—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è)"),
        BotCommand(command="go", description="üí¨ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è AI-–ø–æ–º—ñ—á–Ω–∏–∫—É"),
        BotCommand(command="search", description="üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å"),
        BotCommand(command="analyzeprofile", description="üì∏ –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é"),
        BotCommand(command="analyzestats", description="üìä –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ–π –±–æ—Ç–∞"),
        BotCommand(command="mute", description="üîá –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ —Ä–µ–∞–∫—Ü—ñ—ó"),
        BotCommand(command="unmute", description="üîä –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—Å—ñ —Ä–µ–∞–∫—Ü—ñ—ó"),
        BotCommand(command="help", description="‚ùì –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ"),
    ]
    try:
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True)

# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
def get_user_display_name(user: types.User | None) -> str:
    if not user:
        return "–¥—Ä—É–∂–µ"
    if user.first_name and user.first_name.strip():
        return html.escape(user.first_name.strip())
    elif user.username and user.username.strip():
        return html.escape(user.username.strip())
    else:
        return "–¥—Ä—É–∂–µ"

# === –ó–ê–ì–ê–õ–¨–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ===
@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start, —è–∫–∏–π —Ç–∞–∫–æ–∂ –∑–Ω—ñ–º–∞—î –º'—é—Ç."""
    await state.clear()
    user = message.from_user
    if not user: return

    # ‚ùóÔ∏è –õ–û–ì–Ü–ö–ê –ó–ù–Ø–¢–¢–Ø –ú'–Æ–¢–£ –ü–†–ò –°–¢–ê–†–¢–Ü
    settings = await get_user_settings(user.id)
    if settings.mute_chat and settings.mute_vision and settings.mute_party:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start, –∑–Ω—ñ–º–∞—é –≤—Å—ñ –º'—é—Ç–∏.")
        await update_user_settings(user.id, mute_chat=False, mute_vision=False, mute_party=False)
        await clear_user_cache(user.id)
    
    user_name_escaped = get_user_display_name(user)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ /start.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_hour = datetime.now(kyiv_tz).hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else "‚òÄÔ∏è" if 12 <= current_hour < 17 else "üåÜ" if 17 <= current_hour < 22 else "üåô"
    
    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>GGenius</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ó–Ω–∞–π—Ç–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ!
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.
üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ!

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à–∏ —ó—ó:
‚Ä¢ <code>/search &lt;—Ç–≤—ñ–π –∑–∞–ø–∏—Ç&gt;</code>
‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code>
‚Ä¢ <code>/profile</code>
‚Ä¢ –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è! üì∏
"""
    try:
        await message.answer_photo(photo=WELCOME_IMAGE_URL, caption=welcome_caption, parse_mode=ParseMode.HTML)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç.")
        await message.answer(welcome_caption, parse_mode=ParseMode.HTML)

@general_router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    help_text = """
‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É GGenius</b>

–Ø - –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Mobile Legends. –û—Å—å —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
/profile - –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å.
/go <code>&lt;–ø–∏—Ç–∞–Ω–Ω—è&gt;</code> - –ó–∞–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≥—Ä—É (–≥–µ—Ä–æ—ó, –ø—Ä–µ–¥–º–µ—Ç–∏, —Ç–∞–∫—Ç–∏–∫–∏).
/search <code>&lt;–∑–∞–ø–∏—Ç&gt;</code> - –ó–Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ.
/analyzeprofile - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
/analyzestats - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤–∞—à–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
/settings - –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ—ó—Ö —Ä–µ–∞–∫—Ü—ñ–π.
/mute - –í–∏–º–∫–Ω—É—Ç–∏ –º–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–∞—Å.
/unmute - –£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

–¢–∞–∫–æ–∂ —è –º–æ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É, —è–∫—â–æ –≤–∏ –∑–≤–µ—Ä–Ω–µ—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ.
"""
    await message.reply(help_text, parse_mode=ParseMode.HTML)

# üöÄ –û–ù–û–í–õ–ï–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö /SEARCH
@general_router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    if not user: return
    user_name_escaped = get_user_display_name(user)
    user_id = user.id
    
    # üöÄ –õ–û–ì–Ü–ö–ê –ö–£–õ–î–ê–£–ù–£
    current_time = time.time()
    last_search_time = search_cooldowns.get(user_id, 0)
    
    if (current_time - last_search_time) < SEARCH_COOLDOWN_SECONDS:
        seconds_left = int(SEARCH_COOLDOWN_SECONDS - (current_time - last_search_time))
        await message.reply(f"‚è≥ –ó–∞—á–µ–∫–∞–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ {seconds_left} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—à—É–∫–æ–º.")
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /search –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ.")
        return

    user_query = message.text.replace("/search", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: '{user_query}'")

    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üîé\n–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è <code>/search</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n<code>/search –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É –≥–µ—Ä–æ—ó–≤</code>", parse_mode=ParseMode.HTML)
        return

    thinking_msg = await message.reply(f"üõ∞Ô∏è {user_name_escaped}, —à—É–∫–∞—é –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ...")
    start_time = time.time()
    
    async with gpt_client as gpt:
        response_text = await gpt.get_web_search_response(user_name_escaped, user_query)
    
    # üöÄ –û–ù–û–í–õ–Æ–Ñ–ú–û –ß–ê–° –û–°–¢–ê–ù–ù–¨–û–ì–û –ü–û–®–£–ö–£
    search_cooldowns[user_id] = time.time()
    
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /search –¥–ª—è '{user_query}': {processing_time:.2f}—Å")

    if not response_text:
        response_text = f"–í–∏–±–∞—á, {user_name_escaped}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."
    else:
        # ‚ùóÔ∏è –ù–û–í–ï: –ó–∞–º—ñ–Ω—é—î–º–æ Markdown –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç
        link_pattern = re.compile(r'\(\[.*?\]\(https?://\S+\)\)')
        response_text = link_pattern.sub("üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è", response_text)

    admin_info = ""
    # ‚ùóÔ∏è FIX: –Ø–≤–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    if int(user_id) == int(ADMIN_USER_ID):
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | OpenAI ({gpt_client.SEARCH_MODEL})</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /search –¥–ª—è {user_name_escaped}: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
            if thinking_msg: await thinking_msg.edit_text(final_error_msg, parse_mode=None)
            else: await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {final_err}")

@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    if not user: return
    user_name_escaped = get_user_display_name(user)
    user_id = user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç /go: '{user_query}'")

    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>", parse_mode=ParseMode.HTML)
        return

    thinking_msg = await message.reply(random.choice([f"ü§î –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç...", f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...", f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."]))
    start_time = time.time()

    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with gpt_client as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}': {e}")

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}': {processing_time:.2f}—Å")

    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | GPT ({gpt_client.TEXT_MODEL})</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(bot, message.chat.id, full_response_to_send, ParseMode.HTML, thinking_msg)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
            if thinking_msg: await thinking_msg.edit_text(final_error_msg, parse_mode=None)
            else: await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {final_err}")

# ‚ùóÔ∏è –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø /mute —Ç–∞ /unmute
@general_router.message(Command("mute"))
async def cmd_mute(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /mute, —â–æ –≤–∏–º–∏–∫–∞—î –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó."""
    if not message.from_user:
        return
    user_id = message.from_user.id
    user_name = get_user_display_name(message.from_user)
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /mute.")
    success = await update_user_settings(
        user_id, mute_chat=True, mute_vision=True, mute_party=True
    )
    if success:
        await message.reply("üîá –î–æ–±—Ä–µ, —è –±—É–¥—É –º–æ–≤—á–∞—Ç–∏. –í—Å—ñ –º–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó –≤–∏–º–∫–Ω–µ–Ω–æ.")
    else:
        await message.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è. üòï")

@general_router.message(Command("unmute"))
async def cmd_unmute(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /unmute, —â–æ –≤–º–∏–∫–∞—î –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó."""
    if not message.from_user:
        return
    user_id = message.from_user.id
    user_name = get_user_display_name(message.from_user)

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /unmute.")
    success = await update_user_settings(
        user_id, mute_chat=False, mute_vision=False, mute_party=False
    )
    if success:
        await message.reply("üîä –Ø –∑–Ω–æ–≤—É –≤ –≥—Ä—ñ! –í—Å—ñ –º–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
    else:
        await message.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è. üòï")


# === –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (–§–û–¢–û –¢–ê –¢–ï–ö–°–¢) ===
@general_router.message(F.photo)
async def handle_image_messages(message: Message, bot: Bot):
    if not VISION_AUTO_RESPONSE_ENABLED or not message.photo or not message.from_user:
        return

    user_id = message.from_user.id
    bot_info = await bot.get_me()
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id

    # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–¢–£–°–£ –ú'–Æ–¢–£
    settings = await get_user_settings(user_id)
    if settings.mute_vision:
        if is_reply_to_bot:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑ mute_vision=True –≤—ñ–¥–ø–æ–≤—ñ–≤ –±–æ—Ç—É, –∑–Ω—ñ–º–∞—é –º'—é—Ç vision.")
            await update_user_settings(user_id, mute_vision=False)
            await clear_user_cache(user_id)
            await message.reply("üì∏ –ü—Ä–∏—î–º–Ω–æ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏ —Ç–≤–æ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è! –†–µ–∞–∫—Ü—ñ—ó –Ω–∞ —Ñ–æ—Ç–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
        else:
            logger.info(f"–Ü–≥–Ω–æ—Ä—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {user_id}, –æ—Å–∫—ñ–ª—å–∫–∏ mute_vision=True.")
            return

    chat_id = message.chat.id
    current_time = time.time()
    current_user_name = get_user_display_name(message.from_user)
    
    user_caption = message.caption or ""
    
    is_caption_mention = False
    if user_caption:
        is_caption_mention = (f"@{bot_info.username.lower()}" in user_caption.lower() or 
                            any(re.search(r'\b' + name + r'\b', user_caption.lower()) for name in BOT_NAMES))

    should_respond = False
    if is_reply_to_bot or is_caption_mention:
        should_respond = True
    else:
        last_vision_time = vision_cooldowns.get(chat_id, 0)
        if (current_time - last_vision_time) > VISION_RESPONSE_COOLDOWN_SECONDS and random.random() < 0.7:
            should_respond = True
            vision_cooldowns[chat_id] = current_time

    if not should_respond:
        return

    largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
    if largest_photo.file_size and largest_photo.file_size > VISION_MAX_IMAGE_SIZE_MB * 1024 * 1024:
        await message.reply(f"–í–∏–±–∞—á, {current_user_name}, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ–ª–∏–∫–µ.")
        return

    thinking_msg = None
    try:
        if is_reply_to_bot or is_caption_mention:
            thinking_msg = await message.reply(f"üîç {current_user_name}, –∞–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")

        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info or not file_info.file_path: return

        image_bytes_io = await bot.download_file(file_info.file_path)
        if not image_bytes_io: return

        image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')
        
        async with gpt_client as gpt:
            vision_response = await gpt.analyze_image_universal(
                image_base64, 
                current_user_name,
                caption_text=user_caption
            )

        if vision_response and vision_response.strip():
            content_type = "general"
            response_lower = vision_response.lower()
            if any(word in response_lower for word in ["–º–µ–º", "—Å–º—ñ—à–Ω", "–∂–∞—Ä—Ç"]): content_type = "meme"
            elif any(word in response_lower for word in ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "–≥—Ä–∞", "–ø—Ä–æ—Ñ—ñ–ª—å"]): content_type = "screenshot"
            elif any(word in response_lower for word in ["—Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—Å"]): content_type = "text"
            
            emoji = VISION_CONTENT_EMOJIS.get(content_type, "üîç")
            final_response = f"{emoji} {vision_response}" if not any(char in vision_response[:3] for char in VISION_CONTENT_EMOJIS.values()) else vision_response

            if thinking_msg:
                await thinking_msg.edit_text(final_response, parse_mode=None)
            else:
                await message.reply(final_response, parse_mode=None)
            
        elif thinking_msg:
            await thinking_msg.edit_text(f"–•–º, {current_user_name}, –Ω–µ –º–æ–∂—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏, —â–æ —Ç—É—Ç ü§î")
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}: {e}")
        if thinking_msg: await thinking_msg.delete()
        await message.reply(f"–£–ø—Å, {current_user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòÖ")

@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    if not message.text or message.text.startswith('/') or not message.from_user:
        return

    url_pattern = re.compile(r'https?://\S+')
    if url_pattern.search(message.text):
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id} –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –±—É–¥–µ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
        return

    user_id = message.from_user.id
    bot_info = await bot.get_me()
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id

    # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–¢–£–°–£ –ú'–Æ–¢–£
    settings = await get_user_settings(user_id)
    if settings.mute_chat:
        if is_reply_to_bot:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑ mute_chat=True –≤—ñ–¥–ø–æ–≤—ñ–≤ –±–æ—Ç—É, –∑–Ω—ñ–º–∞—é –º'—é—Ç —á–∞—Ç—É.")
            await update_user_settings(user_id, mute_chat=False)
            await clear_user_cache(user_id)
            await message.reply("üîä –ü—Ä–∏—î–º–Ω–æ –∑–Ω–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–∞—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
        else:
            logger.info(f"–Ü–≥–Ω–æ—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ç—Ä–∏–≥–µ—Ä –≤—ñ–¥ {user_id}, –æ—Å–∫—ñ–ª—å–∫–∏ mute_chat=True.")
            return

    text_lower = message.text.lower()
    chat_id = message.chat.id
    current_user_name = get_user_display_name(message.from_user)
    current_time = time.time()
    
    is_explicit_mention = f"@{bot_info.username.lower()}" in text_lower
    is_name_mention = any(re.search(r'\b' + name + r'\b', text_lower) for name in BOT_NAMES)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –±—É–¥—å-—è–∫–æ–≥–æ —Ç—Ä–∏–≥–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    is_trigger_present = next((True for trigger in CONVERSATIONAL_TRIGGERS if re.search(r'\b' + re.escape(trigger) + r'\b', text_lower)), False)
    
    # üíé –ù–û–í–ï: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
    is_detailed_request = any(trigger in text_lower for trigger in DETAILED_REQUEST_TRIGGERS)
    
    if is_detailed_request:
        logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ {current_user_name}. –ü—Ä–æ–ø–æ–Ω—É—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /go.")
        original_query = message.text.replace(f"@{bot_info.username}", "").strip()
        await message.reply(
            f"ü§î {current_user_name}, —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ —Å–∫–ª–∞–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è.\n"
            f"–î–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /go:\n"
            f"<code>/go {html.escape(original_query)}</code>"
        )
        return

    if not (is_reply_to_bot or is_trigger_present):
        return

    should_respond = False
    if is_explicit_mention or is_reply_to_bot or is_name_mention:
        should_respond = True
    elif (current_time - chat_cooldowns.get(chat_id, 0)) > CONVERSATIONAL_COOLDOWN_SECONDS:
        should_respond = True
        chat_cooldowns[chat_id] = current_time

    if should_respond:
        is_personalization_request = any(trigger in text_lower for trigger in PERSONALIZATION_TRIGGERS)
        
        user_cache = await load_user_cache(user_id)
        is_registered = bool(user_cache)

        if not is_registered and is_personalization_request:
            logger.info(f"–ù–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {current_user_name} —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            await message.reply(
                f"–ü—Ä–∏–≤—ñ—Ç, {current_user_name}! üëã\n\n"
                "–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –î–ª—è —Ü—å–æ–≥–æ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å.\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥–∏ —à–≤–∏–¥–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /profile. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –º–µ–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—é —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!"
            )
            return

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—É —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
        if is_registered:
            chat_history = user_cache.get('chat_history') if user_cache.get('chat_history') is not None else []
        else: 
            session = await load_session(user_id)
            chat_history = session.chat_history

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        chat_history.append({"role": "user", "content": message.text})
        if len(chat_history) > MAX_CHAT_HISTORY_LENGTH:
            chat_history = chat_history[-MAX_CHAT_HISTORY_LENGTH:]

        try:
            async with gpt_client as gpt:
                # ‚ùóÔ∏è FIX: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —Å–∞–Ω—ñ—Ç–∞–π–∑–µ—Ä–∞
                reply_text = await gpt.generate_conversational_reply(
                    user_id=user_id,
                    chat_history=chat_history
                )
            
            if reply_text:
                # ‚ùóÔ∏è FIX: –î–æ–¥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à —Å–∞–º–µ –æ—á–∏—â–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                chat_history.append({"role": "assistant", "content": reply_text})
                
                # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∞
                formatted_message = format_bot_response(reply_text, content_type="default")
                
                if is_registered:
                    user_cache['chat_history'] = chat_history
                    await save_user_cache(user_id, user_cache)
                else:
                    session.chat_history = chat_history
                    await save_session(user_id, session)

                await message.reply(formatted_message)
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")


# === –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–ú–ò–õ–û–ö (–±–µ–∑ –∑–º—ñ–Ω) ===
async def error_handler(event: types.ErrorEvent, bot: Bot):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception}", exc_info=event.exception)
    chat_id, user_name = None, "–¥—Ä—É–∂–µ"
    update = event.update
    if update.message:
        chat_id = update.message.chat.id
        user_name = get_user_display_name(update.message.from_user)
    elif update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat.id
        user_name = get_user_display_name(update.callback_query.from_user)
        try: await update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except TelegramAPIError: pass
    
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî"
    if "TelegramAPIError" in str(event.exception):
        error_message_text = f"–£–ø—Å, {user_name}, –ø—Ä–æ–±–ª–µ–º–∞ –∑ Telegram API üì° –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
    
    if chat_id:
        try:
            # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∞–∫–æ–∂ –ø—Ä–æ—Ö–æ–¥—è—Ç—å —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç–µ—Ä
            formatted_error = format_bot_response(error_message_text, content_type="error")
            await bot.send_message(chat_id, formatted_error, parse_mode=ParseMode.HTML)
        except TelegramAPIError as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")

# === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ===
def register_general_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∫–æ–º–∞–Ω–¥–∏, —Ç—Ä–∏–≥–µ—Ä–∏, Vision)."""
    dp.include_router(general_router)
    logger.info("üöÄ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∫–æ–º–∞–Ω–¥–∏, —Ç—Ä–∏–≥–µ—Ä–∏, Vision) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
