import html
import logging
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH,
    BOT_NAMES, CONVERSATIONAL_COOLDOWN_SECONDS
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks
# --- –í–ò–ü–†–ê–í–õ–ï–ù–Ü –¢–ê –ù–û–í–Ü –Ü–ú–ü–û–†–¢–ò ---
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard,
    create_role_selection_keyboard,
    create_dynamic_lobby_keyboard  # <-- –û–°–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø!
)
from states.party_states import PartyCreation

# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –î–õ–Ø –ö–ï–†–£–í–ê–ù–ù–Ø –°–¢–ê–ù–û–ú ===
# ... (—ñ—Å–Ω—É—é—á—ñ —Å—Ö–æ–≤–∏—â–∞ chat_histories, chat_cooldowns) ...

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª–æ–±—ñ.
# –£–í–ê–ì–ê: –¶–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø—É. –î–ª—è production –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Redis –∞–±–æ –ë–î.
active_lobbies: Dict[str, Dict] = {}
ALL_ROLES: List[str] = ["–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"]

# === –†–û–ó–î–Ü–õ–ï–ù–ù–Ø –†–û–£–¢–ï–†–Ü–í –î–õ–Ø –ß–ò–°–¢–û–¢–ò –ê–†–•–Ü–¢–ï–ö–¢–£–†–ò ===
# –†–æ—É—Ç–µ—Ä –¥–ª—è –ª–æ–≥—ñ–∫–∏ –ø–∞—Ç—ñ, –±—É–¥–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –ü–ï–†–®–ò–ú
party_router = Router()
# –Ü—Å–Ω—É—é—á–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
general_router = Router()


# --- –õ–û–ì–Ü–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü (FSM) ---

def get_lobby_message_text(lobby_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–±—ñ, –≥–µ–Ω–µ—Ä—É—é—á–∏ –π–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    leader_name = html.escape(lobby_data['leader_name'])
    role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}
    
    players_list = []
    taken_roles = []
    for player_id, player_info in lobby_data['players'].items():
        role = player_info['role']
        name = html.escape(player_info['name'])
        emoji = role_emoji_map.get(role, "üîπ")
        players_list.append(f"‚Ä¢ {emoji} <b>{role}:</b> {name}")
        taken_roles.append(role)

    available_roles_list = [f"‚Ä¢ {role_emoji_map.get(r, 'üîπ')} {r}" for r in ALL_ROLES if r not in taken_roles]
    header = f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥!</b> üî•\n\n<b>–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä:</b> {leader_name}\n"
    players_section = "<b>–£—á–∞—Å–Ω–∏–∫–∏:</b>\n" + "\n".join(players_list)
    
    available_section = "\n\n<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n" + "\n".join(available_roles_list) if available_roles_list else "\n\n‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!</b>"

    return f"{header}\n{players_section}{available_section}"

@party_router.message(F.text & F.func(lambda msg: re.search(r'\b(–ø–∞—Ç—ñ|–ø–∞—Ç–∏|–∫–æ–º–∞–Ω–¥—É)\b', msg.text.lower()) and re.search(r'\b(–∑–±–∏—Ä–∞|–≥–æ|—à—É–∫–∞—é|+\?)\b', msg.text.lower())))
async def ask_for_party_creation(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ –ø–∞—Ç—ñ, –∑–∞–ø—É—Å–∫–∞—î FSM —Ç–∞ –∑–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    await state.set_state(PartyCreation.confirm_creation)
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ?", reply_markup=create_party_confirmation_keyboard())

@party_router.callback_query(PartyCreation.confirm_creation, F.data == "party_create_cancel")
async def cancel_party_creation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–º–æ–≤—É –≤—ñ–¥ –¥–æ–ø–æ–º–æ–≥–∏ —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–∞—Ç—ñ."""
    await state.clear()
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - –∑–≤–µ—Ä—Ç–∞–π—Å—è! üòâ")
    await callback.answer()

@party_router.callback_query(PartyCreation.confirm_creation, F.data == "party_create_confirm")
async def prompt_for_role(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—î —É —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –π–æ–≥–æ —Ä–æ–ª—å."""
    await state.set_state(PartyCreation.select_role)
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, —â–æ–± —ñ–Ω—à—ñ –∑–Ω–∞–ª–∏, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:", reply_markup=create_role_selection_keyboard(ALL_ROLES))
    await callback.answer()

@party_router.callback_query(PartyCreation.select_role, F.data.startswith("party_role_select_"))
async def create_party_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫: —Å—Ç–≤–æ—Ä—é—î –ª–æ–±—ñ, –¥–æ–¥–∞—î —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞, –ø—É–±–ª—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    user = callback.from_user
    selected_role = callback.data.split("party_role_select_")[1]
    lobby_id = str(callback.message.message_id)

    # –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
    lobby_data = {
        "leader_id": user.id,
        "leader_name": user.first_name,
        "players": {user.id: {"name": user.first_name, "role": selected_role}},
        "chat_id": callback.message.chat.id
    }
    active_lobbies[lobby_id] = lobby_data
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –ª–æ–±—ñ {lobby_id} —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º {user.first_name} (ID: {user.id}) –∑ —Ä–æ–ª–ª—é {selected_role}")

    message_text = get_lobby_message_text(lobby_data)
    keyboard = create_dynamic_lobby_keyboard(lobby_id, user.id, lobby_data)
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer(f"–í–∏ –∑–∞–π–Ω—è–ª–∏ —Ä–æ–ª—å: {selected_role}")
    await state.clear()

# --- –Ü–°–ù–£–Æ–ß–Ü –û–ë–†–û–ë–ù–ò–ö–ò (–±–µ–∑ –∑–º—ñ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –ø—ñ–¥ `general_router`) ---

@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ cmd_start –±–µ–∑ –∑–º—ñ–Ω)
    pass

@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ cmd_go –±–µ–∑ –∑–º—ñ–Ω)
    pass

@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    # ... (–∫–æ–¥ handle_trigger_messages –±–µ–∑ –∑–º—ñ–Ω)
    pass

async def error_handler(event: types.ErrorEvent, bot: Bot):
    # ... (–∫–æ–¥ error_handler –±–µ–∑ –∑–º—ñ–Ω)
    pass


def register_general_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ.
    –î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –ø–æ—Ä—è–¥–∫—É: —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∏ (–ø–∞—Ç—ñ) –ø–µ—Ä–µ–¥ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏.
    """
    dp.include_router(party_router)  # <-- –°–ø–æ—á–∞—Ç–∫—É —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–∞—Ç—ñ
    dp.include_router(general_router) # <-- –ü–æ—Ç—ñ–º –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ç—ñ (FSM) —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
