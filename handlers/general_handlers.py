"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –û–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ (/start, /go, /search).
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –≤ —á–∞—Ç—ñ.
- –ü–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ (–ø–∞—Ç—ñ) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º FSM.
- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
- –ì–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.
- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞.

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ –¥–≤–æ—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:
1. `party_router`: –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ.
2. `general_router`: –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —ñ–Ω—à—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
"""
import html
import logging
import re
import time
import base64
import io
import random
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update, CallbackQuery, PhotoSize, BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH,
    BOT_NAMES, CONVERSATIONAL_COOLDOWN_SECONDS,
    VISION_AUTO_RESPONSE_ENABLED, VISION_RESPONSE_COOLDOWN_SECONDS, 
    VISION_MAX_IMAGE_SIZE_MB, VISION_CONTENT_EMOJIS
)
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∏
from services.openai_service import MLBBChatGPT
from services.gemini_service import GeminiSearch
from utils.message_utils import send_message_in_chunks
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard,
    create_role_selection_keyboard,
    # üÜï –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    create_lobby_keyboard
)

# === –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–¢–ê–ù–Ü–í FSM ===
class PartyCreationFSM(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–∞—Ç—ñ."""
    waiting_for_confirmation = State()
    waiting_for_role_selection = State()
    # üÜï –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ
    waiting_for_join_role_selection = State()


# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –£ –ü–ê–ú'–Ø–¢–Ü ===
chat_histories: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=MAX_CHAT_HISTORY_LENGTH))
chat_cooldowns: Dict[int, float] = {}
vision_cooldowns: Dict[int, float] = {}
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ active_lobbies:
# {
#     "lobby_id_1": {
#         "leader_id": 123,
#         "leader_name": "Player1",
#         "players": {
#             123: {"name": "Player1", "role": "–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"},
#             456: {"name": "Player2", "role": "–õ—ñ—Å–Ω–∏–∫"}
#         },
#         "chat_id": -100123,
#         "message_id": 555
#     }, ...
# }
active_lobbies: Dict[str, Dict] = {}
ALL_ROLES: List[str] = ["–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"]

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–û–£–¢–ï–†–Ü–í –¢–ê –ö–õ–Ü–Ñ–ù–¢–Ü–í ===
party_router = Router()
general_router = Router()
gemini_client = GeminiSearch()

# === –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø –ö–û–ú–ê–ù–î –ë–û–¢–ê ===
async def set_bot_commands(bot: Bot):
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î/–æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –±–æ—Ç –ø–æ–∫–∞–∑—É—î –≤ –º–µ–Ω—é Telegram.
    """
    commands = [
        BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="profile", description="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å (—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è)"),
        BotCommand(command="go", description="üí¨ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è AI-–ø–æ–º—ñ—á–Ω–∏–∫—É"),
        BotCommand(command="search", description="üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å"),
        BotCommand(command="analyzeprofile", description="üì∏ –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é"),
        BotCommand(command="analyzestats", description="üìä –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
        BotCommand(command="help", description="‚ùì –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ"),
    ]
    try:
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True)

# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
def get_user_display_name(user: Optional[types.User]) -> str:
    """–í–∏—Ç—è–≥—É—î –Ω–∞–π–∫—Ä–∞—â–µ –¥–æ—Å—Ç—É–ø–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è."""
    if not user:
        return "–¥—Ä—É–∂–µ"
    if user.first_name and user.first_name.strip():
        return html.escape(user.first_name.strip())
    elif user.username and user.username.strip():
        return html.escape(user.username.strip())
    else:
        return "–¥—Ä—É–∂–µ"

def is_party_request_message(message: Message) -> bool:
    """–ë–µ–∑–ø–µ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–æ–º –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ."""
    if not message.text:
        return False
    try:
        text_lower = message.text.lower()
        has_party_keywords = re.search(r'\b(–ø–∞—Ç—ñ|–ø–∞—Ç–∏|–∫–æ–º–∞–Ω–¥—É)\b', text_lower) is not None
        has_action_keywords = re.search(r'\b(–∑–±–∏—Ä|–≥–æ|—à—É–∫–∞|–≥—Ä–∞—Ç|–∑—ñ–±—Ä–∞)\w*\b|\+', text_lower) is not None
        return has_party_keywords and has_action_keywords
    except (AttributeError, TypeError) as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ party request: {e}")
        return False

def get_lobby_message_text(lobby_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–±—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    leader_name = html.escape(lobby_data['leader_name'])
    role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}
    
    players_list = []
    taken_roles = [player_info['role'] for player_info in lobby_data['players'].values()]
    
    # –°–æ—Ä—Ç—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä–æ–ª—è–º–∏ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
    sorted_players = sorted(lobby_data['players'].items(), key=lambda item: ALL_ROLES.index(item[1]['role']))

    for player_id, player_info in sorted_players:
        role = player_info['role']
        name = html.escape(player_info['name'])
        emoji = role_emoji_map.get(role, "üîπ")
        players_list.append(f"‚Ä¢ {emoji} <b>{role}:</b> {name}")

    available_roles_list = [f"‚Ä¢ {role_emoji_map.get(r, 'üîπ')} {r}" for r in ALL_ROLES if r not in taken_roles]
    header = f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥!</b> üî•\n\n<b>–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä:</b> {leader_name}\n"
    players_section = "<b>–£—á–∞—Å–Ω–∏–∫–∏:</b>\n" + "\n".join(players_list)
    available_section = "\n\n<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n" + "\n".join(available_roles_list) if available_roles_list else "\n\n‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!</b>"
    
    return f"{header}\n{players_section}{available_section}"

# === –õ–û–ì–Ü–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü (FSM) ===
@party_router.message(F.text & F.func(is_party_request_message))
async def ask_for_party_creation(message: Message, state: FSMContext):
    user_name = get_user_display_name(message.from_user)
    logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –≤—ñ–¥ {user_name}: '{message.text}'")
    await state.set_state(PartyCreationFSM.waiting_for_confirmation)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ —Ç—Ä–µ–±–∞ –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
    await state.update_data(reply_to_message_id=message.message_id)
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ?", reply_markup=create_party_confirmation_keyboard())

@party_router.callback_query(F.data == "party_cancel_creation")
async def cancel_party_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - –∑–≤–µ—Ä—Ç–∞–π—Å—è! üòâ")
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_confirmation, F.data == "party_start_creation")
async def prompt_for_role(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PartyCreationFSM.waiting_for_role_selection)
    # –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π lobby_id, –æ—Å–∫—ñ–ª—å–∫–∏ –ª–æ–±—ñ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=create_role_selection_keyboard(ALL_ROLES, lobby_id="initial"))
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_role_selection, F.data.startswith("party_select_role:initial:"))
async def create_party_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.message: return
    user = callback.from_user
    selected_role = callback.data.split(":")[-1]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –ª–æ–±—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    lobby_id = f"lobby_{int(time.time())}_{user.id}"
    
    user_name = get_user_display_name(user)
    lobby_data = {
        "leader_id": user.id,
        "leader_name": user_name,
        "players": {user.id: {"name": user_name, "role": selected_role}},
        "chat_id": callback.message.chat.id
    }
    
    message_text = get_lobby_message_text(lobby_data)
    # üÜï –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = create_lobby_keyboard(lobby_id, lobby_data)
    
    state_data = await state.get_data()
    reply_to_message_id = state_data.get("reply_to_message_id")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å")
    await callback.message.delete()

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–æ–±—ñ, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
    sent_lobby_message = await bot.send_message(
        chat_id=callback.message.chat.id,
        text=message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
        reply_to_message_id=reply_to_message_id
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id —Å–∞–º–æ–≥–æ –ª–æ–±—ñ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
    lobby_data["message_id"] = sent_lobby_message.message_id
    active_lobbies[lobby_id] = lobby_data
    
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–±—ñ {lobby_id} —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º {user_name} –∑ —Ä–æ–ª–ª—é {selected_role}")
    await callback.answer(f"–í–∏ –∑–∞–π–Ω—è–ª–∏ —Ä–æ–ª—å: {selected_role}")
    await state.clear()


# === üÜï –ù–û–í–ê –õ–û–ì–Ü–ö–ê –í–ó–ê–Ñ–ú–û–î–Ü–á –ó –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ú –õ–û–ë–Ü ===

@party_router.callback_query(F.data.startswith("party_join:"))
async def handle_join_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è'."""
    lobby_id = callback.data.split(":")[-1]
    user = callback.from_user
    
    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —â–µ —î
        try: await callback.message.delete()
        except TelegramAPIError: pass
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id in lobby_data["players"]:
        await callback.answer("–í–∏ –≤–∂–µ —É —Ü—å–æ–º—É –ø–∞—Ç—ñ!", show_alert=True)
        return
        
    if len(lobby_data["players"]) >= 5:
        await callback.answer("–ü–∞—Ç—ñ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!", show_alert=True)
        return
        
    # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    taken_roles = [p_info["role"] for p_info in lobby_data["players"].values()]
    available_roles = [r for r in ALL_ROLES if r not in taken_roles]
    
    await state.set_state(PartyCreationFSM.waiting_for_join_role_selection)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ lobby_id –≤ —Å—Ç–∞–Ω—ñ, —â–æ–± –∑–Ω–∞—Ç–∏, –∫—É–¥–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
    await state.update_data(joining_lobby_id=lobby_id)
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–ª—ñ
    await callback.message.reply(
        "–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:",
        reply_markup=create_role_selection_keyboard(available_roles, lobby_id)
    )
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_join_role_selection, F.data.startswith("party_select_role:"))
async def handle_join_role_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ –≥—Ä–∞–≤—Ü–µ–º, —â–æ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è."""
    if not callback.message or not callback.message.reply_to_message: return
    
    lobby_id = callback.data.split(":")[1]
    selected_role = callback.data.split(":")[-1]
    user = callback.from_user
    
    state_data = await state.get_data()
    if state_data.get("joining_lobby_id") != lobby_id or lobby_id not in active_lobbies:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É –∞–±–æ –ª–æ–±—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)
        await state.clear()
        return

    lobby_data = active_lobbies[lobby_id]
    
    # –î–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—è –≤ –ª–æ–±—ñ
    lobby_data["players"][user.id] = {"name": get_user_display_name(user), "role": selected_role}
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ
    new_text = get_lobby_message_text(lobby_data)
    new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)
    
    try:
        # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ
        await bot.edit_message_text(
            text=new_text,
            chat_id=lobby_data["chat_id"],
            message_id=lobby_data["message_id"],
            reply_markup=new_keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer(f"–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø–∞—Ç—ñ –∑ —Ä–æ–ª–ª—é: {selected_role}")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ {lobby_id}: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–±—ñ.", show_alert=True)
        # –í—ñ–¥–∫–æ—á—É—î–º–æ –∑–º—ñ–Ω–∏, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        lobby_data["players"].pop(user.id, None)

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–ª—ñ
    await callback.message.delete()
    await state.clear()


@party_router.callback_query(F.data.startswith("party_leave:"))
async def handle_leave_lobby(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∏–Ω—É—Ç–∏ –ø–∞—Ç—ñ'."""
    lobby_id = callback.data.split(":")[-1]
    user = callback.from_user
    
    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id not in lobby_data["players"]:
        await callback.answer("–í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –ø–∞—Ç—ñ.", show_alert=True)
        return
        
    if user.id == lobby_data["leader_id"]:
        await callback.answer("–õ—ñ–¥–µ—Ä –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–∞—Ç—ñ. –¢—ñ–ª—å–∫–∏ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –π–æ–≥–æ.", show_alert=True)
        return
        
    # –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è
    removed_player_info = lobby_data["players"].pop(user.id)
    logger.info(f"–ì—Ä–∞–≤–µ—Ü—å {removed_player_info['name']} –ø–æ–∫–∏–Ω—É–≤ –ª–æ–±—ñ {lobby_id}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    new_text = get_lobby_message_text(lobby_data)
    new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)
    try:
        await bot.edit_message_text(
            text=new_text,
            chat_id=lobby_data["chat_id"],
            message_id=lobby_data["message_id"],
            reply_markup=new_keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –ø–∞—Ç—ñ.", show_alert=True)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ {lobby_id} –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞–∑–∞–¥, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
        lobby_data["players"][user.id] = removed_player_info

@party_router.callback_query(F.data.startswith("party_cancel_lobby:"))
async def handle_cancel_lobby(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ'."""
    lobby_id = callback.data.split(":")[-1]
    user = callback.from_user

    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id != lobby_data["leader_id"]:
        await callback.answer("–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –ø–∞—Ç—ñ –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–æ–±—ñ.", show_alert=True)
        return
        
    # –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–±—ñ –∑ –ø–∞–º'—è—Ç—ñ
    del active_lobbies[lobby_id]
    logger.info(f"–õ–æ–±—ñ {lobby_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ª—ñ–¥–µ—Ä–æ–º {get_user_display_name(user)}")
    
    try:
        await bot.edit_message_text(
            text="üö´ <b>–õ–æ–±—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º.</b>",
            chat_id=lobby_data["chat_id"],
            message_id=lobby_data["message_id"],
            reply_markup=None, # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–õ–æ–±—ñ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", show_alert=True)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –ª–æ–±—ñ {lobby_id}: {e}")

@party_router.callback_query(F.data.startswith("party_cancel_join:"))
async def cancel_join_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ."""
    await state.clear()
    await callback.message.delete()
    await callback.answer("–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–∞—Ç—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


# === –ó–ê–ì–ê–õ–¨–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î (–±–µ–∑ –∑–º—ñ–Ω) ===
@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    if not user: return
    user_name_escaped = get_user_display_name(user)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ /start.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_hour = datetime.now(kyiv_tz).hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else "‚òÄÔ∏è" if 12 <= current_hour < 17 else "üåÜ" if 17 <= current_hour < 22 else "üåô"
    
    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>GGenius</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ó–Ω–∞–π—Ç–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ!
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.
üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ!

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à–∏ —ó—ó:
‚Ä¢ <code>/search &lt;—Ç–≤—ñ–π –∑–∞–ø–∏—Ç&gt;</code>
‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code>
‚Ä¢ <code>/profile</code>
‚Ä¢ –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è! üì∏
"""
    try:
        await message.answer_photo(photo=WELCOME_IMAGE_URL, caption=welcome_caption, parse_mode=ParseMode.HTML)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç.")
        await message.answer(welcome_caption, parse_mode=ParseMode.HTML)

@general_router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    help_text = """
‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É GGenius</b>

–Ø - –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Mobile Legends. –û—Å—å —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
/profile - –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å.
/go <code>&lt;–ø–∏—Ç–∞–Ω–Ω—è&gt;</code> - –ó–∞–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≥—Ä—É (–≥–µ—Ä–æ—ó, –ø—Ä–µ–¥–º–µ—Ç–∏, —Ç–∞–∫—Ç–∏–∫–∏).
/search <code>&lt;–∑–∞–ø–∏—Ç&gt;</code> - –ó–Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ.
/analyzeprofile - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
/analyzestats - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤–∞—à–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

–¢–∞–∫–æ–∂ —è –º–æ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É, —è–∫—â–æ –≤–∏ –∑–≤–µ—Ä–Ω–µ—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ.
"""
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@general_router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    if not user: return
    user_name_escaped = get_user_display_name(user)
    user_id = user.id
    user_query = message.text.replace("/search", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: '{user_query}'")

    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üîé\n–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è <code>/search</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n<code>/search –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É –≥–µ—Ä–æ—ó–≤</code>", parse_mode=ParseMode.HTML)
        return

    thinking_msg = await message.reply(f"üõ∞Ô∏è {user_name_escaped}, —à—É–∫–∞—é –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ Google...")
    start_time = time.time()
    
    response_text = await gemini_client.get_search_response(user_query, user_name_escaped)
    
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /search –¥–ª—è '{user_query}': {processing_time:.2f}—Å")

    if not response_text:
        response_text = f"–í–∏–±–∞—á, {user_name_escaped}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | Gemini (gemini-1.5-flash)</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /search –¥–ª—è {user_name_escaped}: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
            if thinking_msg: await thinking_msg.edit_text(final_error_msg, parse_mode=None)
            else: await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {final_err}")

@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    if not user: return
    user_name_escaped = get_user_display_name(user)
    user_id = user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç /go: '{user_query}'")

    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>", parse_mode=ParseMode.HTML)
        return

    thinking_msg = await message.reply(random.choice([f"ü§î –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç...", f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...", f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."]))
    start_time = time.time()

    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}': {e}")

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}': {processing_time:.2f}—Å")

    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | GPT (gpt-4.1-turbo)</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(bot, message.chat.id, full_response_to_send, ParseMode.HTML, thinking_msg)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
            if thinking_msg: await thinking_msg.edit_text(final_error_msg, parse_mode=None)
            else: await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err:
             logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {final_err}")

# === –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (–§–û–¢–û –¢–ê –¢–ï–ö–°–¢) (–±–µ–∑ –∑–º—ñ–Ω) ===
@general_router.message(F.photo)
async def handle_image_messages(message: Message, bot: Bot):
    if not VISION_AUTO_RESPONSE_ENABLED or not message.photo or not message.from_user:
        return

    chat_id = message.chat.id
    current_time = time.time()
    current_user_name = get_user_display_name(message.from_user)
    
    bot_info = await bot.get_me()
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_caption_mention = False
    if message.caption:
        is_caption_mention = (f"@{bot_info.username.lower()}" in message.caption.lower() or any(re.search(r'\b' + name + r'\b', message.caption.lower()) for name in BOT_NAMES))

    should_respond = False
    if is_reply_to_bot or is_caption_mention:
        should_respond = True
    else:
        last_vision_time = vision_cooldowns.get(chat_id, 0)
        if (current_time - last_vision_time) > VISION_RESPONSE_COOLDOWN_SECONDS and random.random() < 0.7:
            should_respond = True
            vision_cooldowns[chat_id] = current_time

    if not should_respond:
        return

    largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
    if largest_photo.file_size and largest_photo.file_size > VISION_MAX_IMAGE_SIZE_MB * 1024 * 1024:
        await message.reply(f"–í–∏–±–∞—á, {current_user_name}, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ–ª–∏–∫–µ.")
        return

    thinking_msg = None
    try:
        if is_reply_to_bot or is_caption_mention:
            thinking_msg = await message.reply(f"üîç {current_user_name}, –∞–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")

        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info or not file_info.file_path: return

        image_bytes_io = await bot.download_file(file_info.file_path)
        if not image_bytes_io: return

        image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')
        
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            vision_response = await gpt.analyze_image_universal(image_base64, current_user_name)

        if vision_response and vision_response.strip():
            content_type = "general"
            response_lower = vision_response.lower()
            if any(word in response_lower for word in ["–º–µ–º", "—Å–º—ñ—à–Ω", "–∂–∞—Ä—Ç"]): content_type = "meme"
            elif any(word in response_lower for word in ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "–≥—Ä–∞", "–ø—Ä–æ—Ñ—ñ–ª—å"]): content_type = "screenshot"
            elif any(word in response_lower for word in ["—Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—Å"]): content_type = "text"
            
            emoji = VISION_CONTENT_EMOJIS.get(content_type, "üîç")
            final_response = f"{emoji} {vision_response}" if not any(char in vision_response[:3] for char in VISION_CONTENT_EMOJIS.values()) else vision_response

            if thinking_msg:
                await thinking_msg.edit_text(final_response, parse_mode=None)
            else:
                await message.reply(final_response, parse_mode=None)
            
            chat_histories[chat_id].extend([{"role": "user", "content": "[–ù–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è]"}, {"role": "assistant", "content": final_response}])
        elif thinking_msg:
            await thinking_msg.edit_text(f"–•–º, {current_user_name}, –Ω–µ –º–æ–∂—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏, —â–æ —Ç—É—Ç ü§î")
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}: {e}")
        if thinking_msg: await thinking_msg.delete()
        await message.reply(f"–£–ø—Å, {current_user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòÖ")

@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    if not message.text or message.text.startswith('/') or not message.from_user:
        return

    text_lower = message.text.lower()
    chat_id = message.chat.id
    current_user_name = get_user_display_name(message.from_user)
    current_time = time.time()
    bot_info = await bot.get_me()

    is_explicit_mention = f"@{bot_info.username.lower()}" in text_lower
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_name_mention = any(re.search(r'\b' + name + r'\b', text_lower) for name in BOT_NAMES)

    matched_trigger_mood = next((mood for trigger, mood in CONVERSATIONAL_TRIGGERS.items() if re.search(r'\b' + re.escape(trigger) + r'\b', text_lower)), None)
    if is_reply_to_bot and not matched_trigger_mood:
        matched_trigger_mood = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É."
    if not matched_trigger_mood: return

    should_respond = False
    if is_explicit_mention or is_reply_to_bot or is_name_mention:
        should_respond = True
    elif (current_time - chat_cooldowns.get(chat_id, 0)) > CONVERSATIONAL_COOLDOWN_SECONDS:
        should_respond = True
        chat_cooldowns[chat_id] = current_time

    if should_respond:
        chat_histories[chat_id].append({"role": "user", "content": message.text})
        try:
            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                reply_text = await gpt.generate_conversational_reply(current_user_name, list(chat_histories[chat_id]), matched_trigger_mood)
            if reply_text and "<i>" not in reply_text:
                chat_histories[chat_id].append({"role": "assistant", "content": reply_text})
                await message.reply(reply_text)
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

# === –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–ú–ò–õ–û–ö (–±–µ–∑ –∑–º—ñ–Ω) ===
async def error_handler(event: types.ErrorEvent, bot: Bot):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception}", exc_info=event.exception)
    chat_id, user_name = None, "–¥—Ä—É–∂–µ"
    update = event.update
    if update.message:
        chat_id = update.message.chat.id
        user_name = get_user_display_name(update.message.from_user)
    elif update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat.id
        user_name = get_user_display_name(update.callback_query.from_user)
        try: await update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except TelegramAPIError: pass
    
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî"
    if "TelegramAPIError" in str(event.exception):
        error_message_text = f"–£–ø—Å, {user_name}, –ø—Ä–æ–±–ª–µ–º–∞ –∑ Telegram API üì° –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
    
    if chat_id:
        try: await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except TelegramAPIError as e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")

# === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ===
def register_general_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–ø–∞—Ç—ñ —Ç–∞ –æ—Å–Ω–æ–≤–Ω—ñ)."""
    dp.include_router(party_router)
    dp.include_router(general_router)
    logger.info("üöÄ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ç—ñ, –∫–æ–º–∞–Ω–¥, —Ç—Ä–∏–≥–µ—Ä—ñ–≤ —Ç–∞ Vision —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
