"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –û–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ (/start, /go, /search).
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –≤ —á–∞—Ç—ñ.
- –ü–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ (–ø–∞—Ç—ñ) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º FSM.
- üÜï –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
- üÜï –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini 2.5 Pro –¥–ª—è –ø–æ—à—É–∫—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
- –ì–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ –¥–≤–æ—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:
1. `party_router`: –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ.
2. `general_router`: –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —ñ–Ω—à—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
"""
import html
import logging
import re
import time
import base64
import io
import random
import os
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update, CallbackQuery, PhotoSize
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Gemini
from google import genai
from google.api_core import exceptions as google_exceptions

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH,
    BOT_NAMES, CONVERSATIONAL_COOLDOWN_SECONDS,
    VISION_AUTO_RESPONSE_ENABLED, VISION_RESPONSE_COOLDOWN_SECONDS, 
    VISION_MAX_IMAGE_SIZE_MB, VISION_CONTENT_EMOJIS
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard,
    create_role_selection_keyboard,
    create_dynamic_lobby_keyboard
)

# === –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–¢–ê–ù–Ü–í FSM ===
class PartyCreationFSM(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_role_selection = State()

# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –£ –ü–ê–ú'–Ø–¢–Ü ===
chat_histories: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=MAX_CHAT_HISTORY_LENGTH))
chat_cooldowns: Dict[int, float] = {}
vision_cooldowns: Dict[int, float] = {}
active_lobbies: Dict[str, Dict] = {}
ALL_ROLES: List[str] = ["–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"]

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–û–£–¢–ï–†–Ü–í ===
party_router = Router()
general_router = Router()

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø GEMINI ===
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    logger.error("GOOGLE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    raise ValueError("GOOGLE_API_KEY is required")
genai.configure(api_key=GOOGLE_API_KEY)

# === –°–ï–†–í–Ü–° GEMINI (—ñ–º—ñ—Ç–∞—Ü—ñ—è services.gemini_service) ===
class GeminiSearch:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini 2.5 Pro."""
    def __init__(self):
        self.model = genai.GenerativeModel('models/gemini-2.5-pro')

    async def get_search_response(self, query: str, user_name: str) -> str:
        """
        –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ Gemini 2.5 Pro –¥–ª—è –ø–æ—à—É–∫—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
        
        Args:
            query: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.
            
        Returns:
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
        """
        try:
            prompt = (
                f"–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤ Mobile Legends. "
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –∑–∞–ø–∏—Ç–∞–≤: '{query}'. "
                f"–ù–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É, —á—ñ—Ç–∫—É —ñ –∞–∫—Ç—É–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, "
                f"–±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ—à—É–∫ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ, "
                f"—ñ–º—ñ—Ç—É–π –π–æ–≥–æ, –Ω–∞–¥–∞—é—á–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ –Ω–µ –¥–æ–≤—à–æ—é –∑–∞ 2000 —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            response = await self.model.generate_content_async(prompt)
            if response.text:
                return response.text.strip()
            else:
                logger.warning(f"Gemini –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
                return f"–í–∏–±–∞—á, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ —Ç–≤–æ—ó–º –∑–∞–ø–∏—Ç–æ–º."
        except google_exceptions.GoogleAPIError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Gemini API –¥–ª—è –∑–∞–ø–∏—Ç—É '{query}': {e}")
            return f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        except Exception as e:
            logger.exception(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤ Gemini –¥–ª—è –∑–∞–ø–∏—Ç—É '{query}': {e}")
            return f"–í–∏–±–∞—á, {user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Gemini
gemini_client = GeminiSearch()

# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
def get_user_display_name(user: Optional[types.User]) -> str:
    if not user:
        return "–¥—Ä—É–∂–µ"
    if user.first_name and user.first_name.strip():
        return html.escape(user.first_name.strip())
    elif user.username and user.username.strip():
        return html.escape(user.username.strip())
    else:
        return "–¥—Ä—É–∂–µ"

def is_party_request_message(message: Message) -> bool:
    if not message.text:
        return False
    try:
        text_lower = message.text.lower()
        has_party_keywords = re.search(r'\b(–ø–∞—Ç—ñ|–ø–∞—Ç–∏|–∫–æ–º–∞–Ω–¥—É)\b', text_lower) is not None
        has_action_keywords = re.search(r'\b(–∑–±–∏—Ä|–≥–æ|—à—É–∫–∞|–≥—Ä–∞—Ç|–∑—ñ–±—Ä–∞)\w*\b|\+', text_lower) is not None
        return has_party_keywords and has_action_keywords
    except (AttributeError, TypeError) as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ party request: {e}")
        return False

def get_lobby_message_text(lobby_data: dict) -> str:
    leader_name = html.escape(lobby_data['leader_name'])
    role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}
    players_list = []
    taken_roles = []
    for player_id, player_info in lobby_data['players'].items():
        role = player_info['role']
        name = html.escape(player_info['name'])
        emoji = role_emoji_map.get(role, "üîπ")
        players_list.append(f"‚Ä¢ {emoji} <b>{role}:</b> {name}")
        taken_roles.append(role)
    available_roles_list = [f"‚Ä¢ {role_emoji_map.get(r, 'üîπ')} {r}" for r in ALL_ROLES if r not in taken_roles]
    header = f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥!</b> üî•\n\n<b>–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä:</b> {leader_name}\n"
    players_section = "<b>–£—á–∞—Å–Ω–∏–∫–∏:</b>\n" + "\n".join(players_list)
    available_section = "\n\n<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n" + "\n".join(available_roles_list) if available_roles_list else "\n\n‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!</b>"
    return f"{header}\n{players_section}{available_section}"

# === –õ–û–ì–Ü–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü (FSM) –ù–ê `party_router` ===
@party_router.message(F.text & F.func(is_party_request_message))
async def ask_for_party_creation(message: Message, state: FSMContext):
    user_name = get_user_display_name(message.from_user)
    logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –≤—ñ–¥ {user_name}: '{message.text}'")
    await state.set_state(PartyCreationFSM.waiting_for_confirmation)
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ?", reply_markup=create_party_confirmation_keyboard())

@party_router.callback_query(F.data == "party_cancel_creation")
async def cancel_party_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - –∑–≤–µ—Ä—Ç–∞–π—Å—è! üòâ")
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_confirmation, F.data == "party_start_creation")
async def prompt_for_role(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PartyCreationFSM.waiting_for_role_selection)
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, —â–æ–± —ñ–Ω—à—ñ –∑–Ω–∞–ª–∏, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:", reply_markup=create_role_selection_keyboard(ALL_ROLES))
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_role_selection, F.data.startswith("party_role_select:"))
async def create_party_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user = callback.from_user
    selected_role = callback.data.split(":")[-1]
    lobby_id = str(callback.message.message_id)
    lobby_data = {
        "leader_id": user.id,
        "leader_name": get_user_display_name(user),
        "players": {
            user.id: {"name": get_user_display_name(user), "role": selected_role}
        },
        "chat_id": callback.message.chat.id
    }
    active_lobbies[lobby_id] = lobby_data
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –ª–æ–±—ñ {lobby_id} —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º {get_user_display_name(user)} (ID: {user.id}) –∑ —Ä–æ–ª–ª—é {selected_role}")
    message_text = get_lobby_message_text(lobby_data)
    keyboard = create_dynamic_lobby_keyboard(lobby_id, user.id, lobby_data)
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer(f"–í–∏ –∑–∞–π–Ω—è–ª–∏ —Ä–æ–ª—å: {selected_role}")
    await state.clear()

# === –Ü–°–ù–£–Æ–ß–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ù–ê `general_router` ===
@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    user_name_escaped = get_user_display_name(user)
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                  "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                  "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"
    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.
–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.
üî∏ üÜï –ó–Ω–∞–π—Ç–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ!
üî∏ üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ!

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥:
‚Ä¢ <code>/analyzeprofile</code> ‚Äì –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.
‚Ä¢ <code>/go <—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è></code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/go –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–Ω–∫</code>).
‚Ä¢ <code>/search <—Ç–≤—ñ–π –∑–∞–ø–∏—Ç></code> ‚Äì –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/search –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ MLBB</code>).
‚Ä¢ –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è! üì∏
"""
    try:
        await message.answer_photo(
            photo=WELCOME_IMAGE_URL,
            caption=welcome_caption,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name_escaped}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        fallback_text = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
‚Ä¢ <code>/go <—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è></code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.
‚Ä¢ <code>/search <—Ç–≤—ñ–π –∑–∞–ø–∏—Ç></code> ‚Äì –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω.
‚Ä¢ –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è! üì∏
"""
        try:
            await message.answer(fallback_text, parse_mode=ParseMode.HTML)
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except TelegramAPIError as e_text:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped}: {e_text}")

@general_router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /search.
    –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ Gemini 2.5 Pro –¥–ª—è –ø–æ—à—É–∫—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    """
    await state.clear()
    user = message.from_user
    user_name_escaped = get_user_display_name(user)
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    user_query = message.text.replace("/search", "", 1).strip() if message.text else ""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: '{user_query}'")
    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /search –≤—ñ–¥ {user_name_escaped}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üîé\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/search</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/search –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É –≥–µ—Ä–æ—ó–≤ –≤ MLBB</code>",
            parse_mode=ParseMode.HTML
        )
        return
    thinking_msg = await message.reply(f"üõ∞Ô∏è {user_name_escaped}, –∑–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ —Å—É–ø—É—Ç–Ω–∏–∫—ñ–≤ Google –∑–∞ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é...")
    start_time = time.time()
    response_text = await gemini_client.get_search_response(user_query, user_name_escaped)
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /search –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {processing_time:.2f}—Å")
    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v1.0 Gemini (gemini-2.5-pro)</i>"
    full_response_to_send = f"{response_text}{admin_info}"
    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /search –¥–ª—è {user_name_escaped} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /search –¥–ª—è {user_name_escaped}: {e}", exc_info=True)
        final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        try:
            await thinking_msg.edit_text(final_error_msg, parse_mode=None)
        except TelegramAPIError:
            await message.reply(final_error_msg)

@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    user_name_escaped = get_user_display_name(user)
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")
    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name_escaped}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>",
            parse_mode=ParseMode.HTML
        )
        return
    thinking_messages = [
        f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name_escaped}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—É –ø–æ—Ä–∞–¥—É!",
        f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, {user_name_escaped}, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name_escaped}: {e}")
    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {e}")
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {processing_time:.2f}—Å")
    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.8 GPT (gpt-4.1)</i>"
    full_response_to_send = f"{response_text}{admin_info}"
    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ, —á–∞—Å—Ç–∏–Ω–∞–º–∏).")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} –Ω–∞–≤—ñ—Ç—å —á–∞—Å—Ç–∏–Ω–∞–º–∏: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
            if thinking_msg:
                try:
                    await thinking_msg.edit_text(final_error_msg, parse_mode=None)
                except TelegramAPIError:
                    await message.reply(final_error_msg, parse_mode=None)
            else:
                await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err_send:
            logger.error(f"–ó–æ–≤—Å—ñ–º –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name_escaped}: {final_err_send}")

@general_router.message(F.photo)
async def handle_image_messages(message: Message, bot: Bot):
    if not message.photo or not message.from_user:
        return
    if not VISION_AUTO_RESPONSE_ENABLED:
        logger.debug("Vision –º–æ–¥—É–ª—å –≤–∏–º–∫–Ω–µ–Ω–∏–π —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.")
        return
    chat_id = message.chat.id
    current_time = time.time()
    current_user_name = get_user_display_name(message.from_user)
    try:
        bot_info = await bot.get_me()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞: {e}")
        return
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_caption_mention = False
    if message.caption:
        caption_lower = message.caption.lower()
        is_caption_mention = (
            f"@{bot_info.username.lower()}" in caption_lower or
            any(re.search(r'\b' + name + r'\b', caption_lower) for name in BOT_NAMES)
        )
    should_respond = False
    if is_reply_to_bot or is_caption_mention:
        should_respond = True
        logger.info(f"–†—ñ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name}.")
    else:
        last_vision_time = vision_cooldowns.get(chat_id, 0)
        if (current_time - last_vision_time) > VISION_RESPONSE_COOLDOWN_SECONDS:
            if random.random() < 0.7:
                should_respond = True
                vision_cooldowns[chat_id] = current_time
                logger.info(f"–†—ñ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: –ø–∞—Å–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name}.")
            else:
                logger.info(f"–†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç–æ—Ä –≤ —á–∞—Ç—ñ {chat_id}.")
        else:
            logger.info(f"–†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: –∞–∫—Ç–∏–≤–Ω–∏–π –∫—É–ª–¥–∞—É–Ω –≤ —á–∞—Ç—ñ {chat_id}.")
    if not should_respond:
        return
    largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
    if largest_photo.file_size and largest_photo.file_size > VISION_MAX_IMAGE_SIZE_MB * 1024 * 1024:
        logger.warning(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ: {largest_photo.file_size / (1024*1024):.1f}MB")
        await message.reply(f"–í–∏–±–∞—á, {current_user_name}, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ üìè")
        return
    try:
        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info.file_path:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}")
            return
        image_bytes = await bot.download_file(file_info.file_path)
        if not isinstance(image_bytes, io.BytesIO):
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}")
            return
        image_bytes.seek(0)
        image_base64 = base64.b64encode(image_bytes.read()).decode('utf-8')
        logger.info(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ. –†–æ–∑–º—ñ—Ä: {len(image_base64)} —Å–∏–º–≤–æ–ª—ñ–≤ base64.")
        thinking_msg: Optional[Message] = None
        if is_reply_to_bot or is_caption_mention:
            try:
                thinking_msg = await message.reply(f"üîç {current_user_name}, –∞–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
            except TelegramAPIError as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ thinking_msg –¥–ª—è {current_user_name}: {e}")
        start_time = time.time()
        try:
            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                vision_response = await gpt.analyze_image_universal(
                    image_base64=image_base64,
                    user_name=current_user_name
                )
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Universal Vision –¥–ª—è {current_user_name}: {e}")
            vision_response = None
        processing_time = time.time() - start_time
        logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è {current_user_name}: {processing_time:.2f}—Å")
        if vision_response and vision_response.strip():
            content_type = "general"
            response_lower = vision_response.lower()
            if any(word in response_lower for word in ["–º–µ–º", "—Å–º—ñ—à–Ω", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª", "–∫–µ–∫", "–ª–æ–ª"]):
                content_type = "meme"
            elif any(word in response_lower for word in ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "–≥—Ä–∞", "–º–∞—Ç—á", "–∫–∞—Ç–∫–∞", "–ø—Ä–æ—Ñ—ñ–ª—å", "—Å—Ç–∞—Ç–∏"]):
                content_type = "screenshot"
            elif any(word in response_lower for word in ["—Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—Å"]):
                content_type = "text"
            emoji = VISION_CONTENT_EMOJIS.get(content_type, "üîç")
            if not any(char in vision_response[:3] for char in "üéÆüì∏üòÇüìùüë§üìäü¶∏‚öîÔ∏èüìãüèÜüîç"):
                final_response = f"{emoji} {vision_response}"
            else:
                final_response = vision_response
            try:
                if thinking_msg:
                    await thinking_msg.edit_text(final_response, parse_mode=None)
                else:
                    await message.reply(final_response, parse_mode=None)
                logger.info(f"Vision –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {current_user_name} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
                chat_histories[chat_id].append({"role": "user", "content": f"[–ù–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è]"})
                chat_histories[chat_id].append({"role": "assistant", "content": final_response})
            except TelegramAPIError as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ Vision –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {current_user_name}: {e}")
        else:
            logger.warning(f"Vision –Ω–µ –∑–º—ñ–≥ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}")
            if thinking_msg:
                try:
                    await thinking_msg.edit_text(f"–•–º, {current_user_name}, —â–æ—Å—å –Ω–µ –º–æ–∂—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —â–æ —Ç—É—Ç ü§î")
                except TelegramAPIError:
                    pass
    except Exception as e:
        logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {current_user_name}: {e}")
        try:
            await message.reply(f"–£–ø—Å, {current_user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòÖ")
        except TelegramAPIError:
            pass

@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    if not message.text or message.text.startswith('/') or not message.from_user:
        return
    text_lower = message.text.lower()
    chat_id = message.chat.id
    current_user_name = get_user_display_name(message.from_user)
    current_time = time.time()
    try:
        bot_info = await bot.get_me()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ –≤ handle_trigger_messages: {e}")
        return
    is_explicit_mention = f"@{bot_info.username.lower()}" in text_lower
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_name_mention = any(re.search(r'\b' + name + r'\b', text_lower) for name in BOT_NAMES)
    matched_trigger_mood = None
    for trigger, mood in CONVERSATIONAL_TRIGGERS.items():
        if re.search(r'\b' + re.escape(trigger) + r'\b', text_lower):
            matched_trigger_mood = mood
            break
    if is_reply_to_bot and not matched_trigger_mood:
        matched_trigger_mood = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É."
    if not matched_trigger_mood:
        return
    should_respond = False
    if is_explicit_mention or is_reply_to_bot or is_name_mention:
        should_respond = True
        logger.info(f"–ü—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name}.")
    else:
        last_response_time = chat_cooldowns.get(chat_id, 0)
        if (current_time - last_response_time) > CONVERSATIONAL_COOLDOWN_SECONDS:
            should_respond = True
            chat_cooldowns[chat_id] = current_time
            logger.info(f"–ü—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: –ø–∞—Å–∏–≤–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name} (–∫—É–ª–¥–∞—É–Ω –ø—Ä–æ–π—à–æ–≤).")
        else:
            logger.info(f"–†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏: –ø–∞—Å–∏–≤–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name} (–∞–∫—Ç–∏–≤–Ω–∏–π –∫—É–ª–¥–∞—É–Ω).")
    if should_respond:
        chat_histories[chat_id].append({"role": "user", "content": message.text})
        try:
            history_for_api = list(chat_histories[chat_id])
            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                reply_text = await gpt.generate_conversational_reply(
                    user_name=current_user_name,
                    chat_history=history_for_api,
                    trigger_mood=matched_trigger_mood
                )
            if reply_text and "<i>" not in reply_text:
                chat_histories[chat_id].append({"role": "assistant", "content": reply_text})
                await message.reply(reply_text)
                logger.info(f"–ê–¥–∞–ø—Ç–∏–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id} –¥–ª—è {current_user_name}.")
            else:
                logger.error(f"–°–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —á–∞—Ç—É {chat_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_name}.")
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —á–∞—Ç—ñ {chat_id} –¥–ª—è {current_user_name}: {e}")

async def error_handler(event: types.ErrorEvent, bot: Bot):
    logger.error(
        f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception} –¥–ª—è update: {event.update.model_dump_json(exclude_none=True, indent=2)}",
        exc_info=event.exception
    )
    chat_id: Optional[int] = None
    user_name: str = "–¥—Ä—É–∂–µ"
    update = event.update
    if update.message and update.message.chat:
        chat_id = update.message.chat.id
        user_name = get_user_display_name(update.message.from_user)
    elif update.callback_query and update.callback_query.message and update.callback_query.message.chat:
        chat_id = update.callback_query.message.chat.id
        user_name = get_user_display_name(update.callback_query.from_user)
        try:
            await update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except TelegramAPIError:
            pass
    if "AttributeError" in str(event.exception) and "NoneType" in str(event.exception):
        error_message_text = f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üîß\n–í–∂–µ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ!"
    elif "TelegramAPIError" in str(event.exception):
        error_message_text = f"–£–ø—Å, {user_name}, –ø—Ä–æ–±–ª–µ–º–∞ –∑ Telegram API üì°\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω–∫—É."
    else:
        error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω–∫—É."
    if chat_id:
        try:
            await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except TelegramAPIError as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

def register_general_handlers(dp: Dispatcher):
    dp.include_router(party_router)
    dp.include_router(general_router)
    logger.info("üöÄ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ç—ñ (FSM), —Ç—Ä–∏–≥–µ—Ä—ñ–≤, —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Vision –º–æ–¥—É–ª—è —Ç–∞ Gemini –ø–æ—à—É–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
