import html
import logging
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List, Any
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, Update, CallbackQuery, User
from aiogram.exceptions import TelegramAPIError

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger, BOT_NAMES,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH, CONVERSATIONAL_COOLDOWN_SECONDS,
    PARTY_TRIGGER_PHRASES, PARTY_LOBBY_ROLES, PARTY_LOBBY_COOLDOWN_SECONDS
)
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard, create_role_selection_keyboard,
    create_party_lobby_keyboard
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –¢–ê FSM ===
chat_histories: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=MAX_CHAT_HISTORY_LENGTH))
chat_cooldowns: Dict[str, float] = {}
active_lobbies: Dict[int, Dict[str, Any]] = {}

class PartyCreation(StatesGroup):
    waiting_for_initiator_role = State()
    waiting_for_joiner_role = State()

general_router = Router()

# === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –í –ü–†–ê–í–ò–õ–¨–ù–û–ú–£ –ü–û–†–Ø–î–ö–£ ===

# 1. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else "‚òÄÔ∏è" if 12 <= current_hour < 17 else "üåÜ" if 17 <= current_hour < 22 else "üåô"
    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}\n\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ\n–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.\n\n–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!\n\n<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>\nüî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.\nüî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.\n\nüëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥:\n‚Ä¢ <code>/analyzeprofile</code> ‚Äì –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/go –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–Ω–∫</code>)."""
    try:
        await message.answer_photo(photo=WELCOME_IMAGE_URL, caption=welcome_caption, parse_mode=ParseMode.HTML)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è {user_name_escaped}: {e}. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É.")
        await message.answer(welcome_caption, parse_mode=ParseMode.HTML)


@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>.")
        return
    thinking_msg = await message.reply(f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...")
    start_time = time.time()
    try:
        async with MLBBChatGPT() as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}': {e}")
        response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞."
    processing_time = time.time() - start_time
    admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å</i>" if user_id == ADMIN_USER_ID else ""
    await send_message_in_chunks(bot, message.chat.id, f"{response_text}{admin_info}", parse_mode=ParseMode.HTML, initial_message_to_edit=thinking_msg)


# 2. –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ª–æ–≤–∏—Ç—å –≤—Å–µ, —â–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é)
@general_router.message(F.text)
async def handle_text_messages(message: Message, bot: Bot, state: FSMContext):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    text_lower = message.text.lower()
    if any(phrase in text_lower for phrase in PARTY_TRIGGER_PHRASES):
        await handle_party_request(message, bot, state)
    else:
        await handle_conversational_triggers(message, bot)


# === –ë–õ–û–ö –õ–û–ì–Ü–ö–ò "–ü–ê–¢–Ü-–ú–ï–ù–ï–î–ñ–ï–†–ê 2.0" (–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó) ===
async def handle_party_request(message: Message, bot: Bot, state: FSMContext):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    chat_id = message.chat.id
    cooldown_key = f"party_{chat_id}"
    if chat_id in active_lobbies:
        await message.reply("‚òùÔ∏è –í —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ –π–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ç—ñ. –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å!")
        return
    if (time.time() - chat_cooldowns.get(cooldown_key, 0)) < PARTY_LOBBY_COOLDOWN_SECONDS:
        await message.reply("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –ª–æ–±—ñ.")
        return
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ?",
                        reply_markup=create_party_confirmation_keyboard())


@general_router.callback_query(F.data == "party_create_no")
async def on_party_creation_no(callback_query: CallbackQuery):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    await callback_query.message.edit_text("–ì–∞—Ä–∞–∑–¥, –∑–≤–µ—Ä—Ç–∞–π—Å—è, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à! üòâ")
    await callback_query.answer()


@general_router.callback_query(F.data == "party_create_yes")
async def on_party_creation_yes(callback_query: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    await callback_query.message.edit_text(
        "–°—É–ø–µ—Ä! –û–±–µ—Ä—ñ —Å–≤–æ—é —Ä–æ–ª—å, —â–æ–± —è –º—ñ–≥ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ:",
        reply_markup=create_role_selection_keyboard(PARTY_LOBBY_ROLES)
    )
    await state.set_state(PartyCreation.waiting_for_initiator_role)
    await callback_query.answer()


@general_router.callback_query(PartyCreation.waiting_for_initiator_role, F.data.startswith("party_role_select_"))
async def on_initiator_role_select(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    await state.clear()
    user = callback_query.from_user
    chat_id = callback_query.message.chat.id
    selected_role = callback_query.data.split("party_role_select_")[1]
    
    logger.info(f"–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä {user.full_name} –æ–±—Ä–∞–≤ —Ä–æ–ª—å '{selected_role}' –≤ —á–∞—Ç—ñ {chat_id}.")

    roles_left = PARTY_LOBBY_ROLES.copy()
    roles_left.remove(selected_role)
    
    players_data = {user.id: {"user": user, "role": selected_role}}
    
    players_text = f"‚úÖ <b>{html.escape(user.full_name)}</b> ‚Äî <i>{selected_role}</i>"
    roles_text = "\n".join([f"‚Ä¢ {role}" for role in roles_left])

    lobby_message_text = (f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ!</b>\n\n"
                          f"<b>–ì—Ä–∞–≤—Ü—ñ –≤ –ø–∞—Ç—ñ (1/5):</b>\n{players_text}\n\n"
                          f"<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n{roles_text}")
    
    await callback_query.message.edit_text("‚úÖ –õ–æ–±—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    lobby_message = await bot.send_message(chat_id, lobby_message_text,
                                           reply_markup=create_party_lobby_keyboard(), parse_mode=ParseMode.HTML)

    active_lobbies[chat_id] = {"message_id": lobby_message.message_id, "players": players_data, "roles_left": roles_left}
    chat_cooldowns[f"party_{chat_id}"] = time.time()
    await callback_query.answer()


@general_router.callback_query(F.data == "join_party")
async def on_join_party(callback_query: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    user = callback_query.from_user
    chat_id = callback_query.message.chat.id
    lobby = active_lobbies.get(chat_id)

    if not lobby:
        await callback_query.answer("–ù–∞ –∂–∞–ª—å, —Ü–µ –ª–æ–±—ñ –≤–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ.", show_alert=True); return
    if user.id in lobby["players"]:
        await callback_query.answer("–í–∏ –≤–∂–µ —É —Ü—å–æ–º—É –ø–∞—Ç—ñ!", show_alert=True); return
    if not lobby["roles_left"]:
        await callback_query.answer("–í—Å—ñ –º—ñ—Å—Ü—è –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ!", show_alert=True); return

    role_request_msg = await callback_query.message.reply(
        f"<a href='tg://user?id={user.id}'>{html.escape(user.first_name)}</a>, –æ–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=create_role_selection_keyboard(lobby['roles_left']), parse_mode=ParseMode.HTML)
    
    await state.set_state(PartyCreation.waiting_for_joiner_role)
    await state.update_data(role_request_message_id=role_request_msg.message_id)
    await callback_query.answer()


@general_router.callback_query(PartyCreation.waiting_for_joiner_role, F.data.startswith("party_role_select_"))
async def on_joiner_role_select(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    user = callback_query.from_user
    chat_id = callback_query.message.chat.id
    selected_role = callback_query.data.split("party_role_select_")[1]
    
    data = await state.get_data()
    await state.clear()

    if role_request_message_id := data.get("role_request_message_id"):
        try: await bot.delete_message(chat_id, role_request_message_id)
        except TelegramAPIError: logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –∑–∞–ø–∏—Ç–æ–º —Ä–æ–ª—ñ.")

    lobby = active_lobbies.get(chat_id)
    if not lobby or user.id in lobby["players"] or selected_role not in lobby["roles_left"]:
        await callback_query.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∞–±–æ —Ü—è —Ä–æ–ª—å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True); return

    logger.info(f"–ì—Ä–∞–≤–µ—Ü—å {user.full_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –ø–∞—Ç—ñ –≤ —á–∞—Ç—ñ {chat_id} –∑ —Ä–æ–ª–ª—é '{selected_role}'.")
    lobby["players"][user.id] = {"user": user, "role": selected_role}
    lobby["roles_left"].remove(selected_role)
    
    players_text = "\n".join([f"‚úÖ <b>{html.escape(p['user'].full_name)}</b> ‚Äî <i>{p['role']}</i>" for p in lobby["players"].values()])
    roles_text = "\n".join([f"‚Ä¢ {role}" for role in lobby["roles_left"]]) if lobby["roles_left"] else "<i>–í—Å—ñ —Ä–æ–ª—ñ –∑–∞–π–Ω—è—Ç—ñ!</i>"
    
    updated_text = (f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ!</b>\n\n"
                    f"<b>–ì—Ä–∞–≤—Ü—ñ –≤ –ø–∞—Ç—ñ ({len(lobby['players'])}/5):</b>\n{players_text}\n\n"
                    f"<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n{roles_text}")

    if not lobby["roles_left"]:
        logger.info(f"–ü–∞—Ç—ñ –≤ —á–∞—Ç—ñ {chat_id} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—ñ–±—Ä–∞–Ω–æ!")
        await bot.edit_message_text(f"{updated_text}\n\n<b>‚úÖ –ü–∞—Ç—ñ –∑—ñ–±—Ä–∞–Ω–æ! –ì–æ—Ç—É–π—Ç–µ—Å—å –¥–æ –±–æ—é!</b>",
                                    chat_id, lobby["message_id"], reply_markup=None, parse_mode=ParseMode.HTML)
        
        final_call_text = (f"‚öîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞! –í—Å—ñ –≤ –ª–æ–±—ñ!</b>\n\n" +
                           " ".join([f"<a href='tg://user?id={p['user'].id}'>{html.escape(p['user'].first_name)}</a>" for p in lobby['players'].values()]) +
                           f"\n\nGL HF! üöÄ")
        await bot.send_message(chat_id, final_call_text, parse_mode=ParseMode.HTML)
        del active_lobbies[chat_id]
    else:
        await bot.edit_message_text(updated_text, chat_id, lobby["message_id"],
                                    reply_markup=create_party_lobby_keyboard(), parse_mode=ParseMode.HTML)
    await callback_query.answer()


async def handle_conversational_triggers(message: Message, bot: Bot):
    # ... (–∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
    text_lower = message.text.lower()
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    current_time = time.time()
    bot_info = await bot.get_me()
    is_explicit_mention = f"@{bot_info.username.lower()}" in text_lower
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_name_mention = any(re.search(r'\b' + name + r'\b', text_lower) for name in BOT_NAMES)
    matched_trigger_mood = None
    for trigger, mood in CONVERSATIONAL_TRIGGERS.items():
        if re.search(r'\b' + re.escape(trigger) + r'\b', text_lower):
            matched_trigger_mood = mood
            break
    if is_reply_to_bot and not matched_trigger_mood: matched_trigger_mood = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É."
    if not matched_trigger_mood: return
    should_respond = False
    cooldown_key = f"conv_{chat_id}"
    if is_explicit_mention or is_reply_to_bot or is_name_mention:
        should_respond = True
    else:
        if (current_time - chat_cooldowns.get(cooldown_key, 0)) > CONVERSATIONAL_COOLDOWN_SECONDS:
            should_respond = True
            chat_cooldowns[cooldown_key] = current_time
    if should_respond:
        chat_histories[chat_id].append({"role": "user", "content": message.text})
        try:
            async with MLBBChatGPT() as gpt:
                reply_text = await gpt.generate_conversational_reply(user_name, list(chat_histories[chat_id]), matched_trigger_mood)
            if reply_text and "<i>" not in reply_text:
                chat_histories[chat_id].append({"role": "assistant", "content": reply_text})
                await message.reply(reply_text)
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —á–∞—Ç—ñ {chat_id}: {e}")


def register_general_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ."""
    dp.include_router(general_router)
    logger.info("‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∫–æ–º–∞–Ω–¥–∏, –ø–∞—Ç—ñ-–º–µ–Ω–µ–¥–∂–µ—Ä 2.0 —Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
