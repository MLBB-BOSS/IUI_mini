"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.

–¶–µ–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª—ñ–∑—É—î –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É "–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤", —è–∫–∞ –ø–æ—î–¥–Ω—É—î
–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ) –∑ —Ö–∞—Ä–∏–∑–º–æ—é —Ç–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—é
—ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ AI-—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.
"""
import html
import time
from collections import defaultdict
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

import database
from config import (
    logger, PARTY_TRIGGER_PHRASES, PARTY_LOBBY_ROLES, OPENAI_API_KEY, WELCOME_IMAGE_URL,
    ADMIN_USER_ID, MAX_CHAT_HISTORY_LENGTH, BOT_NAMES,
    CONVERSATIONAL_COOLDOWN_SECONDS
)
# === –í–ò–†–Ü–®–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú–ò: ImportError ===
# –ú–∏ –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π —ñ–º–ø–æ—Ä—Ç 'create_party_lobby_keyboard' –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É,
# –∞–∫—Ç—É–∞–ª—å–Ω—É –Ω–∞–∑–≤—É 'create_dynamic_lobby_keyboard', —è–∫ —Ç–æ–≥–æ –≤–∏–º–∞–≥–∞—î
# –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Ñ–∞–π–ª—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞–º–∏.
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard,
    create_dynamic_lobby_keyboard,  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
    create_party_size_keyboard,
    create_role_selection_keyboard,
    create_lobby_lifetime_keyboard
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

general_router = Router()

# FSM —Å—Ç–∞–Ω–∏ –¥–ª—è –æ–±–æ—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
class ConversationalFSM(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    chatting = State()

class PartyFSM(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ."""
    waiting_for_size = State()
    waiting_for_lifetime = State()
    waiting_for_initiator_role = State()
    waiting_for_joiner_role = State()

conversational_cooldown_cache: Dict[int, float] = defaultdict(float)

# === –§–Ü–õ–¨–¢–†–ò –¢–ê –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

async def is_bot_mentioned_or_private(message: types.Message, bot_info: types.User) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –¥–æ –±–æ—Ç–∞ (–≤ –ø—Ä–∏–≤–∞—Ç—ñ, —á–µ—Ä–µ–∑ reply –∞–±–æ –∑–≥–∞–¥–∫—É)."""
    if message.chat.type == 'private': return True
    if message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id: return True
    if message.text:
        bot_username = f"@{bot_info.username}"
        return bot_username.lower() in message.text.lower() or any(
            name.lower() in message.text.lower() for name in BOT_NAMES
        )
    return False

def contains_party_phrase(text: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è –ø–æ—à—É–∫—É –ø–∞—Ç—ñ."""
    if not text: return False
    return any(phrase.lower() in text.lower() for phrase in PARTY_TRIGGER_PHRASES)

async def format_lobby_message(lobby_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ."""
    players = lobby_data.get("players", {})
    party_size = lobby_data.get("party_size", 5)
    player_lines = [f"‚úÖ <b>{html.escape(p['full_name'])}</b> ‚Äî <i>{p['role']}</i>" for p in players.values()]
    players_text = "\n".join(player_lines) if player_lines else "<i>–ü–æ–∫–∏ —â–æ –Ω—ñ–∫–æ–≥–æ...</i>"
    roles_text = "\n".join([f"‚Ä¢ {role}" for role in lobby_data["roles_left"]]) if lobby_data["roles_left"] else "<i>–í—Å—ñ —Ä–æ–ª—ñ –∑–∞–π–Ω—è—Ç—ñ!</i>"
    expires_dt = datetime.fromtimestamp(lobby_data['expires_at'], tz=timezone(timedelta(hours=3)))
    expires_str = expires_dt.strftime('%H:%M, %d.%m')
    return (f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ! (–¥–æ {expires_str})</b>\n\n"
            f"<b>–ì—Ä–∞–≤—Ü—ñ –≤ –ø–∞—Ç—ñ ({len(players)}/{party_size}):</b>\n{players_text}\n\n"
            f"<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n{roles_text}")

async def update_lobby_message(bot: Bot, chat_id: int, user_id: int | None = None) -> None:
    """–û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏."""
    lobby_data = database.get_lobby(chat_id)
    if not lobby_data: return
    try:
        new_text = await format_lobby_message(lobby_data)
        keyboard_user_id = user_id if user_id is not None else 0
        # === –í–ò–†–Ü–®–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú–ò: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó ===
        # –¢—É—Ç –º–∏ —Ç–∞–∫–æ–∂ –∑–∞–º—ñ–Ω—é—î–º–æ –≤–∏–∫–ª–∏–∫ —Å—Ç–∞—Ä–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ –Ω–æ–≤—É 'create_dynamic_lobby_keyboard'.
        await bot.edit_message_text(
            text=new_text, chat_id=chat_id, message_id=lobby_data["message_id"],
            reply_markup=create_dynamic_lobby_keyboard(keyboard_user_id, lobby_data),
            parse_mode=ParseMode.HTML
        )
    except TelegramAPIError as e:
        if "message to edit not found" in str(e) or "message is not modified" in str(e):
            logger.warning(f"[Party] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –≤ —á–∞—Ç—ñ {chat_id}.")
        else:
            logger.error(f"[Party] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ: {e}")

# === –ê–†–•–Ü–¢–ï–ö–¢–£–†–ê –ü–†–Ü–û–†–ò–¢–ï–¢–ù–ò–• –û–ë–†–û–ë–ù–ò–ö–Ü–í ===

# –ü–†–Ü–û–†–ò–¢–ï–¢ ‚Ññ1: –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü
@general_router.message(
    F.text,
    lambda message: contains_party_phrase(message.text)
)
async def on_party_trigger(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑ –Ω–∞–π–≤–∏—â–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º. –†–µ–∞–≥—É—î –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ."""
    logger.info(f"[Party] –°–ø—Ä–∞—Ü—é–≤–∞–≤ —Ç—Ä–∏–≥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –¥–ª—è {message.from_user.id}.")
    if database.get_lobby(message.chat.id):
        await message.reply("‚òùÔ∏è –í —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ –π–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ç—ñ. –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å!")
        return
    await message.reply(
        "–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ?",
        reply_markup=create_party_confirmation_keyboard()
    )
    await state.clear()

# –ü–†–Ü–û–†–ò–¢–ï–¢ ‚Ññ2: –ü–†–Ø–ú–Ü –ö–û–ú–ê–ù–î–ò
@general_router.message(Command("go"))
async def cmd_go(message: types.Message, bot: Bot) -> None:
    """–û–±—Ä–æ–±–ª—è—î —è–≤–Ω—É –∫–æ–º–∞–Ω–¥—É /go –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è."""
    user_name = html.escape(message.from_user.first_name)
    query = message.text.replace("/go", "", 1).strip()
    if not query:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go.")
        return
    thinking_msg = await message.reply("‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response = await gpt.get_response(user_name, query)
        await send_message_in_chunks(
            bot, chat_id=message.chat.id, text=response,
            parse_mode=ParseMode.HTML, initial_message_to_edit=thinking_msg
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É cmd_go: {e}", exc_info=True)
        await thinking_msg.edit_text("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. üòî")

# –ü–†–Ü–û–†–ò–¢–ï–¢ ‚Ññ3: –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–ï –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
@general_router.message(
    is_bot_mentioned_or_private,
    F.text,
    lambda message: not contains_party_phrase(message.text)
)
async def on_bot_interaction(message: types.Message, state: FSMContext, bot: Bot) -> None:
    """"–ú–æ–∑–æ–∫" –±–æ—Ç–∞ –¥–ª—è –≤—ñ–ª—å–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è."""
    user_id = message.from_user.id
    current_time = time.time()
    if current_time - conversational_cooldown_cache[user_id] < CONVERSATIONAL_COOLDOWN_SECONDS:
        logger.info(f"[General] –ö—É–ª–¥–∞—É–Ω –¥–ª—è {user_id}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
        return
    await state.set_state(ConversationalFSM.chatting)
    user_data = await state.get_data()
    history = user_data.get('history', [])
    history.append({"role": "user", "content": message.text})
    if len(history) > MAX_CHAT_HISTORY_LENGTH:
        history = history[-MAX_CHAT_HISTORY_LENGTH:]
    thinking_msg = await message.reply("ü§î...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response_with_history(
                history=history, user_name=message.from_user.full_name
            )
        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)
        await send_message_in_chunks(
            bot, chat_id=message.chat.id, text=response_text,
            parse_mode=ParseMode.HTML, initial_message_to_edit=thinking_msg
        )
        conversational_cooldown_cache[user_id] = current_time
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ on_bot_interaction: {e}", exc_info=True)
        await thinking_msg.edit_text("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

@general_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start, –≤—ñ—Ç–∞—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await state.clear()
    user_name = html.escape(message.from_user.first_name)
    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! –Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è MLBB.\n\n"
        "<b>–©–æ —è –º–æ–∂—É:</b>\n"
        "‚Ä¢ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑–Ω–∞–π—Ç–∏ –ø–∞—Ç—ñ (–Ω–∞–ø–∏—à–∏ '–≥–æ –ø–∞—Ç—ñ').\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≥—Ä—É (/go –∞–±–æ –∑–≥–∞–¥–∞–π –º–µ–Ω–µ).\n"
        "‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–æ—á–Ω–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!"
    )
    try:
        await message.answer_photo(WELCOME_IMAGE_URL, caption=welcome_text)
    except TelegramAPIError:
        await message.answer(welcome_text)

async def error_handler(event: types.ErrorEvent, bot: Bot) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫. –õ–æ–≥—É—î –≤–∏–Ω—è—Ç–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception}", exc_info=True)
    chat_id = None
    if event.update.callback_query:
        chat_id = event.update.callback_query.message.chat.id
        try: await event.update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=True)
        except TelegramAPIError: pass
    elif event.update.message:
        chat_id = event.update.message.chat.id
    if chat_id:
        await bot.send_message(chat_id, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")

def register_general_handlers(dp: Dispatcher) -> None:
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ."""
    dp.include_router(general_router)
    logger.info("‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (v5.2 - ImportError Hotfix) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")

# !!! –°–Æ–î–ò –ü–û–¢–†–Ü–ë–ù–û –î–û–î–ê–¢–ò –†–ï–®–¢–£ –û–ë–†–û–ë–ù–ò–ö–Ü–í –î–õ–Ø FSM –ü–ê–¢–Ü-–ú–ï–ù–ï–î–ñ–ï–†–ê !!!
# (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @general_router.callback_query(F.data == "party_create_yes"))
