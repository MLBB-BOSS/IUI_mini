import html
import time
from datetime import datetime, timedelta

from aiogram import Bot, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

import database
from config import (
    logger, PARTY_TRIGGER_PHRASES, PARTY_LOBBY_ROLES, OPENAI_API_KEY, ADMIN_USER_ID,
    WELCOME_IMAGE_URL, CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH, BOT_NAMES,
    CONVERSATIONAL_COOLDOWN_SECONDS
)
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard, create_party_size_keyboard,
    create_lobby_lifetime_keyboard, create_role_selection_keyboard,
    create_dynamic_lobby_keyboard
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

general_router = Router()

# === FSM –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ ===
class PartyFSM(StatesGroup):
    waiting_for_size = State()
    waiting_for_lifetime = State()
    waiting_for_initiator_role = State()
    waiting_for_joiner_role = State()


# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
async def format_lobby_message(lobby_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ."""
    players = lobby_data.get("players", {})
    party_size = lobby_data.get("party_size", 5)
    
    player_lines = []
    for p_id, p_info in players.items():
        player_lines.append(f"‚úÖ <b>{html.escape(p_info['full_name'])}</b> ‚Äî <i>{p_info['role']}</i>")
    
    players_text = "\n".join(player_lines) if player_lines else "<i>–ü–æ–∫–∏ —â–æ –Ω—ñ–∫–æ–≥–æ...</i>"
    roles_text = "\n".join([f"‚Ä¢ {role}" for role in lobby_data["roles_left"]]) if lobby_data["roles_left"] else "<i>–í—Å—ñ —Ä–æ–ª—ñ –∑–∞–π–Ω—è—Ç—ñ!</i>"
    
    expires_dt = datetime.fromtimestamp(lobby_data['expires_at']) + timedelta(hours=3) # Kyiv time
    expires_str = expires_dt.strftime('%H:%M, %d.%m')

    return (f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ! (–¥–æ {expires_str})</b>\n\n"
            f"<b>–ì—Ä–∞–≤—Ü—ñ –≤ –ø–∞—Ç—ñ ({len(players)}/{party_size}):</b>\n{players_text}\n\n"
            f"<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n{roles_text}")

async def update_lobby_message(bot: Bot, chat_id: int):
    """–û—Ç—Ä–∏–º—É—î –ª–æ–±—ñ –∑ –ë–î —Ç–∞ –æ–Ω–æ–≤–ª—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ."""
    lobby_data = database.get_lobby(chat_id)
    if not lobby_data: return
    
    try:
        new_text = await format_lobby_message(lobby_data)
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ, —Ö—Ç–æ —ó—ó –±–∞—á–∏—Ç—å
        await bot.edit_message_text(
            text=new_text,
            chat_id=chat_id,
            message_id=lobby_data["message_id"],
            reply_markup=create_dynamic_lobby_keyboard(bot.id, lobby_data), # –£–º–æ–≤–Ω–æ –¥–ª—è –≤—Å—ñ—Ö
            parse_mode=ParseMode.HTML
        )
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ –≤ —á–∞—Ç—ñ {chat_id}: {e}")

# === –õ–û–ì–Ü–ö–ê "–ü–ê–¢–Ü-–ú–ï–ù–ï–î–ñ–ï–†–ê 3.0" ===

# --- –ö—Ä–æ–∫ 1: –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è ---
@general_router.message(F.text.lower().in_(PARTY_TRIGGER_PHRASES))
async def on_party_trigger(message: types.Message, state: FSMContext):
    if database.get_lobby(message.chat.id):
        await message.reply("‚òùÔ∏è –í —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ –π–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ç—ñ. –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å!")
        return
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ?",
                        reply_markup=create_party_confirmation_keyboard())
    await state.clear()

@general_router.callback_query(F.data == "party_create_no")
async def on_party_creation_cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥, –∑–≤–µ—Ä—Ç–∞–π—Å—è, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à! üòâ")

@general_router.callback_query(F.data == "party_create_yes")
async def on_party_creation_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–∞—Ç—ñ:",
                                     reply_markup=create_party_size_keyboard())
    await state.set_state(PartyFSM.waiting_for_size)

# --- –ö—Ä–æ–∫ 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
@general_router.callback_query(PartyFSM.waiting_for_size, F.data.startswith("party_size_"))
async def on_party_size_select(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(party_size=int(callback.data.split("_")[-1]))
    await callback.message.edit_text("–ü—Ä–∏–π–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —è–∫ –¥–æ–≤–≥–æ –ª–æ–±—ñ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–º:",
                                     reply_markup=create_lobby_lifetime_keyboard())
    await state.set_state(PartyFSM.waiting_for_lifetime)

@general_router.callback_query(PartyFSM.waiting_for_lifetime, F.data.startswith("party_lifetime_"))
async def on_lobby_lifetime_select(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(expires_at=int(time.time()) + int(callback.data.split("_")[-1]))
    await callback.message.edit_text("–î–æ–±—Ä–µ. –Ü –æ—Å—Ç–∞–Ω–Ω—î: –æ–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
                                     reply_markup=create_role_selection_keyboard(PARTY_LOBBY_ROLES))
    await state.set_state(PartyFSM.waiting_for_initiator_role)

# --- –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è ---
@general_router.callback_query(PartyFSM.waiting_for_initiator_role, F.data.startswith("party_role_select_"))
async def on_initiator_role_select(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    await state.clear()
    user, chat = callback.from_user, callback.message.chat
    selected_role = callback.data.split("party_role_select_")[-1]
    
    roles_left = PARTY_LOBBY_ROLES.copy()
    roles_left.remove(selected_role)
    
    lobby_data = {
        "chat_id": chat.id, "leader_id": user.id, "party_size": user_data["party_size"],
        "players": {str(user.id): {"full_name": user.full_name, "role": selected_role}},
        "roles_left": roles_left, "expires_at": user_data["expires_at"]
    }
    
    await callback.message.delete()
    lobby_text = await format_lobby_message(lobby_data)
    lobby_msg = await bot.send_message(chat.id, lobby_text,
                                       reply_markup=create_dynamic_lobby_keyboard(user.id, lobby_data),
                                       parse_mode=ParseMode.HTML)
    
    database.add_lobby(message_id=lobby_msg.message_id, **lobby_data)
    logger.info(f"–õ–æ–±—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ —á–∞—Ç—ñ {chat.id} –ª—ñ–¥–µ—Ä–æ–º {user.full_name}")

@general_router.callback_query(F.data == "party_join")
async def on_party_join(callback: types.CallbackQuery, state: FSMContext):
    lobby = database.get_lobby(callback.message.chat.id)
    if not lobby or str(callback.from_user.id) in lobby["players"]:
        await callback.answer("–í–∏ –≤–∂–µ —É –ø–∞—Ç—ñ –∞–±–æ –ª–æ–±—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ!", show_alert=True)
        return
    if len(lobby["players"]) >= lobby["party_size"]:
        await callback.answer("–ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ!", show_alert=True)
        return

    await callback.message.reply("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=create_role_selection_keyboard(lobby["roles_left"]))
    await state.set_state(PartyFSM.waiting_for_joiner_role)
    await callback.answer()

@general_router.callback_query(PartyFSM.waiting_for_joiner_role, F.data.startswith("party_role_select_"))
async def on_joiner_role_select(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–ª—ñ
    await state.clear()
    
    user, chat = callback.from_user, callback.message.chat
    lobby = database.get_lobby(chat.id)
    if not lobby: return

    selected_role = callback.data.split("party_role_select_")[-1]
    if selected_role not in lobby["roles_left"]:
        await callback.answer("–¶—è —Ä–æ–ª—å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)
        return

    lobby["players"][str(user.id)] = {"full_name": user.full_name, "role": selected_role}
    lobby["roles_left"].remove(selected_role)
    
    database.add_lobby(chat.id, lobby["message_id"], lobby["leader_id"], lobby["party_size"], lobby["players"], lobby["roles_left"], lobby["expires_at"])
    await update_lobby_message(bot, chat.id)
    
    if len(lobby["players"]) == lobby["party_size"]:
        logger.info(f"–ü–∞—Ç—ñ –≤ —á–∞—Ç—ñ {chat.id} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—ñ–±—Ä–∞–Ω–æ!")
        # ... –ª–æ–≥—ñ–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
    
    await callback.answer(f"–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø–∞—Ç—ñ —è–∫ {selected_role}!")

@general_router.callback_query(F.data == "party_leave")
async def on_party_leave(callback: types.CallbackQuery, bot: Bot):
    # ... —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—Ö–æ–¥—É –∑ –ø–∞—Ç—ñ
    await callback.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –ø–∞—Ç—ñ.")

@general_router.callback_query(F.data == "party_cancel")
async def on_party_cancel(callback: types.CallbackQuery, bot: Bot):
    # ... —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ª–æ–±—ñ –ª—ñ–¥–µ—Ä–æ–º
    await callback.answer("–õ–æ–±—ñ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

# === –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò ===
# ... (–∫–æ–¥ cmd_start, cmd_go, handle_conversational_triggers, error_handler) ...
# –î–æ–¥–∞—é —ó—Ö –¥–ª—è –ø–æ–≤–Ω–æ—Ç–∏ —Ñ–∞–π–ª—É
@general_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    await message.answer_photo(photo=WELCOME_IMAGE_URL, caption=f"–ü—Ä–∏–≤—ñ—Ç, {user_name_escaped}!")

@general_router.message(Command("go"))
async def cmd_go(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    if not user_query:
        await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>.")
        return
    thinking_msg = await message.reply(f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}': {e}")
        response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞."
    await send_message_in_chunks(bot, message.chat.id, response_text, initial_message_to_edit=thinking_msg)

async def error_handler(event: types.ErrorEvent, bot: Bot):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception}", exc_info=event.exception)
    # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫)

def register_general_handlers(dp: Dispatcher):
    dp.include_router(general_router)
    logger.info("‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (v3.0) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
