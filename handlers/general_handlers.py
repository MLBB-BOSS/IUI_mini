"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –û–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ (/start, /go).
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Ñ—Ä–∞–∑–∏ –≤ —á–∞—Ç—ñ.
- –ü–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ (–ø–∞—Ç—ñ) –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º FSM.
- –ì–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –Ω–∞ –¥–≤–æ—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:
1. `party_router`: –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ.
2. `general_router`: –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —ñ–Ω—à—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
"""
import html
import logging
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Deque, List
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, Update, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
# –Ü–º–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ (FSM)
from aiogram.fsm.state import StatesGroup, State

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
from config import (
    ADMIN_USER_ID, WELCOME_IMAGE_URL, OPENAI_API_KEY, logger,
    CONVERSATIONAL_TRIGGERS, MAX_CHAT_HISTORY_LENGTH,
    BOT_NAMES, CONVERSATIONAL_COOLDOWN_SECONDS
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard,
    create_role_selection_keyboard,
    create_dynamic_lobby_keyboard
)

# === –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–¢–ê–ù–Ü–í FSM ===
# –î–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ç–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ "–Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–π–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤",
# –º–∏ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ —Ç—É—Ç –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—ó –ª–æ–≥—ñ–∫–∏.
class PartyCreationFSM(StatesGroup):
    """
    –°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    """
    waiting_for_confirmation = State()
    waiting_for_role_selection = State()


# === –°–•–û–í–ò–©–ê –î–ê–ù–ò–• –£ –ü–ê–ú'–Ø–¢–Ü ===
# –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
chat_histories: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=MAX_CHAT_HISTORY_LENGTH))
# –ö—É–ª–¥–∞—É–Ω–∏ –¥–ª—è –ø–∞—Å–∏–≤–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É –∫–æ–∂–Ω–æ–º—É —á–∞—Ç—ñ
chat_cooldowns: Dict[int, float] = {}
# –°—Ö–æ–≤–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª–æ–±—ñ. –£–í–ê–ì–ê: –¥–ª—è production –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Redis –∞–±–æ –ë–î.
active_lobbies: Dict[str, Dict] = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –≥—Ä–∏
ALL_ROLES: List[str] = ["–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"]


# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–û–£–¢–ï–†–Ü–í ===
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–≤–∞ —Ä–æ—É—Ç–µ—Ä–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –æ–±—Ä–æ–±–∫–∏.
# `party_router` –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏—Å—å –ø–µ—Ä—à–∏–º.
party_router = Router()
general_router = Router()


# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

def get_user_display_name(user: Optional[types.User]) -> str:
    """
    –í–∏—Ç—è–≥—É—î –Ω–∞–π–∫—Ä–∞—â–µ –¥–æ—Å—Ç—É–ø–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.
    
    Args:
        user: –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram –∞–±–æ None.
        
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —ñ–º'—è –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∞–ª—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫).
    """
    if not user:
        return "–¥—Ä—É–∂–µ"
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: first_name -> username -> "–¥—Ä—É–∂–µ"
    if user.first_name and user.first_name.strip():
        return html.escape(user.first_name.strip())
    elif user.username and user.username.strip():
        return html.escape(user.username.strip())
    else:
        return "–¥—Ä—É–∂–µ"


def get_lobby_message_text(lobby_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–±—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.

    Args:
        lobby_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±—ñ.

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ.
    """
    leader_name = html.escape(lobby_data['leader_name'])
    role_emoji_map = {"–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "üõ°Ô∏è", "–õ—ñ—Å–Ω–∏–∫": "üå≥", "–ú–∞–≥ (–º—ñ–¥)": "üßô", "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)": "üèπ", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)": "‚öîÔ∏è"}
    
    players_list = []
    taken_roles = []
    for player_id, player_info in lobby_data['players'].items():
        role = player_info['role']
        name = html.escape(player_info['name'])
        emoji = role_emoji_map.get(role, "üîπ")
        players_list.append(f"‚Ä¢ {emoji} <b>{role}:</b> {name}")
        taken_roles.append(role)

    available_roles_list = [f"‚Ä¢ {role_emoji_map.get(r, 'üîπ')} {r}" for r in ALL_ROLES if r not in taken_roles]
    header = f"üî• <b>–ó–±–∏—Ä–∞—î–º–æ –ø–∞—Ç—ñ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥!</b> üî•\n\n<b>–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä:</b> {leader_name}\n"
    players_section = "<b>–£—á–∞—Å–Ω–∏–∫–∏:</b>\n" + "\n".join(players_list)
    
    available_section = "\n\n<b>–í—ñ–ª—å–Ω—ñ —Ä–æ–ª—ñ:</b>\n" + "\n".join(available_roles_list) if available_roles_list else "\n\n‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!</b>"
    return f"{header}\n{players_section}{available_section}"


# === –õ–û–ì–Ü–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü (FSM) –ù–ê `party_router` ===

@party_router.message(F.text & F.func(lambda msg: 
    re.search(r'\b(–ø–∞—Ç—ñ|–ø–∞—Ç–∏|–∫–æ–º–∞–Ω–¥—É)\b', msg.text.lower()) and 
    re.search(r'\b(–∑–±–∏—Ä|–≥–æ|—à—É–∫–∞|–≥—Ä–∞—Ç|–∑—ñ–±—Ä–∞)\w*\b|\+', msg.text.lower())
))
async def ask_for_party_creation(message: Message, state: FSMContext):
    """
    –ö—Ä–æ–∫ 0: –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ –ø–∞—Ç—ñ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –¥—ñ–∞–ª–æ–≥,
    –ø–µ—Ä–µ–≤–æ–¥—è—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    await state.set_state(PartyCreationFSM.waiting_for_confirmation)
    await message.reply("–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ?", reply_markup=create_party_confirmation_keyboard())

@party_router.callback_query(F.data == "party_cancel_creation")
async def cancel_party_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–º–æ–≤—É –≤—ñ–¥ –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –∫—Ä–æ—Ü—ñ –¥—ñ–∞–ª–æ–≥—É.
    –í–∏—Ö–æ–¥–∏—Ç—å –∑—ñ —Å—Ç–∞–Ω—É FSM.
    """
    await state.clear()
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - –∑–≤–µ—Ä—Ç–∞–π—Å—è! üòâ")
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_confirmation, F.data == "party_start_creation")
async def prompt_for_role(callback: CallbackQuery, state: FSMContext):
    """
    –ö—Ä–æ–∫ 1: –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—î —É —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ –π–æ–≥–æ —Ä–æ–ª—å,
    –ø–µ—Ä–µ–≤–æ–¥—è—á–∏ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ.
    """
    await state.set_state(PartyCreationFSM.waiting_for_role_selection)
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, —â–æ–± —ñ–Ω—à—ñ –∑–Ω–∞–ª–∏, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:", reply_markup=create_role_selection_keyboard(ALL_ROLES))
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_role_selection, F.data.startswith("party_role_select:"))
async def create_party_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ö—Ä–æ–∫ 2 (–§—ñ–Ω–∞–ª): –°—Ç–≤–æ—Ä—é—î –ª–æ–±—ñ, –¥–æ–¥–∞—î —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ —è–∫ —É—á–∞—Å–Ω–∏–∫–∞,
    –ø—É–±–ª—ñ–∫—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏—Ö–æ–¥–∏—Ç—å –∑—ñ —Å—Ç–∞–Ω—É FSM.
    """
    user = callback.from_user
    selected_role = callback.data.split(":")[-1]
    lobby_id = str(callback.message.message_id)

    # –ö–õ–Æ–ß–û–í–ò–ô –§–Ü–ö–°: –Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤!
    lobby_data = {
        "leader_id": user.id,
        "leader_name": get_user_display_name(user),  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        "players": {
            user.id: {"name": get_user_display_name(user), "role": selected_role}  # –¢–∞–∫–æ–∂ —Ç—É—Ç
        },
        "chat_id": callback.message.chat.id
    }
    active_lobbies[lobby_id] = lobby_data
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –ª–æ–±—ñ {lobby_id} —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º {get_user_display_name(user)} (ID: {user.id}) –∑ —Ä–æ–ª–ª—é {selected_role}")

    message_text = get_lobby_message_text(lobby_data)
    keyboard = create_dynamic_lobby_keyboard(lobby_id, user.id, lobby_data)
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer(f"–í–∏ –∑–∞–π–Ω—è–ª–∏ —Ä–æ–ª—å: {selected_role}")
    await state.clear()


# === –Ü–°–ù–£–Æ–ß–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ù–ê `general_router` ===

@general_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ç–∞ –æ–ø–∏—Å–æ–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.
    """
    await state.clear()
    user = message.from_user
    user_name_escaped = get_user_display_name(user)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")

    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"

    welcome_caption = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.

–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ.

üëá –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥:
‚Ä¢ <code>/analyzeprofile</code> ‚Äì –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.
‚Ä¢ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code> ‚Äì –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>/go –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–Ω–∫</code>).
"""

    try:
        await message.answer_photo(
            photo=WELCOME_IMAGE_URL,
            caption=welcome_caption,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name_escaped}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        fallback_text = f"""{greeting_msg}, <b>{user_name_escaped}</b>! {emoji}
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB IUI mini</b>! üéÆ
–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å–≤—ñ—Ç—É Mobile Legends.
–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª–µ–≥–µ–Ω–¥–æ—é!

<b>–©–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏:</b>
üî∏ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–∫–æ–º–∞–Ω–¥–∞ <code>/analyzeprofile</code>).
üî∏ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –≥—Ä—ñ (–∫–æ–º–∞–Ω–¥–∞ <code>/go &lt;—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è&gt;</code>).
"""
        try:
            await message.answer(fallback_text, parse_mode=ParseMode.HTML)
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except TelegramAPIError as e_text:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name_escaped}: {e_text}")


@general_router.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go.
    –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ GPT —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    await state.clear()
    user = message.from_user
    user_name_escaped = get_user_display_name(user)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")

    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name_escaped}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>"
        )
        return

    thinking_messages = [
        f"ü§î {user_name_escaped}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name_escaped}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—É –ø–æ—Ä–∞–¥—É!",
        f"‚è≥ –•–≤–∏–ª–∏–Ω–∫—É, {user_name_escaped}, —à—É–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name_escaped}: {e}")

    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name_escaped, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {e}")

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name_escaped}: {processing_time:.2f}—Å")

    admin_info = ""
    if user_id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.8 GPT (gpt-4.1)</i>"

    full_response_to_send = f"{response_text}{admin_info}"

    try:
        await send_message_in_chunks(
            bot_instance=bot,
            chat_id=message.chat.id,
            text=full_response_to_send,
            parse_mode=ParseMode.HTML,
            initial_message_to_edit=thinking_msg
        )
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ, —á–∞—Å—Ç–∏–Ω–∞–º–∏).")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name_escaped} –Ω–∞–≤—ñ—Ç—å —á–∞—Å—Ç–∏–Ω–∞–º–∏: {e}", exc_info=True)
        try:
            final_error_msg = f"–í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            if thinking_msg:
                 try:
                    await thinking_msg.edit_text(final_error_msg, parse_mode=None)
                 except TelegramAPIError: 
                    await message.reply(final_error_msg, parse_mode=None)
            else: 
                await message.reply(final_error_msg, parse_mode=None)
        except Exception as final_err_send:
            logger.error(f"–ó–æ–≤—Å—ñ–º –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name_escaped}: {final_err_send}")


@general_router.message(F.text)
async def handle_trigger_messages(message: Message, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ "–°—Ç—Ä–∞—Ç–µ–≥—ñ—î—é –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –ü—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ",
    —â–æ–± –±–æ—Ç –ø–æ–≤–æ–¥–∏–≤—Å—è —è–∫ —Ä–æ–∑—É–º–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ —á–∞—Ç—É, –∞ –Ω–µ —Å–ø–∞–º–µ—Ä.
    
    üîß –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢–µ–ø–µ—Ä –∑–∞–≤–∂–¥–∏ –≤–∏—Ç—è–≥—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–µ —ñ–º'—è –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
    """
    if not message.text or message.text.startswith('/') or not message.from_user:
        return

    # --- 1. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É ---
    text_lower = message.text.lower()
    chat_id = message.chat.id
    
    # üéØ –ì–û–õ–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ó–∞–≤–∂–¥–∏ –≤–∏—Ç—è–≥—É—î–º–æ —ñ–º'—è –∑ –ü–û–¢–û–ß–ù–û–ì–û –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    current_user_name = get_user_display_name(message.from_user)
    
    current_time = time.time()
    bot_info = await bot.get_me()

    # --- 2. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É–º–æ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–†—ñ–≤–Ω—ñ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É) ---
    is_explicit_mention = f"@{bot_info.username.lower()}" in text_lower
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id
    is_name_mention = any(re.search(r'\b' + name + r'\b', text_lower) for name in BOT_NAMES)

    # --- 3. –ü–æ—à—É–∫ —Ç—Ä–∏–≥–µ—Ä–∞ ---
    matched_trigger_mood = None
    for trigger, mood in CONVERSATIONAL_TRIGGERS.items():
        if re.search(r'\b' + re.escape(trigger) + r'\b', text_lower):
            matched_trigger_mood = mood
            break
    
    if is_reply_to_bot and not matched_trigger_mood:
        matched_trigger_mood = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É."

    if not matched_trigger_mood:
        return

    # --- 4. –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ---
    should_respond = False
    if is_explicit_mention or is_reply_to_bot or is_name_mention:
        should_respond = True
        logger.info(f"–ü—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name}.")
    else:
        last_response_time = chat_cooldowns.get(chat_id, 0)
        if (current_time - last_response_time) > CONVERSATIONAL_COOLDOWN_SECONDS:
            should_respond = True
            chat_cooldowns[chat_id] = current_time
            logger.info(f"–ü—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: –ø–∞—Å–∏–≤–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name} (–∫—É–ª–¥–∞—É–Ω –ø—Ä–æ–π—à–æ–≤).")
        else:
            logger.info(f"–†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏: –ø–∞—Å–∏–≤–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –≤ —á–∞—Ç—ñ {chat_id} –≤—ñ–¥ {current_user_name} (–∞–∫—Ç–∏–≤–Ω–∏–π –∫—É–ª–¥–∞—É–Ω).")

    # --- 5. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ---
    if should_respond:
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º —ñ–º–µ–Ω–µ–º
        chat_histories[chat_id].append({"role": "user", "content": message.text})
        
        try:
            history_for_api = list(chat_histories[chat_id])
            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                # üéØ –ü–ï–†–ï–î–ê–Ñ–ú–û –ê–ö–¢–£–ê–õ–¨–ù–ï –Ü–ú'–Ø –í GPT
                reply_text = await gpt.generate_conversational_reply(
                    user_name=current_user_name,  # –¢–µ–ø–µ—Ä –∑–∞–≤–∂–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω–µ —ñ–º'—è!
                    chat_history=history_for_api,
                    trigger_mood=matched_trigger_mood
                )

            if reply_text and "<i>" not in reply_text:
                chat_histories[chat_id].append({"role": "assistant", "content": reply_text})
                await message.reply(reply_text)
                logger.info(f"–ê–¥–∞–ø—Ç–∏–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id} –¥–ª—è {current_user_name}.")
            else:
                logger.error(f"–°–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —á–∞—Ç—É {chat_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_name}.")
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —á–∞—Ç—ñ {chat_id} –¥–ª—è {current_user_name}: {e}")


async def error_handler(event: types.ErrorEvent, bot: Bot):
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫. –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    logger.error(
        f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {event.exception} –¥–ª—è update: {event.update.model_dump_json(exclude_none=True, indent=2)}",
        exc_info=event.exception
    )

    chat_id: Optional[int] = None
    user_name: str = "–¥—Ä—É–∂–µ"

    update = event.update
    if update.message and update.message.chat:
        chat_id = update.message.chat.id
        user_name = get_user_display_name(update.message.from_user)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    elif update.callback_query and update.callback_query.message and update.callback_query.message.chat:
        chat_id = update.callback_query.message.chat.id
        user_name = get_user_display_name(update.callback_query.from_user)  # –¢–∞–∫–æ–∂ —Ç—É—Ç
        try:
            await update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except TelegramAPIError:
            pass

    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω–∫—É."

    if chat_id:
        try:
            await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except TelegramAPIError as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")


# === –§–£–ù–ö–¶–Ü–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –û–ë–†–û–ë–ù–ò–ö–Ü–í ===
def register_general_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ.

    –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê: —Ä–µ—î—Å—Ç—Ä—É—î `party_router` –ü–ï–†–ï–î `general_router`,
    —â–æ–± —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–∞—Ç—ñ –º–∞–ª–∞ –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.
    """
    dp.include_router(party_router)
    dp.include_router(general_router)
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ç—ñ (FSM) —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.")