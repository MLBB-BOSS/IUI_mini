"""
–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.

–¶–µ–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª—ñ–∑—É—î –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É "AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞". –ó–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö
–∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤, —Ç—É—Ç —î –æ–¥–∏–Ω –≥–æ–ª–æ–≤–Ω–∏–π (`on_bot_interaction`),
—è–∫–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –≤—Å—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞. –í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
–Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (`create_lobby`, `ask_question`, `general_chat`) —ñ,
–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –≤–∏–∫–ª–∏–∫–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ª–æ–≥—ñ–∫—É.

–¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –Ω—É–ª—å–æ–≤–∏–π –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –º—ñ–∂ —Ç—Ä–∏–≥–µ—Ä–∞–º–∏ —Ç–∞ –¥–æ–∑–≤–æ–ª—è—î –±–æ—Ç—É
—Ä–æ–∑—É–º—ñ—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤—É –∑–∞–º—ñ—Å—Ç—å –∂–æ—Ä—Å—Ç–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
"""
import html
import time
from collections import defaultdict
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

import database
from config import (
    logger, PARTY_TRIGGER_PHRASES, PARTY_LOBBY_ROLES, OPENAI_API_KEY, WELCOME_IMAGE_URL,
    ADMIN_USER_ID, MAX_CHAT_HISTORY_LENGTH, BOT_NAMES,
    CONVERSATIONAL_COOLDOWN_SECONDS
)
from keyboards.inline_keyboards import (
    create_party_confirmation_keyboard, create_party_size_keyboard,
    create_lobby_lifetime_keyboard, create_role_selection_keyboard,
    create_dynamic_lobby_keyboard
)
from services.openai_service import MLBBChatGPT
from utils.message_utils import send_message_in_chunks

general_router = Router()

# FSM —Å—Ç–∞–Ω–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
class ConversationalFSM(StatesGroup):
    chatting = State()

class PartyFSM(StatesGroup):
    waiting_for_size = State()
    waiting_for_lifetime = State()
    waiting_for_initiator_role = State()
    waiting_for_joiner_role = State()

conversational_cooldown_cache: Dict[int, float] = defaultdict(float)

# =============================================================================
# ======================== –í–ù–£–¢–†–Ü–®–ù–Ø –õ–û–ì–Ü–ö–ê –î–Ü–ô ===============================
# =============================================================================

async def _start_party_creation(message: types.Message, state: FSMContext):
    """
    –Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ. –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º.
    """
    if database.get_lobby(message.chat.id):
        await message.reply("‚òùÔ∏è –í —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ –π–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ç—ñ. –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å!")
        return
    await message.reply(
        "–ë–∞—á—É, —Ç–∏ —Ö–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ. –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–±—ñ?",
        reply_markup=create_party_confirmation_keyboard()
    )
    await state.clear()

async def _handle_question(message: types.Message, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ AI. –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º.
    """
    user_name = html.escape(message.from_user.first_name)
    query = message.text
    
    thinking_msg = await message.reply("‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response = await gpt.get_response(user_name, query)
        await send_message_in_chunks(
            bot=bot, chat_id=message.chat.id, text=response,
            parse_mode=ParseMode.HTML, initial_message_to_edit=thinking_msg
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –ø–∏—Ç–∞–Ω—å _handle_question: {e}", exc_info=True)
        await thinking_msg.edit_text("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. üòî")

async def _handle_general_chat(message: types.Message, state: FSMContext, bot: Bot):
    """
    –í–µ–¥–µ –∑–∞–≥–∞–ª—å–Ω—É —Ä–æ–∑–º–æ–≤—É. –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º.
    """
    await state.set_state(ConversationalFSM.chatting)
    user_data = await state.get_data()
    history = user_data.get('history', [])
    
    history.append({"role": "user", "content": message.text})
    
    if len(history) > MAX_CHAT_HISTORY_LENGTH:
        history = history[-MAX_CHAT_HISTORY_LENGTH:]

    thinking_msg = await message.reply("ü§î –î—É–º–∞—é...")
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.generate_conversational_reply(
                user_name=message.from_user.full_name,
                chat_history=history,
                trigger_mood="–î—Ä—É–∂–Ω—è —Ç–∞ –¥–æ—Ç–µ–ø–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ."
            )
        
        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        await send_message_in_chunks(
            bot=bot, chat_id=message.chat.id, text=response_text,
            parse_mode=ParseMode.HTML, initial_message_to_edit=thinking_msg
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑–º–æ–≤–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É _handle_general_chat: {e}", exc_info=True)
        await thinking_msg.edit_text("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

# =============================================================================
# ===================== –ì–û–õ–û–í–ù–ò–ô AI-–ú–ê–†–®–†–£–¢–ò–ó–ê–¢–û–† ============================
# =============================================================================

async def is_bot_mentioned_or_private(message: types.Message, bot_info: types.User) -> bool:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –¥–æ –±–æ—Ç–∞.
    """
    if message.chat.type == 'private':
        return True
    if message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id:
        return True
    if message.text:
        bot_username = f"@{bot_info.username}"
        return bot_username in message.text or any(
            name.lower() in message.text.lower() for name in BOT_NAMES
        )
    return False

@general_router.message(
    is_bot_mentioned_or_private,
    F.text,
    ~CommandStart(),
    ~Command("go") # –ö–æ–º–∞–Ω–¥–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –¥–ª—è —á—ñ—Ç–∫–æ—Å—Ç—ñ
)
async def on_bot_interaction(message: types.Message, state: FSMContext, bot: Bot):
    """
    –Ñ–¥–∏–Ω–∏–π "–º–æ–∑–æ–∫" –±–æ—Ç–∞, —â–æ –∞–Ω–∞–ª—ñ–∑—É—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ—Ç—Ä—ñ–±–Ω—É –ª–æ–≥—ñ–∫—É.
    """
    user_id = message.from_user.id
    current_time = time.time()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É
    if current_time - conversational_cooldown_cache[user_id] < CONVERSATIONAL_COOLDOWN_SECONDS:
        logger.info(f"–ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
        return
    conversational_cooldown_cache[user_id] = current_time

    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            # –ö—Ä–æ–∫ 1: –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–º—ñ—Ä—É
            intent_data = await gpt.determine_intent(message.text)
            intent = intent_data.get("intent", "unknown")
            
            logger.info(f"AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –≤–∏–∑–Ω–∞—á–∏–≤ –Ω–∞–º—ñ—Ä: '{intent}' –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{message.text[:50]}...'")

            # –ö—Ä–æ–∫ 2: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è
            if intent == "create_lobby":
                await _start_party_creation(message, state)
            elif intent == "ask_question":
                await _handle_question(message, bot)
            elif intent == "general_chat":
                await _handle_general_chat(message, state, bot)
            else: # intent == "unknown" –∞–±–æ —ñ–Ω—à–∏–π
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á—ñ—Ç–∫–∏–π –Ω–∞–º—ñ—Ä. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏.")
                await _handle_general_chat(message, state, bot)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ AI-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ: {e}", exc_info=True)
        await message.reply("–û–π, –º—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ–º–ø–∞—Å –∑–ª–∞–º–∞–≤—Å—è. –ù–µ –º–æ–∂—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ —Ä–æ–±–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()


# =============================================================================
# ================== –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò (–ö–û–ú–ê–ù–î–ò, FSM) ==========================
# =============================================================================

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∏—Ç–∞–Ω—å
@general_router.message(Command("go"))
async def cmd_go(message: types.Message, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î —è–≤–Ω—É –∫–æ–º–∞–Ω–¥—É /go –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è."""
    # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∑ —Ç–µ–∫—Å—Ç—É, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ —á–∏—Å—Ç–∏–π –∑–∞–ø–∏—Ç
    query = message.text.replace("/go", "", 1).strip()
    if not query:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go.")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ "—Ñ–µ–π–∫–æ–≤–µ" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É
    message.text = query
    await _handle_question(message, bot)

@general_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # ... (–∫–æ–¥ cmd_start –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    pass

# –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è FSM (–≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É –ø–∞—Ç—ñ, —Ä–æ–ª—ñ —ñ —Ç.–¥.) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω,
# –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —Ä–µ–∞–≥—É—é—Ç—å –Ω–∞ callback-–∏, –∞ –Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
# @general_router.callback_query(...)

async def error_handler(event: types.ErrorEvent, bot: Bot):
    # ... (–∫–æ–¥ error_handler –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    pass

def register_general_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ."""
    dp.include_router(general_router)
    logger.info("‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (v4.0 - AI Router) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")

# ... (—Ç—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ—à—Ç–∞ –∫–æ–¥—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É callback-—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫ –ø–∞—Ç—ñ)
# async def on_party_creation_cancel(...) —ñ —Ç.–¥.
