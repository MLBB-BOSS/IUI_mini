import asyncio
import base64
import html
import logging 
import re
import random 
from typing import Dict, Any, Optional, Union

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest 
from aiogram.fsm.context import FSMContext

from config import OPENAI_API_KEY, logger # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ logger —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ config
from services.openai_service import (
    MLBBChatGPT,
    PROFILE_SCREENSHOT_PROMPT,
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks, MAX_TELEGRAM_MESSAGE_LENGTH 

PROCESSING_MESSAGES = [
    "üîé –°–∫–∞–Ω—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, —Ö–≤–∏–ª–∏–Ω–∫—É...",
    "ü§ñ –ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –≤ –¥—ñ—ó! –ê–Ω–∞–ª—ñ–∑—É—é...",
    "üìä –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—é —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∏...",
    "üß† –ü—Ä–æ–≤–æ–¥–∂—É –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö...",
    "‚ú® –ó–±–∏—Ä–∞—é –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å...",
    "‚ö° –ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ, —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —à—Ç—Ä–∏—Ö–∏...",
    "üí° –ì–µ–Ω–µ—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç...",
    "üßê –í–∏–≤—á–∞—é –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é...",
    "üìâ –û–±—á–∏—Å–ª—é—é –∫–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏...",
    "‚úçÔ∏è –§–æ—Ä–º—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫..."
]

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á (–±–µ–∑ –∑–º—ñ–Ω) ---
def _safe_get_float(data: Optional[Dict[str, Any]], key: str) -> Optional[float]:
    if data is None: return None
    value = data.get(key)
    if value is None: return None
    try: return float(value)
    except (ValueError, TypeError):
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ '{value}' —É float –¥–ª—è –∫–ª—é—á–∞ '{key}'")
        return None

def _safe_get_int(data: Optional[Dict[str, Any]], key: str) -> Optional[int]:
    if data is None: return None
    value = data.get(key)
    if value is None: return None
    try: return int(float(value)) # –°–ø–æ—á–∞—Ç–∫—É float, –ø–æ—Ç—ñ–º int –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—ñ
    except (ValueError, TypeError):
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ '{value}' —É int –¥–ª—è –∫–ª—é—á–∞ '{key}'")
        return None

def calculate_derived_stats(stats_data: Dict[str, Any]) -> Dict[str, Union[str, float, int, None]]:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–æ—Ö—ñ–¥–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    derived: Dict[str, Union[str, float, int, None]] = {}
    main_ind = stats_data.get("main_indicators", {})
    details_p = stats_data.get("details_panel", {})
    ach_left = stats_data.get("achievements_left_column", {})
    ach_right = stats_data.get("achievements_right_column", {})

    matches_played = _safe_get_int(main_ind, 'matches_played')
    win_rate_percent = _safe_get_float(main_ind, 'win_rate')
    mvp_count = _safe_get_int(main_ind, 'mvp_count')
    savage_count = _safe_get_int(ach_right, 'savage_count')
    legendary_count = _safe_get_int(ach_left, 'legendary_count')
    mvp_loss_count = _safe_get_int(ach_right, 'mvp_loss_count')
    kda_ratio = _safe_get_float(details_p, 'kda_ratio')
    avg_deaths_per_match = _safe_get_float(details_p, 'avg_deaths_per_match')
    avg_hero_dmg_per_min = _safe_get_float(details_p, 'avg_hero_dmg_per_min')
    avg_gold_per_min = _safe_get_float(details_p, 'avg_gold_per_min')

    if matches_played is not None and win_rate_percent is not None:
        total_wins = int(round(matches_played * (win_rate_percent / 100.0)))
        derived['total_wins'] = total_wins
        derived['total_losses'] = matches_played - total_wins
    else:
        derived.update({'total_wins': None, 'total_losses': None})

    if mvp_count is not None and matches_played is not None and matches_played > 0:
        derived['mvp_rate_percent'] = round((mvp_count / matches_played) * 100, 2)
    else:
        derived['mvp_rate_percent'] = None

    if savage_count is not None and matches_played is not None and matches_played > 0:
        derived['savage_frequency_per_1000_matches'] = round((savage_count / matches_played) * 1000, 2)
    else:
        derived['savage_frequency_per_1000_matches'] = None
        
    if legendary_count is not None and matches_played is not None and matches_played > 0:
        derived['legendary_frequency_per_100_matches'] = round((legendary_count / matches_played) * 100, 2)
    else:
        derived['legendary_frequency_per_100_matches'] = None

    if mvp_count is not None and mvp_loss_count is not None: # mvp_count –º–æ–∂–µ –±—É—Ç–∏ 0
        if mvp_count > 0:
            mvp_wins = mvp_count - mvp_loss_count
            # mvp_wins –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º, —è–∫—â–æ mvp_loss_count > mvp_count (—Ö–æ—á–∞ —Ü–µ –¥–∏–≤–Ω–æ)
            # –¢–æ–º—É –æ–±—Ä–æ–±–ª—è—î–º–æ —Ü–µ–π –≤–∏–ø–∞–¥–æ–∫, –∞–ª–µ –ª–æ–≥—ñ—á–Ω–æ mvp_wins –Ω–µ –º–∞—î –±—É—Ç–∏ < 0
            derived['mvp_win_share_percent'] = round((mvp_wins / mvp_count) * 100, 2) if mvp_wins >=0 else 0.0 # –ê–±–æ None, —è–∫—â–æ mvp_wins < 0
        elif mvp_count == 0 and mvp_loss_count == 0 : # –Ø–∫—â–æ 0 MVP —ñ 0 MVP Loss
            derived['mvp_win_share_percent'] = None # –ê–±–æ 0.0, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
        else: # mvp_count == 0, –∞–ª–µ mvp_loss_count > 0 (–Ω–µ–ª–æ–≥—ñ—á–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ –≤ –¥–∞–Ω–∏—Ö)
            derived['mvp_win_share_percent'] = None 
    else:
        derived['mvp_win_share_percent'] = None
        
    if avg_hero_dmg_per_min is not None and avg_gold_per_min is not None and avg_gold_per_min > 0:
        derived['damage_per_gold_ratio'] = round(avg_hero_dmg_per_min / avg_gold_per_min, 2)
    else:
        derived['damage_per_gold_ratio'] = None
        
    if kda_ratio is not None and avg_deaths_per_match is not None:
        # –Ø–∫—â–æ avg_deaths_per_match = 0, KDA –º–æ–∂–µ –±—É—Ç–∏ –≤–∏—Å–æ–∫–∏–º. (K+A)/1 –∞–±–æ –ø—Ä–æ—Å—Ç–æ K+A.
        # (K+A)/D. –Ø–∫—â–æ D=0, —Ç–æ KDA –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–µ. –£ –≥—Ä—ñ –∑–∞–∑–≤–∏—á–∞–π –ø–æ–∫–∞–∑—É—é—Ç—å K+A —è–∫—â–æ D=0.
        # –¢—É—Ç avg_impact_score_per_match = kda_ratio * avg_deaths_per_match. –Ø–∫—â–æ avg_deaths_per_match=0, —Ç–æ —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0.
        # –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è avg_impact_score_per_match.
        if avg_deaths_per_match > 0:
            derived['avg_impact_score_per_match'] = round(kda_ratio * avg_deaths_per_match, 2)
        elif kda_ratio is not None: # –Ø–∫—â–æ —Å–º–µ—Ä—Ç–µ–π 0, —Ç–æ KDA = K+A. –í–ø–ª–∏–≤ = K+A.
            derived['avg_impact_score_per_match'] = round(kda_ratio, 2) # –Ø–∫—â–æ KDA –≤–∂–µ (K+A)/1
        else:
            derived['avg_impact_score_per_match'] = None
    else:
        derived['avg_impact_score_per_match'] = None
        
    # logger.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {derived}")
    return derived

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î (–±–µ–∑ –∑–º—ñ–Ω) ---
async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzeprofile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    await state.update_data(analysis_type="profile", vision_prompt=PROFILE_SCREENSHOT_PROMPT, original_user_name=user.first_name)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.")

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzestats –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    await state.update_data(analysis_type="player_stats", vision_prompt=PLAYER_STATS_PROMPT, original_user_name=user.first_name)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ—î—ó —ñ–≥—Ä–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–¥—ñ–ª \"Statistics\" -> \"All Seasons\" –∞–±–æ \"Current Season\").\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.")

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç, –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ –Ω–∞–∑–∞–¥ –∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
    if not message.from_user or not message.chat:
        logger.error("handle_profile_screenshot: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π message.from_user –∞–±–æ message.chat")
        return

    user_data_state = await state.get_data()
    user_name_original = user_data_state.get("original_user_name", message.from_user.first_name if message.from_user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_name_escaped = html.escape(user_name_original)
    
    if not message.photo:
        await message.answer(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_escaped}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return
    
    photo_file_id = message.photo[-1].file_id
    chat_id_for_photo = message.chat.id # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ chat_id –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ

    try:
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} (ID: {message.from_user.id}): {e}")
    
    await state.update_data(vision_photo_file_id=photo_file_id)
    caption_text = f"–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ, {user_name_escaped}.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª –∞–±–æ ¬´üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏¬ª."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")]
    ])
    
    try:
        sent_message = await bot.send_photo(
            chat_id=chat_id_for_photo, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π chat_id
            photo=photo_file_id, 
            caption=caption_text, 
            reply_markup=keyboard,
            business_connection_id=None # –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id, chat_id_for_analysis=chat_id_for_photo)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è {user_name_escaped} (ID: {message.from_user.id}): {e}")
        try:
            await bot.send_message(chat_id_for_photo, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç, {user_name_escaped}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except TelegramAPIError as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name_escaped} (ID: {message.from_user.id}): {send_err}")
        await state.clear()

# --- –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í (–±–µ–∑ –∑–º—ñ–Ω) ---
def format_profile_result(user_name: str, data: Dict[str, Any]) -> str:
    user_name_escaped = html.escape(user_name)
    if not data: return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name_escaped}."
    parts = [f"<b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, {user_name_escaped}:</b>"]
    fields_translation = {"game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º","mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)","highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)","matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ","likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ","location": "üåç –õ–æ–∫–∞—Ü—ñ—è","squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥"}
    has_data = False
    for key, readable_name in fields_translation.items():
        value = data.get(key)
        if value is not None:
            display_value = str(value)
            if key == "highest_rank_season" and ("‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower() or "—Å–ª–∞–≤–∞" in display_value.lower()):
                if "‚òÖ" not in display_value: display_value = display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ")
                display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value)
            parts.append(f"<b>{readable_name}:</b> {html.escape(display_value)}")
            has_data = True
        else: parts.append(f"<b>{readable_name}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>")
    if not has_data and data.get("raw_response"): parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.</i>")
    elif not has_data: parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.</i>")
    return "\n".join(parts)

def format_detailed_stats_text(user_name: str, data: Dict[str, Any]) -> str:
    user_name_escaped = html.escape(user_name)
    if not data: return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name_escaped}."
    parts = [f"<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name_escaped} ({html.escape(str(data.get('stats_filter_type', 'N/A')))}):</b>"]
    main_ind = data.get("main_indicators", {})
    parts.append("\n<b><u>–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:</u></b>")
    parts.append(f"  ‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: <b>{main_ind.get('matches_played', 'N/A')}</b>")
    win_rate = main_ind.get('win_rate')
    parts.append(f"  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: <b>{win_rate}%</b>" if win_rate is not None else "  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: N/A")
    parts.append(f"  ‚Ä¢ MVP: <b>{main_ind.get('mvp_count', 'N/A')}</b>")
    ach_left = data.get("achievements_left_column", {})
    parts.append("\n<b><u>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 1):</u></b>")
    parts.append(f"  ‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏—Ö: {ach_left.get('legendary_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ú–∞–Ω—ñ—è–∫—ñ–≤: {ach_left.get('maniac_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {ach_left.get('double_kill_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –≤–±–∏–≤—Å—Ç–≤ –∑–∞ –≥—Ä—É: {ach_left.get('most_kills_in_one_game', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {ach_left.get('longest_win_streak', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. —à–∫–æ–¥–∏/—Ö–≤: {ach_left.get('highest_dmg_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –∑–æ–ª–æ—Ç–∞/—Ö–≤: {ach_left.get('highest_gold_per_min', 'N/A')}")
    ach_right = data.get("achievements_right_column", {})
    parts.append("\n<b><u>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 2):</u></b>")
    parts.append(f"  ‚Ä¢ –î–∏–∫—É–Ω—Å—Ç–≤ (Savage): {ach_right.get('savage_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ü–æ—Ç—Ä—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {ach_right.get('triple_kill_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ MVP –ø—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ: {ach_right.get('mvp_loss_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –¥–æ–ø–æ–º–æ–≥–∏ –∑–∞ –≥—Ä—É: {ach_right.get('most_assists_in_one_game', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ü–µ—Ä—à–∞ –∫—Ä–æ–≤: {ach_right.get('first_blood_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —à–∫–æ–¥–∏/—Ö–≤: {ach_right.get('highest_dmg_taken_per_min', 'N/A')}")
    details = data.get("details_panel", {})
    parts.append("\n<b><u>–î–µ—Ç–∞–ª—ñ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å):</u></b>")
    parts.append(f"  ‚Ä¢ KDA: <b>{details.get('kda_ratio', 'N/A')}</b>")
    tf_rate = details.get('teamfight_participation_rate')
    parts.append(f"  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: <b>{tf_rate}%</b>" if tf_rate is not None else "  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: N/A")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. –∑–æ–ª–æ—Ç–æ/—Ö–≤: {details.get('avg_gold_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤: {details.get('avg_hero_dmg_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —Å–º–µ—Ä—Ç–µ–π/–º–∞—Ç—á: {details.get('avg_deaths_per_match', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≤–µ–∂–∞–º/–º–∞—Ç—á: {details.get('avg_turret_dmg_per_match', 'N/A')}")
    return "\n".join(parts)

def format_unique_analytics_text(user_name: str, derived_data: Optional[Dict[str, Any]]) -> str:
    user_name_escaped = html.escape(user_name)
    if not derived_data: return f"–î–ª—è –≥—Ä–∞–≤—Ü—è {user_name_escaped} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."
    parts = [f"<b>üìà <u>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI –¥–ª—è {user_name_escaped}:</u></b>"]
    has_data = False
    def _format_derived_value(value: Any, precision: int = 2) -> str:
        if value is None: return "N/A"
        try: return f"{float(value):.{precision}f}"
        except (ValueError, TypeError): return html.escape(str(value))
    if derived_data.get('total_wins') is not None:
        parts.append(f"  üëë –ü–µ—Ä–µ–º–æ–≥/–ü–æ—Ä–∞–∑–æ–∫: <b>{derived_data['total_wins']} / {derived_data.get('total_losses', 'N/A')}</b>"); has_data = True
    if derived_data.get('mvp_rate_percent') is not None:
        parts.append(f"  ‚≠ê MVP –†–µ–π—Ç–∏–Ω–≥: <b>{_format_derived_value(derived_data['mvp_rate_percent'])}%</b> –º–∞—Ç—á—ñ–≤"); has_data = True
    if derived_data.get('mvp_win_share_percent') is not None:
        parts.append(f"  üèÜ –ß–∞—Å—Ç–∫–∞ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö: <b>{_format_derived_value(derived_data['mvp_win_share_percent'])}%</b>"); has_data = True
    if derived_data.get('savage_frequency_per_1000_matches') is not None:
        parts.append(f"  üî• –ß–∞—Å—Ç–æ—Ç–∞ Savage: ~<b>{_format_derived_value(derived_data['savage_frequency_per_1000_matches'])}</b> –Ω–∞ 1000 –º–∞—Ç—á—ñ–≤"); has_data = True
    if derived_data.get('legendary_frequency_per_100_matches') is not None:
        parts.append(f"  ‚ú® –ß–∞—Å—Ç–æ—Ç–∞ Legendary: ~<b>{_format_derived_value(derived_data['legendary_frequency_per_100_matches'])}</b> –Ω–∞ 100 –º–∞—Ç—á—ñ–≤"); has_data = True
    if derived_data.get('damage_per_gold_ratio') is not None:
        parts.append(f"  ‚öîÔ∏è –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞: <b>{_format_derived_value(derived_data['damage_per_gold_ratio'])}</b> —à–∫–æ–¥–∏/—Ö–≤ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ/—Ö–≤"); has_data = True
    if derived_data.get('avg_impact_score_per_match') is not None:
        parts.append(f"  üéØ –°–µ—Ä. –í–ø–ª–∏–≤ (K+A)/–º–∞—Ç—á: ~<b>{_format_derived_value(derived_data['avg_impact_score_per_match'])}</b>"); has_data = True
    if not has_data: return f"–î–ª—è –≥—Ä–∞–≤—Ü—è {user_name_escaped} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."
    return "\n".join(parts)

# --- –û–ë–†–û–ë–ö–ê –ö–û–õ–ë–ï–ö–Ü–í ---
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª—ñ–∑', –≤–∏–∫–æ–Ω—É—î –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    if not (cq_msg := callback_query.message) or not cq_msg.chat : # cq_msg = callback_query.message
        logger.error("trigger_vision_analysis_callback: –≤—ñ–¥—Å—É—Ç–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —á–∞—Ç —É –∫–æ–ª–±–µ–∫—É.")
        try:
            await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç (–≤—ñ–¥—Å—É—Ç–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).", show_alert=True)
        except TelegramAPIError: pass # –Ø–∫—â–æ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –≤–¥–∞–ª–∞—Å—è
        await state.clear()
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ chat_id –∑ cq_msg.chat.id, –∞ –Ω–µ –∑—ñ —Å—Ç–∞–Ω—É, –¥–ª—è –±—ñ–ª—å—à–æ—ó –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
    chat_id_from_cq = cq_msg.chat.id
    message_id_from_cq = cq_msg.message_id

    user_data = await state.get_data()
    user_name_original = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å") 
    user_name_escaped = html.escape(user_name_original)
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt")
    analysis_type = user_data.get("analysis_type")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —î –≤ —Å—Ç–∞–Ω—ñ
    if not all([photo_file_id, vision_prompt, analysis_type, user_name_original]):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback_query.from_user.id}. –î–∞–Ω—ñ: {user_data}")
        error_text = f"–ü–æ–º–∏–ª–∫–∞, {user_name_escaped}: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–Ω–æ–≤—É."
        try:
            if cq_msg.reply_markup: 
                await bot.edit_message_reply_markup(chat_id=chat_id_from_cq, message_id=message_id_from_cq, reply_markup=None, business_connection_id=None)
            if cq_msg.photo and cq_msg.caption is not None:
                 await bot.edit_message_caption(chat_id=chat_id_from_cq, message_id=message_id_from_cq, caption=error_text, business_connection_id=None)
            else: 
                 await bot.send_message(chat_id_from_cq, error_text) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ, —è–∫—â–æ cq_msg –Ω–µ —Ñ–æ—Ç–æ
        except TelegramAPIError as e_clear:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–Ω–æ–≤–∏—Ç–∏/–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—Ç—Ä–∞—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è {user_name_original}: {e_clear}")
        await state.clear()
        return

    last_edit_time = 0 
    current_loop = asyncio.get_event_loop()

    async def _edit_caption_robust(target_chat_id: int, target_message_id: int, caption_text: str) -> bool:
        """–ù–∞–¥—ñ–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
        nonlocal last_edit_time
        min_interval = 1.0 # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º–∏
        now = current_loop.time()
        
        if now - last_edit_time < min_interval:
            await asyncio.sleep(min_interval - (now - last_edit_time))
        
        try:
            await bot.edit_message_caption(
                chat_id=target_chat_id, 
                message_id=target_message_id, 
                caption=caption_text,
                parse_mode=ParseMode.HTML, # –î–æ–∑–≤–æ–ª—è—î–º–æ HTML —É –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
                business_connection_id=None
            )
            last_edit_time = current_loop.time()
            return True
        except TelegramBadRequest as e: 
            if "message is not modified" in str(e).lower():
                logger.debug(f"–ü—ñ–¥–ø–∏—Å –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ (—Ç–æ–π —Å–∞–º–∏–π —Ç–µ–∫—Å—Ç): '{caption_text[:30]}...'")
                last_edit_time = current_loop.time() 
                return True 
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å –Ω–∞ '{caption_text[:30]}...': {e} (BadRequest)")
            return False
        except TelegramAPIError as e: 
            logger.error(f"API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å—É –Ω–∞ '{caption_text[:30]}...': {e}")
            return False

    # --- –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
    try:
        initial_processing_text = f"‚è≥ {random.choice(PROCESSING_MESSAGES)} {user_name_escaped}..."
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º –ø—ñ–¥–ø–∏—Å—É
        if cq_msg.reply_markup:
            await bot.edit_message_reply_markup(chat_id=chat_id_from_cq, message_id=message_id_from_cq, reply_markup=None, business_connection_id=None)
        
        if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, initial_processing_text):
             raise TelegramAPIError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å '–û–±—Ä–æ–±–ª—è—é...'.")
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ '–û–±—Ä–æ–±–ª—è—é...' –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è {user_name_original}: {e}")
        try: await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É.") # –í—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ —â–µ –Ω–µ –±—É–ª–æ
        except TelegramAPIError: pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ answer –≤–∂–µ –±—É–≤
        await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –Ω–∞–≤—ñ—Ç—å –ø–æ—á–∞—Ç–∏
        return

    full_analysis_text_parts: list[str] = []
    default_error_text = f"üòî –í–∏–±–∞—á, {user_name_escaped}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
    can_edit_cq_msg_flag = True 

    try:
        if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name_escaped}..."):
            can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ (–µ—Ç–∞–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è).")

        file_info = await bot.get_file(photo_file_id)
        if not file_info.file_path: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        downloaded_file_io = await bot.download_file(file_info.file_path)
        if downloaded_file_io is None: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Telegram.")
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"ü§ñ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª—ñ–∑ –¥–æ Vision AI, {user_name_escaped}..."):
                can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º –¥–æ Vision AI.")
            
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, vision_prompt)

            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ({analysis_type}) –¥–ª—è {user_name_original}.")
                if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"üìä –û–±—Ä–æ–±–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}..."):
                    can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø—ñ—Å–ª—è –∞–Ω–∞–ª—ñ–∑—É Vision AI.")

                if analysis_type == "profile":
                    structured_data_text = format_profile_result(user_name_original, analysis_result_json)
                    if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é, {user_name_escaped}..."):
                         can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é.")
                    description_text = await gpt_analyzer.get_profile_description(user_name_original, analysis_result_json)
                    full_analysis_text_parts.append(structured_data_text)
                    if description_text and description_text.strip():
                        full_analysis_text_parts.append(f"\n\n{html.escape(description_text)}")
                
                elif analysis_type == "player_stats":
                    if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"üìà –†–æ–∑—Ä–∞—Ö–æ–≤—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, {user_name_escaped}..."):
                        can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø–µ—Ä–µ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                    derived_stats = calculate_derived_stats(analysis_result_json)
                    data_for_description = {**analysis_result_json, 'derived_stats': derived_stats or {}}
                    
                    if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, f"üéôÔ∏è –°—Ç–≤–æ—Ä—é—é –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI, {user_name_escaped}..."):
                        can_edit_cq_msg_flag = False; raise ValueError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∫–æ–º–µ–Ω—Ç–∞—Ä—è.")
                    commentary_raw = await gpt_analyzer.get_player_stats_description(user_name_original, data_for_description)
                    
                    if commentary_raw and commentary_raw.strip():
                        is_error_like_comment = "<i>" in commentary_raw and "</i>" in commentary_raw or \
                                               "error" in commentary_raw.lower() or \
                                               "–ø–æ–º–∏–ª–∫–∞" in commentary_raw.lower()
                        if not is_error_like_comment:
                            full_analysis_text_parts.append(f"üéôÔ∏è <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI:</b>\n{html.escape(commentary_raw)}")
                        elif "<i>" in commentary_raw and "</i>" in commentary_raw : # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
                             full_analysis_text_parts.append(commentary_raw)
                    
                    unique_analytics_formatted = format_unique_analytics_text(user_name_original, derived_stats)
                    if unique_analytics_formatted and "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö" not in unique_analytics_formatted.lower() and "–Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏" not in unique_analytics_formatted.lower():
                        full_analysis_text_parts.append(f"\n\n{unique_analytics_formatted}")
                    
                    detailed_stats_formatted = format_detailed_stats_text(user_name_original, analysis_result_json)
                    full_analysis_text_parts.append(f"\n\n{detailed_stats_formatted}")
                else: 
                    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É: {analysis_type} –¥–ª—è {user_name_original}.")
                    full_analysis_text_parts.append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.")
            else: 
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ Vision API.') if isinstance(analysis_result_json, dict) else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞ –∞–±–æ –Ω–µ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Vision API ({analysis_type}) –¥–ª—è {user_name_original}: {error_msg}")
                error_text_for_user = f"üòî –í–∏–±–∞—á, {user_name_escaped}, –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
                if isinstance(analysis_result_json, dict) and (raw_snippet := analysis_result_json.get("raw_response") or analysis_result_json.get("details")):
                    error_text_for_user += f"\n–î–µ—Ç–∞–ª—ñ: {html.escape(str(raw_snippet)[:150])}..."
                full_analysis_text_parts.append(error_text_for_user)
    
    except TelegramAPIError as e: 
        logger.exception(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_name_original}: {e}")
        can_edit_cq_msg_flag = False
        if not full_analysis_text_parts: full_analysis_text_parts.append(f"–ü—Ä–æ–±–∞—á, {user_name_escaped}, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ Telegram –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.")
    except ValueError as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {user_name_original} (–º–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ): {e}")
        can_edit_cq_msg_flag = False 
        if not full_analysis_text_parts: full_analysis_text_parts.append(f"–ù–∞ –∂–∞–ª—å, {user_name_escaped}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç. {html.escape(str(e))}")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ({analysis_type}) –¥–ª—è {user_name_original}: {e}")
        can_edit_cq_msg_flag = False
        if not full_analysis_text_parts: full_analysis_text_parts.append(default_error_text)

    final_text_to_send = "\n".join(filter(None, full_analysis_text_parts)).strip()
    if not final_text_to_send: final_text_to_send = default_error_text 

    try:
        if can_edit_cq_msg_flag and cq_msg and cq_msg.photo: 
            if len(final_text_to_send) <= MAX_TELEGRAM_MESSAGE_LENGTH:
                if not await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, final_text_to_send):
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–ª—è {user_name_original}. –ù–∞–¥—Å–∏–ª–∞—é –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
                    await send_message_in_chunks(bot, chat_id_from_cq, final_text_to_send, ParseMode.HTML)
                else:
                     logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name_original} –í–Ü–î–†–ï–î–ê–ì–û–í–ê–ù–û –≤ –ø—ñ–¥–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ (ID: {message_id_from_cq}).")
            else: 
                logger.warning(f"–ü—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ ({analysis_type}) –¥–ª—è {user_name_original} –∑–∞–¥–æ–≤–≥–∏–π. –û–Ω–æ–≤–ª—é—é –ø—ñ–¥–ø–∏—Å —Ñ–æ—Ç–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—é —Ç–µ–∫—Å—Ç –æ–∫—Ä–µ–º–æ.")
                final_caption_for_photo = f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, {user_name_escaped}! –î–µ—Ç–∞–ª—ñ –Ω–∏–∂—á–µ üëá"
                await _edit_caption_robust(chat_id_from_cq, message_id_from_cq, final_caption_for_photo)
                await send_message_in_chunks(bot, chat_id_from_cq, final_text_to_send, ParseMode.HTML)
        else: 
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ID: {message_id_from_cq if cq_msg else 'N/A'}) –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–æ–Ω–æ –Ω–µ —î —Ñ–æ—Ç–æ. –ù–∞–¥—Å–∏–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({analysis_type}) –¥–ª—è {user_name_original} –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
            await send_message_in_chunks(bot, chat_id_from_cq, final_text_to_send, ParseMode.HTML)
    except Exception as e: 
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ ({analysis_type}) –¥–ª—è {user_name_original} (ID: {message_id_from_cq if cq_msg else 'N/A'}): {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–º.")
        try: 
            await send_message_in_chunks(bot, chat_id_from_cq, final_text_to_send, ParseMode.HTML)
        except Exception as send_err:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ({analysis_type}) –¥–ª—è {user_name_original} –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {send_err}")
    
    await state.clear() 

# --- –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò (–±–µ–∑ –∑–º—ñ–Ω) ---
async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    if not callback_query.message:
        logger.error("delete_bot_message_callback: callback_query.message is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    try:
        await callback_query.message.delete()
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state_str = await state.get_state()
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_data = await state.get_data()
            user_name_original = user_data.get("original_user_name", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {callback_query.from_user.id})")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {html.escape(user_name_original)}. –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ.")
            await state.clear()
        else:
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (ID: {callback_query.from_user.id}). –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state_str}")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {callback_query.from_user.id}): {e}")
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

async def cancel_analysis(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user: return 
    user_name_original = message.from_user.first_name
    user_name_escaped = html.escape(user_name_original)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {message.from_user.id}) —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis") 
    chat_id_for_cancel = user_data.get("chat_id_for_analysis", message.chat.id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π chat_id –∞–±–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if bot_message_id and chat_id_for_cancel: 
        try:
            await bot.delete_message(chat_id=chat_id_for_cancel, message_id=bot_message_id)
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped}.")
        except TelegramAPIError:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped}.")
    await state.clear()
    await message.reply(f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go –∞–±–æ —ñ–Ω—à—É.")

async def handle_wrong_input_for_analysis(message: Message, state: FSMContext, bot: Bot, cmd_go_handler_func) -> None:
    if not message.from_user: return
    user_name_original = message.from_user.first_name
    user_name_escaped = html.escape(user_name_original)
    user_id = message.from_user.id
    if message.text and message.text.lower() == "/cancel":
        await cancel_analysis(message, state, bot)
        return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        user_data = await state.get_data()
        bot_message_id = user_data.get("bot_message_id_for_analysis")
        chat_id_for_wrong_input = user_data.get("chat_id_for_analysis", message.chat.id)
        if bot_message_id and chat_id_for_wrong_input:
            try: await bot.delete_message(chat_id=chat_id_for_wrong_input, message_id=bot_message_id)
            except TelegramAPIError: pass 
        await state.clear()
        await cmd_go_handler_func(message, state) 
        return
    current_state_name = await state.get_state()
    user_data = await state.get_data()
    analysis_type_display = html.escape(user_data.get("analysis_type", "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É"))
    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {analysis_type_display} –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ '{html.escape(message.text or '–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')}' —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger.")
        await message.reply(f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ /cancel, {user_name_escaped}.")
    else: 
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É ({current_state_name}).")
        await message.reply(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.")

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None:
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω—å."""
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
    dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")
    cancel_states = [VisionAnalysisStates.awaiting_profile_screenshot, VisionAnalysisStates.awaiting_analysis_trigger]
    for cancel_state_item in cancel_states: 
        dp.message.register(cancel_analysis, cancel_state_item, Command("cancel"))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ cmd_go_handler_func
    # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —è–∫—â–æ cmd_go_handler_func –æ—á—ñ–∫—É—î –±—ñ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –Ω—ñ–∂ –Ω–∞–¥–∞—î —Ö–µ–Ω–¥–ª–µ—Ä
    async def wrong_input_wrapper(message: Message, state: FSMContext, bot_instance: Bot): # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ bot –Ω–∞ bot_instance
        await handle_wrong_input_for_analysis(message, state, bot_instance, cmd_go_handler_func)

    dp.message.register(wrong_input_wrapper, VisionAnalysisStates.awaiting_profile_screenshot)
    dp.message.register(wrong_input_wrapper, VisionAnalysisStates.awaiting_analysis_trigger)
    
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
