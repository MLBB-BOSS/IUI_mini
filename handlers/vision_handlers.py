import base64
import html
import logging
import re
from typing import Dict, Any, Optional, Union

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import OPENAI_API_KEY, logger
from services.openai_service import (
    MLBBChatGPT, 
    PROFILE_SCREENSHOT_PROMPT, 
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks


# === –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø ===

class AnalysisFormatter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É –∑ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é."""
    
    @staticmethod
    def _create_header_section(title: str, icon: str = "üìä") -> str:
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó."""
        return f"\n<b>{icon} {title}</b>\n" + "‚îÄ" * 30
    
    @staticmethod
    def _format_field(label: str, value: Any, icon: str = "‚Ä¢") -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –æ–∫—Ä–µ–º–µ –ø–æ–ª–µ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é."""
        if value is None or value == "":
            return f"  {icon} <b>{label}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>"
        
        display_value = str(value)
        if "‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower():
            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
        
        return f"  {icon} <b>{label}:</b> {html.escape(display_value)}"


# === –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ ===

async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /analyzeprofile. 
    –ó–∞–ø–∏—Ç—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    """
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzeprofile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return

    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    
    await state.update_data(
        analysis_type="profile",
        vision_prompt=PROFILE_SCREENSHOT_PROMPT,
        original_user_name=user_name_escaped
    )
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.",
        parse_mode=ParseMode.HTML
    )

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /analyzestats.
    –ó–∞–ø–∏—Ç—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    """
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzestats –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return

    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzestats.")
    
    await state.update_data(
        analysis_type="player_stats",
        vision_prompt=PLAYER_STATS_PROMPT,
        original_user_name=user_name_escaped
    )
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ—î—ó —ñ–≥—Ä–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–∑–≤–∏—á–∞–π —Ä–æ–∑–¥—ñ–ª \"Statistics\" -> \"All Seasons\" –∞–±–æ \"Current Season\").\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.",
        parse_mode=ParseMode.HTML
    )

# === –û–ë–†–û–ë–ö–ê –ù–ê–î–°–ò–õ–ê–ù–ù–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ ===

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É –∞–Ω–∞–ª—ñ–∑—É.
    –í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –ø—Ä–µ–≤—å—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    if not message.from_user or not message.chat:
        logger.error("handle_profile_screenshot: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π message.from_user –∞–±–æ message.chat")
        return

    user_data_state = await state.get_data()
    user_name_escaped = user_data_state.get("original_user_name", html.escape(message.from_user.first_name))
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ {user_name_escaped} (ID: {user_id}).")

    if not message.photo: 
        await message.answer(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_escaped}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return

    photo_file_id = message.photo[-1].file_id 

    # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await message.delete()
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} (ID: {user_id}) –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped}: {e}")

    await state.update_data(vision_photo_file_id=photo_file_id)

    caption_text = "–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ, –∞–±–æ ¬´üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏¬ª, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é."

    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])

    try:
        sent_message = await bot.send_photo( 
            chat_id=chat_id,
            photo=photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name_escaped} (ID: {user_id}) –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è {user_name_escaped}: {e}")
        await _send_error_message(bot, chat_id, user_name_escaped, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑")
        await state.clear()

# === –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ê–ù–ê–õ–Ü–ó–£ ===

def format_profile_result(user_name: str, data: Dict[str, Any], ai_comment: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é.
    
    Args:
        user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        data: –î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –≤—ñ–¥ –®–Ü
        ai_comment: –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ –®–Ü (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π HTML —Ç–µ–∫—Å—Ç
    """
    if not data:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}."

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏: 1. –ö–æ–º–µ–Ω—Ç–∞—Ä 2. –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ 3. –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    result_parts = []
    
    # 1. üéôÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI
    if ai_comment:
        result_parts.append(AnalysisFormatter._create_header_section("–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI", "üéôÔ∏è"))
        result_parts.append(f"<i>{html.escape(ai_comment)}</i>")
    
    # 2. üìà –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI
    result_parts.append(AnalysisFormatter._create_header_section("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI", "üìà"))
    analytics = _generate_profile_analytics(data)
    result_parts.append(analytics)
    
    # 3. üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è
    result_parts.append(AnalysisFormatter._create_header_section("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è", "üìä"))
    
    # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
    fields_translation = {
        "game_nickname": ("üéÆ –ù—ñ–∫–Ω–µ–π–º", "üéÆ"),
        "mlbb_id_server": ("üÜî ID (–°–µ—Ä–≤–µ—Ä)", "üÜî"), 
        "highest_rank_season": ("üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥", "üåü"),
        "matches_played": ("‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", "‚öîÔ∏è"),
        "likes_received": ("üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ", "üëç"),
        "location": ("üåç –õ–æ–∫–∞—Ü—ñ—è", "üåç"),
        "squad_name": ("üõ°Ô∏è –°–∫–≤–∞–¥", "üõ°Ô∏è")
    }
    
    has_data = False
    for key, (readable_name, icon) in fields_translation.items():
        value = data.get(key)
        if value is not None:
            result_parts.append(AnalysisFormatter._format_field(readable_name, value, icon))
            has_data = True
        else:
            result_parts.append(AnalysisFormatter._format_field(readable_name, None, icon))
    
    if not has_data and data.get("raw_response"):
        result_parts.append(f"\n<i>‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.</i>")
        result_parts.append(f"<code>{html.escape(str(data.get('raw_response'))[:200])}...</code>")
    elif not has_data:
        result_parts.append(f"\n<i>‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.</i>")
    
    return "\n".join(result_parts)

def format_player_stats_result(user_name: str, data: Dict[str, Any], ai_comment: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é.
    
    Args:
        user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        data: –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–¥ –®–Ü
        ai_comment: –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ –®–Ü (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π HTML —Ç–µ–∫—Å—Ç
    """
    if not data:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name}."

    result_parts = []
    
    # 1. üéôÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI
    if ai_comment:
        result_parts.append(AnalysisFormatter._create_header_section("–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI", "üéôÔ∏è"))
        result_parts.append(f"<i>{html.escape(ai_comment)}</i>")
    
    # 2. üìà –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI
    result_parts.append(AnalysisFormatter._create_header_section("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI", "üìà"))
    analytics = _generate_stats_analytics(data)
    result_parts.append(analytics)
    
    # 3. üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è
    result_parts.append(AnalysisFormatter._create_header_section(f"–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name}", "üìä"))
    
    stats_filter = data.get('stats_filter_type', 'N/A')
    result_parts.append(f"<b>üìã –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> {html.escape(str(stats_filter))}")
    
    # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    main_ind = data.get("main_indicators", {})
    if main_ind:
        result_parts.append(f"\n<b><u>‚ö° –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:</u></b>")
        result_parts.append(AnalysisFormatter._format_field("–ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", main_ind.get('matches_played'), "üéØ"))
        
        win_rate = main_ind.get('win_rate')
        if win_rate is not None:
            result_parts.append(AnalysisFormatter._format_field("–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥", f"{win_rate}%", "üèÜ"))
        else:
            result_parts.append(AnalysisFormatter._format_field("–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥", None, "üèÜ"))
            
        result_parts.append(AnalysisFormatter._format_field("MVP", main_ind.get('mvp_count'), "üëë"))
    
    # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–ª—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞)
    ach_left = data.get("achievements_left_column", {})
    if ach_left:
        result_parts.append(f"\n<b><u>üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–ö–æ–ª–æ–Ω–∫–∞ 1):</u></b>")
        achievements_left = [
            ("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏—Ö", ach_left.get('legendary_count'), "üî•"),
            ("–ú–∞–Ω—ñ—è–∫—ñ–≤", ach_left.get('maniac_count'), "üòà"),
            ("–ü–æ–¥–≤—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤", ach_left.get('double_kill_count'), "‚öîÔ∏è"),
            ("–ù–∞–π–±. –≤–±–∏–≤—Å—Ç–≤ –∑–∞ –≥—Ä—É", ach_left.get('most_kills_in_one_game'), "üíÄ"),
            ("–ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥", ach_left.get('longest_win_streak'), "üî•"),
            ("–ù–∞–π–±. —à–∫–æ–¥–∏/—Ö–≤", ach_left.get('highest_dmg_per_min'), "üí•"),
            ("–ù–∞–π–±. –∑–æ–ª–æ—Ç–∞/—Ö–≤", ach_left.get('highest_gold_per_min'), "üí∞")
        ]
        
        for label, value, icon in achievements_left:
            result_parts.append(AnalysisFormatter._format_field(label, value, icon))
    
    # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–ø—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞)
    ach_right = data.get("achievements_right_column", {})
    if ach_right:
        result_parts.append(f"\n<b><u>üéñÔ∏è –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–ö–æ–ª–æ–Ω–∫–∞ 2):</u></b>")
        achievements_right = [
            ("–î–∏–∫—É–Ω—Å—Ç–≤ (Savage)", ach_right.get('savage_count'), "üî•"),
            ("–ü–æ—Ç—Ä—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤", ach_right.get('triple_kill_count'), "‚öîÔ∏è"),
            ("MVP –ø—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ", ach_right.get('mvp_loss_count'), "üíî"),
            ("–ù–∞–π–±. –¥–æ–ø–æ–º–æ–≥–∏ –∑–∞ –≥—Ä—É", ach_right.get('most_assists_in_one_game'), "ü§ù"),
            ("–ü–µ—Ä—à–∞ –∫—Ä–æ–≤", ach_right.get('first_blood_count'), "ü©∏"),
            ("–ù–∞–π–±. –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —à–∫–æ–¥–∏/—Ö–≤", ach_right.get('highest_dmg_taken_per_min'), "üõ°Ô∏è")
        ]
        
        for label, value, icon in achievements_right:
            result_parts.append(AnalysisFormatter._format_field(label, value, icon))
    
    # –î–µ—Ç–∞–ª—ñ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å)
    details = data.get("details_panel", {})
    if details:
        result_parts.append(f"\n<b><u>üìã –î–µ—Ç–∞–ª—ñ (–ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å):</u></b>")
        details_fields = [
            ("KDA", details.get('kda_ratio'), "‚öîÔ∏è"),
            ("–£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö", f"{details.get('teamfight_participation_rate')}%" if details.get('teamfight_participation_rate') is not None else None, "ü§ù"),
            ("–°–µ—Ä. –∑–æ–ª–æ—Ç–æ/—Ö–≤", details.get('avg_gold_per_min'), "üí∞"),
            ("–°–µ—Ä. —à–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤", details.get('avg_hero_dmg_per_min'), "üí•"),
            ("–°–µ—Ä. —Å–º–µ—Ä—Ç–µ–π/–º–∞—Ç—á", details.get('avg_deaths_per_match'), "üíÄ"),
            ("–°–µ—Ä. —à–∫–æ–¥–∞ –≤–µ–∂–∞–º/–º–∞—Ç—á", details.get('avg_turret_dmg_per_match'), "üèóÔ∏è")
        ]
        
        for label, value, icon in details_fields:
            result_parts.append(AnalysisFormatter._format_field(label, value, icon))
    
    return "\n".join(result_parts)

def _generate_profile_analytics(data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    analytics = []
    
    # –ê–Ω–∞–ª—ñ–∑ —Ä–∞–Ω–≥—É
    rank = data.get("highest_rank_season")
    if rank:
        if "mythic" in str(rank).lower() or "–º—ñ—Ñ—ñ—á–Ω–∏–π" in str(rank).lower():
            analytics.append("üîÆ <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è")
        elif "legend" in str(rank).lower() or "–ª–µ–≥–µ–Ω–¥–∞" in str(rank).lower():
            analytics.append("‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> –°–∏–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –∑ —Ö–æ—Ä–æ—à–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏")
        elif "epic" in str(rank).lower() or "–µ–ø—ñ–∫" in str(rank).lower():
            analytics.append("üíé <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä–∞–≤–µ—Ü—å —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è")
        else:
            analytics.append("üå± <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä–∞–≤–µ—Ü—å, —â–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è")
    
    # –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    matches = data.get("matches_played")
    if matches:
        try:
            matches_num = int(str(matches).replace(',', '').replace(' ', ''))
            if matches_num > 5000:
                analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
            elif matches_num > 2000:
                analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
            elif matches_num > 1000:
                analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
            else:
                analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ü–æ–º—ñ—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
        except ValueError:
            analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –î–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    
    # –ê–Ω–∞–ª—ñ–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ
    likes = data.get("likes_received")
    if likes:
        try:
            likes_num = int(str(likes).replace(',', '').replace(' ', ''))
            if likes_num > 1000:
                analytics.append("üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –í–∏—Å–æ–∫–æ –æ—Ü—ñ–Ω–µ–Ω–∏–π —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é")
            elif likes_num > 500:
                analytics.append("üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –î–æ–±—Ä–µ –≤—ñ–¥–æ–º–∏–π –≤ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ")
            else:
                analytics.append("üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –ë—É–¥—É—î —Ä–µ–ø—É—Ç–∞—Ü—ñ—é")
        except ValueError:
            analytics.append("üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –î–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    
    if not analytics:
        analytics.append("üìà –ë–∞–∑–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö")
    
    return "\n".join(analytics)

def _generate_stats_analytics(data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    analytics = []
    
    main_ind = data.get("main_indicators", {})
    details = data.get("details_panel", {})
    
    # –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    win_rate = main_ind.get('win_rate')
    if win_rate is not None:
        try:
            wr_num = float(str(win_rate).replace('%', ''))
            if wr_num >= 70:
                analytics.append("üèÜ <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –í–∏–Ω—è—Ç–∫–æ–≤–∞ (—Ç–æ–ø-–≥—Ä–∞–≤–µ—Ü—å)")
            elif wr_num >= 60:
                analytics.append("üèÜ <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –í—ñ–¥–º—ñ–Ω–Ω–∞ (skilled)")
            elif wr_num >= 50:
                analytics.append("üèÜ <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –•–æ—Ä–æ—à–∞ (—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π)")
            else:
                analytics.append("üèÜ <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        except ValueError:
            analytics.append("üèÜ <b>–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –î–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    
    # –ê–Ω–∞–ª—ñ–∑ KDA
    kda = details.get('kda_ratio')
    if kda:
        try:
            kda_num = float(str(kda))
            if kda_num >= 3.0:
                analytics.append("‚öîÔ∏è <b>–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –±–æ—é:</b> –í—ñ–¥–º—ñ–Ω–Ω–∞ (–≤–∏—Å–æ–∫–∏–π KDA)")
            elif kda_num >= 2.0:
                analytics.append("‚öîÔ∏è <b>–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –±–æ—é:</b> –•–æ—Ä–æ—à–∞")
            elif kda_num >= 1.5:
                analytics.append("‚öîÔ∏è <b>–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –±–æ—é:</b> –°–µ—Ä–µ–¥–Ω—è")
            else:
                analytics.append("‚öîÔ∏è <b>–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –±–æ—é:</b> –ü–æ—Ç—Ä–µ–±—É—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
        except ValueError:
            analytics.append("‚öîÔ∏è <b>–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –±–æ—é:</b> –î–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    
    # –ê–Ω–∞–ª—ñ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏
    teamfight = details.get('teamfight_participation_rate')
    if teamfight is not None:
        try:
            tf_num = float(str(teamfight).replace('%', ''))
            if tf_num >= 75:
                analytics.append("ü§ù <b>–ö–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞:</b> –í—ñ–¥–º—ñ–Ω–Ω–∞ —É—á–∞—Å—Ç—å —É –±–æ—è—Ö")
            elif tf_num >= 60:
                analytics.append("ü§ù <b>–ö–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞:</b> –•–æ—Ä–æ—à–∞ —É—á–∞—Å—Ç—å")
            else:
                analytics.append("ü§ù <b>–ö–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞:</b> –ë—ñ–ª—å—à–µ —Ñ–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ñ")
        except ValueError:
            analytics.append("ü§ù <b>–ö–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞:</b> –î–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    
    if not analytics:
        analytics.append("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö")
    
    return "\n".join(analytics)

async def _send_error_message(bot: Bot, chat_id: int, user_name: str, error_text: str) -> None:
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏."""
    try:
        await bot.send_message(chat_id, f"{error_text}, {user_name}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name}: {e}")

# === –û–ë–†–û–ë–ö–ê –ö–û–õ–ë–ï–ö–Ü–í (–ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–û–ö) ===

async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None: 
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª—ñ–∑".
    –í–∏–∫–ª–∏–∫–∞—î Vision API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
    
    Args:
        callback_query: Callback –≤—ñ–¥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    if not callback_query.message or not callback_query.message.chat:
        logger.error("trigger_vision_analysis_callback: callback_query.message –∞–±–æ callback_query.message.chat is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.", show_alert=True)
        await state.clear()
        return

    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id 
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å") 
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt") 
    analysis_type = user_data.get("analysis_type")

    if not photo_file_id or not vision_prompt or not analysis_type:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}")
        await _handle_analysis_error(callback_query, bot, chat_id, message_id, user_name, 
                                   "–¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–ø–æ–≤–Ω—ñ")
        await state.clear()
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ UI - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
    try:
        if callback_query.message.caption: 
            await callback_query.message.edit_caption(
                caption=f"‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name}...",
                reply_markup=None 
            )
        else: 
            await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...") 
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name}: {e}")

    final_caption_text = f"–î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        file_info = await bot.get_file(photo_file_id) 
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")

        downloaded_file_io = await bot.download_file(file_info.file_path) 
        if downloaded_file_io is None: 
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –®–Ü –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer: 
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, vision_prompt)

            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ({analysis_type}) –¥–ª—è {user_name}")
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ –®–Ü
                ai_comment = None
                if analysis_type == "profile":
                    ai_comment = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
                    final_caption_text = format_profile_result(user_name, analysis_result_json, ai_comment)
                elif analysis_type == "player_stats":
                    # –ü–æ–∫–∏ —â–æ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
                    final_caption_text = format_player_stats_result(user_name, analysis_result_json, ai_comment)
                else:
                    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É: {analysis_type} –¥–ª—è {user_name}")
                    final_caption_text = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É, {user_name}."

            else:
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É.') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name}: {error_msg}")
                final_caption_text = await _format_error_response(user_name, error_msg, analysis_result_json)

    except TelegramAPIError as e:
        logger.exception(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–ü—Ä–æ–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ Telegram."
    except ValueError as e: 
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–ù–∞ –∂–∞–ª—å, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞."
    except Exception as e: 
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ ({analysis_type}) –¥–ª—è {user_name}: {e}")

    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await _display_analysis_result(bot, chat_id, message_id, final_caption_text, user_name)
    await state.clear()

async def _handle_analysis_error(callback_query: CallbackQuery, bot: Bot, chat_id: int, 
                               message_id: int, user_name: str, error_reason: str) -> None:
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –∞–Ω–∞–ª—ñ–∑—É."""
    try:
        if callback_query.message and callback_query.message.caption:
            await callback_query.message.edit_caption(
                caption=f"–ü–æ–º–∏–ª–∫–∞, {user_name}: {error_reason}. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑."
            )
        else:
            await bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞, {user_name}: {error_reason}. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑.")
    except TelegramAPIError:
        pass

async def _format_error_response(user_name: str, error_msg: str, analysis_result: Optional[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–Ω–∞–ª—ñ–∑—É."""
    base_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
    
    if analysis_result and analysis_result.get("raw_response"):
        base_text += f"\n–î–µ—Ç–∞–ª—ñ –≤—ñ–¥ –®–Ü: {html.escape(str(analysis_result.get('raw_response'))[:150])}..."
    elif analysis_result and analysis_result.get("details"):
        base_text += f"\n–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {html.escape(str(analysis_result.get('details'))[:150])}..."
    
    return base_text

async def _display_analysis_result(bot: Bot, chat_id: int, message_id: int, 
                                 result_text: str, user_name: str) -> None:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ."""
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_name}: {e}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É
        if len(result_text) > 1024:  # Telegram –ª—ñ–º—ñ—Ç –Ω–∞ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ
            logger.warning(f"–ü—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è {user_name} –∑–∞–¥–æ–≤–≥–∏–π ({len(result_text)} —Å–∏–º–≤–æ–ª—ñ–≤).")
            await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption="")
            await send_message_in_chunks(bot, chat_id, result_text, ParseMode.HTML) 
        else:
            await bot.edit_message_caption( 
                chat_id=chat_id,
                message_id=message_id,
                caption=result_text,
                parse_mode=ParseMode.HTML
            )
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ.")
        
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è {user_name}: {e}")
        try:
            await send_message_in_chunks(bot, chat_id, result_text, ParseMode.HTML) 
        except Exception as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}: {send_err}")
            await _send_error_message(bot, chat_id, user_name, "—Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É")

async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    """ 
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏" –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–ø—Ä–µ–≤'—é —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.
    –í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –æ—á–∏—â–∞—î —Å—Ç–∞–Ω.
    
    Args:
        callback_query: Callback –≤—ñ–¥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if not callback_query.message:
        logger.error("delete_bot_message_callback: callback_query.message is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
        
    try:
        await callback_query.message.delete()
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        
        current_state_str = await state.get_state()
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_data = await state.get_data()
            user_name = user_data.get("original_user_name", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {callback_query.from_user.id})")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name}. –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ.")
            await state.clear()
        else:
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (ID: {callback_query.from_user.id})")

    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

# === –û–ë–†–û–ë–ö–ê –°–ö–ê–°–£–í–ê–ù–ù–Ø –¢–ê –ù–ï–ö–û–†–ï–ö–¢–ù–û–ì–û –í–í–ï–î–ï–ù–ù–Ø ===

async def cancel_analysis(message: Message, state: FSMContext, bot: Bot) -> None: 
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –ø—ñ–¥ —á–∞—Å –±—É–¥—å-—è–∫–æ–≥–æ –µ—Ç–∞–ø—É –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é /cancel
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    if not message.from_user: 
        return

    user_name_escaped = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {message.from_user.id}) —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    
    if bot_message_id and message.chat: 
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id) 
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped}")
        except TelegramAPIError: 
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped}")

    await state.clear()
    await message.reply(
        f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. "
        "–¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go –∞–±–æ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞.",
        parse_mode=ParseMode.HTML
    )

async def handle_wrong_input_for_analysis(message: Message, state: FSMContext, bot: Bot, cmd_go_handler_func) -> None: 
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –∞–±–æ —Ç—Ä–∏–≥–µ—Ä–∞ –∞–Ω–∞–ª—ñ–∑—É.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        cmd_go_handler_func: –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /go
    """
    if not message.from_user: 
        return

    user_name_escaped = html.escape(message.from_user.first_name)
    user_id = message.from_user.id

    # –û–±—Ä–æ–±–∫–∞ /cancel
    if message.text and message.text.lower() == "/cancel":
        await cancel_analysis(message, state, bot) 
        return

    # –û–±—Ä–æ–±–∫–∞ /go - —Å–∫–∞—Å–æ–≤—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ /go
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É.")
        await _cleanup_analysis_state(state, bot, message.chat.id if message.chat else None)
        await cmd_go_handler_func(message, state)
        return 

    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –≤–≤–æ–¥—ñ–≤
    current_state_name = await state.get_state()
    user_data = await state.get_data()
    analysis_type_display = user_data.get("analysis_type", "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É")

    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot")
        await message.reply(
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {analysis_type_display} "
            "–∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
            parse_mode=ParseMode.HTML
        )
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger")
        await message.reply(
            f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ /cancel, {user_name_escaped}.",
            parse_mode=ParseMode.HTML
        )
    else: 
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É")
        await message.reply(
            f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.",
            parse_mode=ParseMode.HTML
        )

async def _cleanup_analysis_state(state: FSMContext, bot: Bot, chat_id: Optional[int]) -> None:
    """–û—á–∏—â–∞—î —Å—Ç–∞–Ω –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –≤–∏–¥–∞–ª—è—î –ø–æ–≤'—è–∑–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    
    if bot_message_id and chat_id:
        try: 
            await bot.delete_message(chat_id=chat_id, message_id=bot_message_id) 
        except TelegramAPIError: 
            pass
    
    await state.clear()

# === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ===

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None: 
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω—å.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
        cmd_go_handler_func: –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /go
    """
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))

    # –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    
    # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(
        trigger_vision_analysis_callback, 
        F.data == "trigger_vision_analysis", 
        VisionAnalysisStates.awaiting_analysis_trigger
    )
    dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
    cancel_states = [
        VisionAnalysisStates.awaiting_profile_screenshot,
        VisionAnalysisStates.awaiting_analysis_trigger
    ]
    for cancel_state in cancel_states:
        dp.message.register(cancel_analysis, cancel_state, Command("cancel"))
    
    # –û–±—Ä–æ–±–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É
    wrong_input_handler_with_go = lambda message, state, bot: handle_wrong_input_for_analysis(
        message, state, bot, cmd_go_handler_func
    )
    
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_profile_screenshot)
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_analysis_trigger)
    
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")