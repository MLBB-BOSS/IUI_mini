import base64
import html
import logging
import re
from typing import Dict, Any, Optional, Union

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import OPENAI_API_KEY, logger
from services.openai_service import (
    MLBBChatGPT,
    PROFILE_SCREENSHOT_PROMPT,
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks


# === –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ë–ï–ó–ü–ï–ß–ù–û–ì–û –û–¢–†–ò–ú–ê–ù–ù–Ø –ß–ò–°–ï–õ ===
def _safe_get_float(data: Optional[Dict[str, Any]], key: str) -> Optional[float]:
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —É float."""
    if data is None:
        return None
    value = data.get(key)
    if value is None:
        return None
    try:
        return float(value)
    except (ValueError, TypeError):
        return None

def _safe_get_int(data: Optional[Dict[str, Any]], key: str) -> Optional[int]:
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —É int."""
    if data is None:
        return None
    value = data.get(key)
    if value is None:
        return None
    try:
        return int(float(value)) # –°–ø–æ—á–∞—Ç–∫—É float –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–∏—Å–µ–ª —Ç–∏–ø—É "2.0"
    except (ValueError, TypeError):
        return None

# === –†–û–ó–†–ê–•–£–ù–û–ö –£–ù–Ü–ö–ê–õ–¨–ù–ò–• –°–¢–ê–¢–ò–°–¢–ò–ö ===
def calculate_derived_stats(stats_data: Dict[str, Any]) -> Dict[str, Union[str, float, int, None]]:
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Vision API.
    """
    derived: Dict[str, Union[str, float, int, None]] = {}
    
    main_ind = stats_data.get("main_indicators", {})
    details_p = stats_data.get("details_panel", {})
    ach_left = stats_data.get("achievements_left_column", {})
    ach_right = stats_data.get("achievements_right_column", {})

    matches_played = _safe_get_int(main_ind, 'matches_played')
    win_rate_percent = _safe_get_float(main_ind, 'win_rate')
    mvp_count = _safe_get_int(main_ind, 'mvp_count')
    
    savage_count = _safe_get_int(ach_right, 'savage_count')
    legendary_count = _safe_get_int(ach_left, 'legendary_count')
    mvp_loss_count = _safe_get_int(ach_right, 'mvp_loss_count')
    
    kda_ratio = _safe_get_float(details_p, 'kda_ratio')
    avg_deaths_per_match = _safe_get_float(details_p, 'avg_deaths_per_match')
    avg_hero_dmg_per_min = _safe_get_float(details_p, 'avg_hero_dmg_per_min')
    avg_gold_per_min = _safe_get_float(details_p, 'avg_gold_per_min')

    # 1. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥/–ø–æ—Ä–∞–∑–æ–∫
    if matches_played is not None and win_rate_percent is not None:
        total_wins = int(matches_played * (win_rate_percent / 100.0))
        derived['total_wins'] = total_wins
        derived['total_losses'] = matches_played - total_wins
    else:
        derived['total_wins'] = None
        derived['total_losses'] = None

    # 2. MVP –†–µ–π—Ç–∏–Ω–≥ (%)
    if mvp_count is not None and matches_played is not None and matches_played > 0:
        derived['mvp_rate_percent'] = round((mvp_count / matches_played) * 100, 2)
    else:
        derived['mvp_rate_percent'] = None

    # 3. –ß–∞—Å—Ç–æ—Ç–∞ Savage (–Ω–∞ 1000 –º–∞—Ç—á—ñ–≤)
    if savage_count is not None and matches_played is not None and matches_played > 0:
        derived['savage_frequency_per_1000_matches'] = round((savage_count / matches_played) * 1000, 2)
    else:
        derived['savage_frequency_per_1000_matches'] = None
        
    # 4. –ß–∞—Å—Ç–æ—Ç–∞ Legendary (–Ω–∞ 100 –º–∞—Ç—á—ñ–≤)
    if legendary_count is not None and matches_played is not None and matches_played > 0:
        derived['legendary_frequency_per_100_matches'] = round((legendary_count / matches_played) * 100, 2)
    else:
        derived['legendary_frequency_per_100_matches'] = None

    # 5. –í—ñ–¥—Å–æ—Ç–æ–∫ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö (MVP Win Share)
    if mvp_count is not None and mvp_count > 0 and mvp_loss_count is not None:
        mvp_wins = mvp_count - mvp_loss_count
        if mvp_wins >= 0: # mvp_loss_count –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ mvp_count –ª–æ–≥—ñ—á–Ω–æ
            derived['mvp_win_share_percent'] = round((mvp_wins / mvp_count) * 100, 2)
        else: # –ù–∞ –≤–∏–ø–∞–¥–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            derived['mvp_win_share_percent'] = 0.0 
    else:
        derived['mvp_win_share_percent'] = None
        
    # 6. –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ (–®–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤ / –ó–æ–ª–æ—Ç–æ/—Ö–≤)
    if avg_hero_dmg_per_min is not None and avg_gold_per_min is not None and avg_gold_per_min > 0:
        derived['damage_per_gold_ratio'] = round(avg_hero_dmg_per_min / avg_gold_per_min, 2)
    else:
        derived['damage_per_gold_ratio'] = None
        
    # 7. –°–µ—Ä–µ–¥–Ω—ñ–π "–Ü–º–ø–∞–∫—Ç" (–í–±–∏–≤—Å—Ç–≤–∞ + –î–æ–ø–æ–º–æ–≥–∏) –∑–∞ –º–∞—Ç—á
    if kda_ratio is not None and avg_deaths_per_match is not None:
        # –Ø–∫—â–æ KDA "Perfect" (—Å–º–µ—Ä—Ç–µ–π 0), —Ç–æ —Ü–µ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–æ–≤—Å—ñ–º –∫–æ—Ä–µ–∫—Ç–Ω–∏–π.
        # –ì—Ä–∞ –∑–∞–∑–≤–∏—á–∞–π –ø–æ–∫–∞–∑—É—î KDA —è–∫ (K+A)/max(1,D).
        # –Ø–∫—â–æ avg_deaths_per_match == 0, –∞–ª–µ KDA —î, —Ç–æ K+A = KDA (—è–∫—â–æ –≥—Ä–∞ —Ä–∞—Ö—É—î KDA/1).
        # –Ø–∫—â–æ avg_deaths_per_match > 0:
        if avg_deaths_per_match > 0:
            derived['avg_impact_score_per_match'] = round(kda_ratio * avg_deaths_per_match, 2)
        elif kda_ratio is not None: # –Ø–∫—â–æ —Å–º–µ—Ä—Ç–µ–π 0, –∞–ª–µ KDA —î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, KDA=10 –æ–∑–Ω–∞—á–∞—î 10 K+A)
             derived['avg_impact_score_per_match'] = round(kda_ratio, 2) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ KDA —Ü–µ K+A —è–∫—â–æ —Å–º–µ—Ä—Ç–µ–π 0
        else:
            derived['avg_impact_score_per_match'] = None
    else:
        derived['avg_impact_score_per_match'] = None
        
    logger.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {derived}")
    return derived

# === –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
# ... (–∫–æ–¥ cmd_analyze_profile, cmd_analyze_player_stats, handle_profile_screenshot –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzeprofile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    await state.update_data(
        analysis_type="profile",
        vision_prompt=PROFILE_SCREENSHOT_PROMPT,
        original_user_name=user_name_escaped
    )
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzestats –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzestats.")
    await state.update_data(
        analysis_type="player_stats",
        vision_prompt=PLAYER_STATS_PROMPT,
        original_user_name=user_name_escaped
    )
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ—î—ó —ñ–≥—Ä–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–∑–≤–∏—á–∞–π —Ä–æ–∑–¥—ñ–ª \"Statistics\" -> \"All Seasons\" –∞–±–æ \"Current Season\").\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user or not message.chat:
        logger.error("handle_profile_screenshot: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π message.from_user –∞–±–æ message.chat")
        return
    user_data_state = await state.get_data()
    user_name_escaped = user_data_state.get("original_user_name", html.escape(message.from_user.first_name if message.from_user else "–ì—Ä–∞–≤–µ—Ü—å"))
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ {user_name_escaped} (ID: {user_id}).")
    if not message.photo:
        await message.answer(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_escaped}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return
    photo_file_id = message.photo[-1].file_id
    try:
        await message.delete()
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} (ID: {user_id}) –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} (ID: {user_id}) –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º: {e}")
    await state.update_data(vision_photo_file_id=photo_file_id)
    caption_text = "–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ, –∞–±–æ ¬´üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏¬ª, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])
    try:
        sent_message = await bot.send_photo(
            chat_id=chat_id,
            photo=photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name_escaped} (ID: {user_id}) –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏. –ù–æ–≤–∏–π state: awaiting_analysis_trigger")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name_escaped} (ID: {user_id}): {e}")
        try:
            await bot.send_message(chat_id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑, {user_name_escaped}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except TelegramAPIError as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name_escaped} (ID: {user_id}): {send_err}")
        await state.clear()

# === –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ê–ù–ê–õ–Ü–ó–£ ===

def format_profile_result(user_name: str, data: Dict[str, Any]) -> str:
    # ... (–∫–æ–¥ format_profile_result –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    if not data:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}."
    response_parts = [f"<b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, {user_name}:</b>"]
    fields_translation = {
        "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
        "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)",
        "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
        "location": "üåç –õ–æ–∫–∞—Ü—ñ—è", "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥"
    }
    has_data = False
    for key, readable_name in fields_translation.items():
        value = data.get(key)
        if value is not None:
            display_value = str(value)
            if key == "highest_rank_season" and ("‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower() or "—Å–ª–∞–≤–∞" in display_value.lower()):
                if "‚òÖ" not in display_value:
                        display_value = display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ")
                display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value)
            response_parts.append(f"<b>{readable_name}:</b> {html.escape(display_value)}")
            has_data = True
        else:
            response_parts.append(f"<b>{readable_name}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>")
    if not has_data and data.get("raw_response"):
        response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.</i>\n–î–µ—Ç–∞–ª—ñ –≤—ñ–¥ –®–Ü: ...{html.escape(str(data.get('raw_response',''))[-100:])}")
    elif not has_data:
        response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.</i>")
    return "\n".join(response_parts)


def format_player_stats_result(user_name: str, data: Dict[str, Any], derived_data: Optional[Dict[str, Any]] = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π HTML."""
    if not data:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name}."
    
    parts = [f"<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name} ({html.escape(str(data.get('stats_filter_type', 'N/A')))}):</b>"]

    main_ind = data.get("main_indicators", {})
    parts.append("\n<b><u>–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:</u></b>")
    parts.append(f"  ‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: <b>{main_ind.get('matches_played', 'N/A')}</b>")
    parts.append(f"  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: <b>{main_ind.get('win_rate', 'N/A')}%</b>" if main_ind.get('win_rate') is not None else "  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: N/A")
    parts.append(f"  ‚Ä¢ MVP: <b>{main_ind.get('mvp_count', 'N/A')}</b>")

    ach_left = data.get("achievements_left_column", {})
    parts.append("\n<b><u>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 1):</u></b>")
    parts.append(f"  ‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏—Ö: {ach_left.get('legendary_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ú–∞–Ω—ñ—è–∫—ñ–≤: {ach_left.get('maniac_count', 'N/A')}")
    # ... (—ñ–Ω—à—ñ —Ä—è–¥–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ–ª–æ–Ω–∫–∏ 1 –±–µ–∑ –∑–º—ñ–Ω) ...
    parts.append(f"  ‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {ach_left.get('double_kill_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –≤–±–∏–≤—Å—Ç–≤ –∑–∞ –≥—Ä—É: {ach_left.get('most_kills_in_one_game', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {ach_left.get('longest_win_streak', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. —à–∫–æ–¥–∏/—Ö–≤: {ach_left.get('highest_dmg_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –∑–æ–ª–æ—Ç–∞/—Ö–≤: {ach_left.get('highest_gold_per_min', 'N/A')}")


    ach_right = data.get("achievements_right_column", {})
    parts.append("\n<b><u>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 2):</u></b>")
    parts.append(f"  ‚Ä¢ –î–∏–∫—É–Ω—Å—Ç–≤ (Savage): {ach_right.get('savage_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ü–æ—Ç—Ä—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {ach_right.get('triple_kill_count', 'N/A')}")
    # ... (—ñ–Ω—à—ñ —Ä—è–¥–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ–ª–æ–Ω–∫–∏ 2 –±–µ–∑ –∑–º—ñ–Ω) ...
    parts.append(f"  ‚Ä¢ MVP –ø—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ: {ach_right.get('mvp_loss_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –¥–æ–ø–æ–º–æ–≥–∏ –∑–∞ –≥—Ä—É: {ach_right.get('most_assists_in_one_game', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ü–µ—Ä—à–∞ –∫—Ä–æ–≤: {ach_right.get('first_blood_count', 'N/A')}")
    parts.append(f"  ‚Ä¢ –ù–∞–π–±. –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —à–∫–æ–¥–∏/—Ö–≤: {ach_right.get('highest_dmg_taken_per_min', 'N/A')}")

    details = data.get("details_panel", {})
    parts.append("\n<b><u>–î–µ—Ç–∞–ª—ñ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å):</u></b>")
    parts.append(f"  ‚Ä¢ KDA: <b>{details.get('kda_ratio', 'N/A')}</b>")
    parts.append(f"  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: <b>{details.get('teamfight_participation_rate', 'N/A')}%</b>" if details.get('teamfight_participation_rate') is not None else "  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: N/A")
    # ... (—ñ–Ω—à—ñ —Ä—è–¥–∫–∏ –¥–µ—Ç–∞–ª–µ–π –±–µ–∑ –∑–º—ñ–Ω) ...
    parts.append(f"  ‚Ä¢ –°–µ—Ä. –∑–æ–ª–æ—Ç–æ/—Ö–≤: {details.get('avg_gold_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤: {details.get('avg_hero_dmg_per_min', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —Å–º–µ—Ä—Ç–µ–π/–º–∞—Ç—á: {details.get('avg_deaths_per_match', 'N/A')}")
    parts.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≤–µ–∂–∞–º/–º–∞—Ç—á: {details.get('avg_turret_dmg_per_match', 'N/A')}")

    # === –ù–û–í–ò–ô –ë–õ–û–ö: –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI ===
    if derived_data:
        parts.append("\n\n<b>üìà <u>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI:</u></b>")
        
        if derived_data.get('total_wins') is not None:
            parts.append(f"  üëë –ü–µ—Ä–µ–º–æ–≥/–ü–æ—Ä–∞–∑–æ–∫: <b>{derived_data['total_wins']} / {derived_data.get('total_losses', 'N/A')}</b>")
        if derived_data.get('mvp_rate_percent') is not None:
            parts.append(f"  ‚≠ê MVP –†–µ–π—Ç–∏–Ω–≥: <b>{derived_data['mvp_rate_percent']:.2f}%</b> –º–∞—Ç—á—ñ–≤")
        if derived_data.get('mvp_win_share_percent') is not None:
            parts.append(f"  üèÜ –ß–∞—Å—Ç–∫–∞ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö: <b>{derived_data['mvp_win_share_percent']:.2f}%</b>")
        if derived_data.get('savage_frequency_per_1000_matches') is not None:
            parts.append(f"  üî• –ß–∞—Å—Ç–æ—Ç–∞ Savage: ~<b>{derived_data['savage_frequency_per_1000_matches']:.2f}</b> –Ω–∞ 1000 –º–∞—Ç—á—ñ–≤")
        if derived_data.get('legendary_frequency_per_100_matches') is not None:
            parts.append(f"  ‚ú® –ß–∞—Å—Ç–æ—Ç–∞ Legendary: ~<b>{derived_data['legendary_frequency_per_100_matches']:.2f}</b> –Ω–∞ 100 –º–∞—Ç—á—ñ–≤")
        if derived_data.get('damage_per_gold_ratio') is not None:
            parts.append(f"  ‚öîÔ∏è –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞: <b>{derived_data['damage_per_gold_ratio']:.2f}</b> —à–∫–æ–¥–∏/—Ö–≤ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ/—Ö–≤")
        if derived_data.get('avg_impact_score_per_match') is not None:
            parts.append(f"  üéØ –°–µ—Ä. –í–ø–ª–∏–≤ (K+A)/–º–∞—Ç—á: ~<b>{derived_data['avg_impact_score_per_match']:.2f}</b>")
    # === –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–ì–û –ë–õ–û–ö–£ ===
            
    return "\n".join(parts)

# === –û–ë–†–û–ë–ö–ê –ö–û–õ–ë–ï–ö–Ü–í (–ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–û–ö) ===
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    # ... (–ø–æ—á–∞—Ç–æ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω) ...
    if not callback_query.message or not callback_query.message.chat:
        logger.error("trigger_vision_analysis_callback: callback_query.message –∞–±–æ callback_query.message.chat is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.", show_alert=True)
        await state.clear()
        return

    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt")
    analysis_type = user_data.get("analysis_type")

    if not photo_file_id or not vision_prompt or not analysis_type:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}). "
                     f"photo_file_id: {'—î' if photo_file_id else '–Ω–µ–º–∞—î'}, "
                     f"vision_prompt: {'—î' if vision_prompt else '–Ω–µ–º–∞—î'}, "
                     f"analysis_type: {analysis_type}")
        try:
            if callback_query.message and callback_query.message.caption:
                await callback_query.message.edit_caption(caption=f"–ü–æ–º–∏–ª–∫–∞, {user_name}: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–Ω–æ–≤—É.")
            else: 
                await bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞, {user_name}: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–Ω–æ–≤—É, –≤–∏–∫–ª–∏–∫–∞–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.")
        except TelegramAPIError: pass
        await state.clear()
        return

    try:
        if callback_query.message.caption:
            await callback_query.message.edit_caption(
                caption=f"‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name}...",
                reply_markup=None
            )
        else: 
             await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")

    final_caption_text = f"–î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
    description_text = "" 

    try:
        file_info = await bot.get_file(photo_file_id)
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        downloaded_file_io = await bot.download_file(file_info.file_path)
        if downloaded_file_io is None:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (download_file –ø–æ–≤–µ—Ä–Ω—É–≤ None).")
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, vision_prompt)

            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {str(analysis_result_json)[:150]}...")
                
                derived_stats: Optional[Dict[str, Any]] = None # –î–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if analysis_type == "player_stats": # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è /analyzestats
                    derived_stats = calculate_derived_stats(analysis_result_json)

                if analysis_type == "profile":
                    structured_data_text = format_profile_result(user_name, analysis_result_json)
                    description_text = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
                    final_caption_text = f"{structured_data_text}\n\n{html.escape(description_text)}"
                
                elif analysis_type == "player_stats":
                    # –ü–µ—Ä–µ–¥–∞—î–º–æ derived_stats —É —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                    structured_data_text = format_player_stats_result(user_name, analysis_result_json, derived_stats)
                    
                    # –î–æ–¥–∞—î–º–æ derived_stats –¥–æ analysis_result_json –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ get_player_stats_description,
                    # —â–æ–± –ø—Ä–æ–º–ø—Ç –º—ñ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –Ω–æ–≤—ñ –¥–∞–Ω—ñ.
                    # –ö—Ä–∞—â–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ø—ñ—é, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Vision.
                    data_for_description = analysis_result_json.copy()
                    if derived_stats: # –î–æ–¥–∞—î–º–æ, —è–∫—â–æ –≤–æ–Ω–∏ —î
                        data_for_description['derived_stats'] = derived_stats 

                    logger.info(f"–ü–æ—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name} (–∑ derived_stats)...")
                    description_text = await gpt_analyzer.get_player_stats_description(user_name, data_for_description)
                    
                    if "<i>" in description_text and "</i>" in description_text: 
                        logger.warning(f"–û–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name} –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É/–∑–∞–≥–ª—É—à–∫—É: {description_text}")
                        final_caption_text = f"{structured_data_text}\n\n{description_text}" 
                    else:
                        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name}.")
                        final_caption_text = f"{structured_data_text}\n\nüéôÔ∏è <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI:</b>\n{html.escape(description_text)}"
                else:
                    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É: {analysis_type} –¥–ª—è {user_name} (ID: {callback_query.from_user.id})")
                    final_caption_text = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É, {user_name}."

            # ... (—Ä–µ—à—Ç–∞ –±–ª–æ–∫—É try...except —Ç–∞ finally –±–µ–∑ –∑–º—ñ–Ω) ...
            else: # –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Vision API
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É.') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {error_msg}. –î–µ—Ç–∞–ª—ñ: {analysis_result_json.get('details') if analysis_result_json else 'N/A'}")
                final_caption_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
                raw_resp_snippet = ""
                if analysis_result_json:
                    if analysis_result_json.get("raw_response"):
                        raw_resp_snippet = html.escape(str(analysis_result_json.get('raw_response'))[:150])
                    elif analysis_result_json.get("details"):
                        raw_resp_snippet = html.escape(str(analysis_result_json.get('details'))[:150])
                if raw_resp_snippet:
                     final_caption_text += f"\n–î–µ—Ç–∞–ª—ñ: {raw_resp_snippet}..."
    
    except TelegramAPIError as e:
        logger.exception(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")
        final_caption_text = f"–ü—Ä–æ–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ Telegram."
    except ValueError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")
        final_caption_text = f"–ù–∞ –∂–∞–ª—å, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞."
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")

    try:
        if callback_query.message:
            try:
                if callback_query.message.reply_markup:
                    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
            except TelegramAPIError as e:
                 logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é (ID: {message_id}) –¥–ª—è {user_name}: {e}")

            if callback_query.message.photo and len(final_caption_text) <= 1024:
                await bot.edit_message_caption(
                    chat_id=chat_id, message_id=message_id,
                    caption=final_caption_text, parse_mode=ParseMode.HTML
                )
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}) –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ.")
            elif callback_query.message.photo and len(final_caption_text) > 1024:
                 logger.warning(f"–ü—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è {user_name} –∑–∞–¥–æ–≤–≥–∏–π ({len(final_caption_text)} —Å–∏–º–≤–æ–ª—ñ–≤). –†–µ–¥–∞–≥—É—é —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É —ñ –Ω–∞–¥—Å–∏–ª–∞—é —Ç–µ–∫—Å—Ç –æ–∫—Ä–µ–º–æ.")
                 await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption="")
                 await send_message_in_chunks(bot, chat_id, final_caption_text, ParseMode.HTML)
                 logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
            else:
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ID: {message_id}) –Ω–µ —î —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –∞–±–æ –ø—ñ–¥–ø–∏—Å –∑–∞–¥–æ–≤–≥–∏–π. –ù–∞–¥—Å–∏–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
                await send_message_in_chunks(bot, chat_id, final_caption_text, ParseMode.HTML)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —è–∫ –Ω–æ–≤–µ.")
        try:
            await send_message_in_chunks(bot, chat_id, final_caption_text, ParseMode.HTML)
        except Exception as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {send_err}")
            if callback_query.message:
                try:
                    await bot.send_message(chat_id, f"–í–∏–±–∞—á—Ç–µ, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                except Exception as final_fallback_err:
                     logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}: {final_fallback_err}")
    await state.clear()

# ... (—Ä–µ—à—Ç–∞ —Ñ–∞–π–ª—É: delete_bot_message_callback, cancel_analysis, handle_wrong_input_for_analysis, register_vision_handlers - –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    if not callback_query.message:
        logger.error("delete_bot_message_callback: callback_query.message is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    try:
        await callback_query.message.delete()
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state_str = await state.get_state()
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_data = await state.get_data()
            user_name = user_data.get("original_user_name", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {callback_query.from_user.id})")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name}. –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ.")
            await state.clear()
        else:
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (ID: {callback_query.from_user.id}). –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state_str}")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {callback_query.from_user.id}): {e}")
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

async def cancel_analysis(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {message.from_user.id}) —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id and message.chat:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped} (ID: {message.from_user.id}).")
        except TelegramAPIError:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped} (ID: {message.from_user.id}).")
    await state.clear()
    await message.reply(f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go –∞–±–æ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª—ñ–∑—É.")

async def handle_wrong_input_for_analysis(message: Message, state: FSMContext, bot: Bot, cmd_go_handler_func) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name)
    user_id = message.from_user.id
    if message.text and message.text.lower() == "/cancel":
        await cancel_analysis(message, state, bot)
        return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        user_data = await state.get_data()
        bot_message_id = user_data.get("bot_message_id_for_analysis")
        if bot_message_id and message.chat:
            try: await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
            except TelegramAPIError: pass
        await state.clear()
        await cmd_go_handler_func(message, state)
        return
    current_state_name = await state.get_state()
    user_data = await state.get_data()
    analysis_type_display = user_data.get("analysis_type", "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É")
    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {analysis_type_display} –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ '{html.escape(message.text or '–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')}' —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ /cancel, {user_name_escaped}.")
    else:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É ({current_state_name}). –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.")

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None:
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
    dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")
    cancel_states = [
        VisionAnalysisStates.awaiting_profile_screenshot,
        VisionAnalysisStates.awaiting_analysis_trigger
    ]
    for cancel_state in cancel_states:
        dp.message.register(cancel_analysis, cancel_state, Command("cancel"))
    wrong_input_handler_with_go = lambda message, state, bot: handle_wrong_input_for_analysis(message, state, bot, cmd_go_handler_func)
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_profile_screenshot)
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_analysis_trigger)
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
