import base64
import html
import logging
import re
from typing import Dict, Any, Optional, Union
from decimal import Decimal, ROUND_HALF_UP

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

from config import OPENAI_API_KEY, logger
from services.openai_service import (
    MLBBChatGPT,
    PROFILE_SCREENSHOT_PROMPT,
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ü–µ–π —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π


# === –ö–õ–ê–°–ò –î–õ–Ø –ê–ù–ê–õ–Ü–¢–ò–ö–ò –¢–ê –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É) ===
# MLBBAnalyticsCalculator —Ç–∞ AnalysisFormatter –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç—É—Ç, —è–∫ —Ç–∏ —ó—Ö –Ω–∞–¥–∞–≤.
# –Ø –ø—Ä–∏–ø—É—Å–∫–∞—é, —â–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ.
# –î–ª—è —Å—Ç–∏—Å–ª–æ—Å—Ç—ñ, —è –Ω–µ –±—É–¥—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —ó—Ö —Ç—É—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é.

class MLBBAnalyticsCalculator:
    @staticmethod
    def safe_divide(numerator: Union[int, float, str], denominator: Union[int, float, str], 
                   precision: int = 2) -> Optional[float]:
        try:
            num = float(str(numerator).replace(',', '').replace(' ', ''))
            den = float(str(denominator).replace(',', '').replace(' ', ''))
            if den == 0: return None
            return float(Decimal(str(num / den)).quantize(Decimal(f'0.{"0"*precision}'), rounding=ROUND_HALF_UP))
        except: return None
    
    @staticmethod
    def safe_number(value: Any) -> Optional[float]:
        if value is None: return None
        try: return float(str(value).replace(',', '').replace(' ', ''))
        except: return None

    # ... (—ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑ —Ç–≤–æ–≥–æ MLBBAnalyticsCalculator)
    @classmethod
    def calculate_mvp_rating(cls, mvp_count: Any, matches_played: Any) -> Optional[float]:
        result = cls.safe_divide(mvp_count, matches_played, 4) # –ó–±—ñ–ª—å—à–∏–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ 100
        return result * 100 if result is not None else None
    
    @classmethod
    def calculate_mvp_loss_percentage(cls, mvp_loss_count: Any, mvp_count: Any) -> Optional[float]:
        result = cls.safe_divide(mvp_loss_count, mvp_count, 4)
        return result * 100 if result is not None else None
    
    @classmethod
    def calculate_savage_frequency(cls, savage_count: Any, matches_played: Any) -> Optional[float]:
        frequency = cls.safe_divide(savage_count, matches_played, 5) # –ë—ñ–ª—å—à–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ 1000
        return frequency * 1000 if frequency is not None else None
    
    @classmethod
    def calculate_legendary_frequency(cls, legendary_count: Any, matches_played: Any) -> Optional[float]:
        frequency = cls.safe_divide(legendary_count, matches_played, 4)
        return frequency * 100 if frequency is not None else None
    
    @classmethod
    def calculate_gold_efficiency(cls, avg_hero_dmg_per_min: Any, avg_gold_per_min: Any) -> Optional[float]:
        return cls.safe_divide(avg_hero_dmg_per_min, avg_gold_per_min, 2)

    @classmethod
    def calculate_average_impact(cls, most_kills: Any, most_assists: Any) -> Optional[float]: # –¶–µ, –º–∞–±—É—Ç—å, –Ω–µ —Ç–µ, —â–æ –º–∞–ª–æ—Å—è –Ω–∞ —É–≤–∞–∑—ñ –ø—ñ–¥ (K+A)/–º–∞—Ç—á
        kills = cls.safe_number(most_kills) or 0
        assists = cls.safe_number(most_assists) or 0
        # –¶–µ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö –∫—ñ–ª—ñ–≤ —Ç–∞ –∞—Å–∏—Å—Ç—ñ–≤,
        # –∞ –Ω–µ —Å–µ—Ä–µ–¥–Ω—ñ–π K+A –∑–∞ –º–∞—Ç—á. –î–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ K+A –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ –∫—ñ–ª–∏ —Ç–∞ –∞—Å–∏—Å—Ç–∏.
        # –ó–∞–ª–∏—à—É –ø–æ–∫–∏ —Ç–∞–∫, —è–∫ —É —Ç–µ–±–µ, –∞–ª–µ —Ü–µ –≤–∞—Ä—Ç–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏.
        return kills + assists if (kills > 0 or assists > 0) else None

class AnalysisFormatter: # –ó–∞–ª–∏—à–∞—é —Ç–≤—ñ–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä, –∞–ª–µ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—É–¥–µ —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–æ
    @staticmethod
    def _create_header_section(title: str, icon: str = "üìä") -> str:
        return f"\n<b>{icon} {title}</b>\n" + "‚îÄ" * 35 # –ó–º–µ–Ω—à–∏–≤ –¥–æ–≤–∂–∏–Ω—É –ª—ñ–Ω—ñ—ó –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
    
    @staticmethod
    def _format_field(label: str, value: Any, icon: str = "‚Ä¢", unit: str = "") -> str:
        if value is None or value == "": return f"  {icon} <b>{label}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>"
        display_value = str(value)
        if "‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower():
            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
        return f"  {icon} <b>{label}:</b> {html.escape(display_value)}{unit}"

    @staticmethod
    def _format_metric(label: str, value: Optional[float], icon: str, unit: str = "", precision: int = 2) -> str:
        if value is None: return f"  {icon} <b>{label}:</b> <i>–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö</i>"
        formatted_value = f"{value:.{precision}f}" if precision > 0 else f"{value:.0f}"
        return f"  {icon} <b>{label}:</b> {formatted_value}{unit}"

# === –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –î–õ–Ø <pre> ===
def _format_raw_stats_to_plain_text(data: Dict[str, Any], data_type: str, user_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î '—Å—É—Ö—ñ' –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–ø—Ä–æ—Ñ—ñ–ª—é —É –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è <pre> –±–ª–æ–∫—É."""
    if not data: return f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {user_name}."
    
    lines = []
    if data_type == "player_stats":
        lines.append(f"–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name} ({data.get('stats_filter_type', 'N/A')}):")
        
        def _get_val(source_dict, key, default="N/A"):
            val = source_dict.get(key)
            return str(val) if val is not None else default

        main_ind = data.get("main_indicators", {})
        lines.append("\n–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:")
        lines.append(f"  ‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {_get_val(main_ind, 'matches_played')}")
        wr = _get_val(main_ind, 'win_rate'); lines.append(f"  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {wr}%" if wr != "N/A" else "  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: N/A")
        lines.append(f"  ‚Ä¢ MVP: {_get_val(main_ind, 'mvp_count')}")

        ach_left = data.get("achievements_left_column", {})
        lines.append("\n–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 1):")
        lines.append(f"  ‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏—Ö: {_get_val(ach_left, 'legendary_count')}")
        lines.append(f"  ‚Ä¢ –ú–∞–Ω—ñ—è–∫—ñ–≤: {_get_val(ach_left, 'maniac_count')}")
        lines.append(f"  ‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {_get_val(ach_left, 'double_kill_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –≤–±–∏–≤—Å—Ç–≤ –∑–∞ –≥—Ä—É: {_get_val(ach_left, 'most_kills_in_one_game')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {_get_val(ach_left, 'longest_win_streak')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. —à–∫–æ–¥–∏/—Ö–≤: {_get_val(ach_left, 'highest_dmg_per_min')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –∑–æ–ª–æ—Ç–∞/—Ö–≤: {_get_val(ach_left, 'highest_gold_per_min')}")

        ach_right = data.get("achievements_right_column", {})
        lines.append("\n–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 2):")
        lines.append(f"  ‚Ä¢ –î–∏–∫—É–Ω—Å—Ç–≤ (Savage): {_get_val(ach_right, 'savage_count')}")
        lines.append(f"  ‚Ä¢ –ü–æ—Ç—Ä—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {_get_val(ach_right, 'triple_kill_count')}")
        lines.append(f"  ‚Ä¢ MVP –ø—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ: {_get_val(ach_right, 'mvp_loss_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –¥–æ–ø–æ–º–æ–≥–∏ –∑–∞ –≥—Ä—É: {_get_val(ach_right, 'most_assists_in_one_game')}")
        lines.append(f"  ‚Ä¢ –ü–µ—Ä—à–∞ –∫—Ä–æ–≤: {_get_val(ach_right, 'first_blood_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —à–∫–æ–¥–∏/—Ö–≤: {_get_val(ach_right, 'highest_dmg_taken_per_min')}")

        details = data.get("details_panel", {})
        lines.append("\n–î–µ—Ç–∞–ª—ñ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å):")
        lines.append(f"  ‚Ä¢ KDA: {_get_val(details, 'kda_ratio')}")
        tfpr = _get_val(details, 'teamfight_participation_rate'); lines.append(f"  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: {tfpr}%" if tfpr != "N/A" else "  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: N/A")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. –∑–æ–ª–æ—Ç–æ/—Ö–≤: {_get_val(details, 'avg_gold_per_min')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤: {_get_val(details, 'avg_hero_dmg_per_min')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —Å–º–µ—Ä—Ç–µ–π/–º–∞—Ç—á: {_get_val(details, 'avg_deaths_per_match')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≤–µ–∂–∞–º/–º–∞—Ç—á: {_get_val(details, 'avg_turret_dmg_per_match')}")

    elif data_type == "profile":
        lines.append(f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è {user_name}:")
        fields = { "game_nickname": "–ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "ID (–°–µ—Ä–≤–µ—Ä)", "highest_rank_season": "–ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥", "matches_played": "–ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", "likes_received": "–õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ", "location": "–õ–æ–∫–∞—Ü—ñ—è", "squad_name": "–°–∫–≤–∞–¥"}
        for key, label in fields.items():
            value = str(data.get(key)) if data.get(key) is not None else "–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ"
            if key == "highest_rank_season" and ("‚òÖ" in value or "–∑—ñ—Ä–æ–∫" in value.lower()):
                value = re.sub(r'\s+‚òÖ', '‚òÖ', value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
            lines.append(f"  ‚Ä¢ {label}: {value}")
            
    return "\n".join(lines)

# –§—É–Ω–∫—Ü—ñ—è _calculate_unique_analytics –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É (–º–æ–∂–ª–∏–≤–æ, —ó—ó —Ç—Ä–µ–±–∞ –±—É–¥–µ —Ç—Ä–æ—Ö–∏ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é)
# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∂–µ —Ñ–æ—Ä–º–∞—Ç—É—î –≤–∏–≤—ñ–¥ —É HTML-–ø–æ–¥—ñ–±–Ω–∏–π —Ä—è–¥–æ–∫.
def _calculate_unique_analytics(data: Dict[str, Any], analysis_type: str) -> str:
    calc = MLBBAnalyticsCalculator()
    analytics_parts = []
    
    if analysis_type == "player_stats":
        main_ind = data.get("main_indicators", {})
        ach_left = data.get("achievements_left_column", {})
        ach_right = data.get("achievements_right_column", {})
        details = data.get("details_panel", {})
        matches_played = main_ind.get('matches_played')
        
        mvp_rating = calc.calculate_mvp_rating(main_ind.get('mvp_count'), matches_played)
        analytics_parts.append(AnalysisFormatter._format_metric("MVP –†–µ–π—Ç–∏–Ω–≥", mvp_rating, "‚≠ê", "% –º–∞—Ç—á—ñ–≤"))
        
        mvp_loss_percentage = calc.calculate_mvp_loss_percentage(ach_right.get('mvp_loss_count'), main_ind.get('mvp_count'))
        analytics_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–∫–∞ MVP —É –ø–æ—Ä–∞–∑–∫–∞—Ö", mvp_loss_percentage, "üíî", "%")) # –ó–º—ñ–Ω–∏–≤ –µ–º–æ–¥–∑—ñ

        savage_frequency = calc.calculate_savage_frequency(ach_right.get('savage_count'), matches_played)
        analytics_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–æ—Ç–∞ Savage", savage_frequency, "üî•", " –Ω–∞ 1000 –º–∞—Ç—á—ñ–≤"))
        
        legendary_frequency = calc.calculate_legendary_frequency(ach_left.get('legendary_count'), matches_played)
        analytics_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–æ—Ç–∞ Legendary", legendary_frequency, "‚ú®", " –Ω–∞ 100 –º–∞—Ç—á—ñ–≤"))

        gold_efficiency = calc.calculate_gold_efficiency(details.get('avg_hero_dmg_per_min'), details.get('avg_gold_per_min'))
        analytics_parts.append(AnalysisFormatter._format_metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞", gold_efficiency, "üí∞", " —à–∫–æ–¥–∏/—Ö–≤ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ/—Ö–≤")) # –ó–º—ñ–Ω–∏–≤ –µ–º–æ–¥–∑—ñ

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–º–æ–≥/–ø–æ—Ä–∞–∑–æ–∫, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        win_rate = main_ind.get('win_rate')
        if win_rate is not None and matches_played is not None:
            matches_num = calc.safe_number(matches_played)
            wr_num = calc.safe_number(win_rate)
            if matches_num is not None and wr_num is not None and matches_num > 0:
                wins = int(matches_num * wr_num / 100)
                losses = int(matches_num - wins)
                analytics_parts.append(AnalysisFormatter._format_field("–ü–µ—Ä–µ–º–æ–≥/–ü–æ—Ä–∞–∑–æ–∫", f"{wins} / {losses}", "üëë"))


    elif analysis_type == "profile":
        # –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è _generate_profile_analytics –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É
        rank = data.get("highest_rank_season")
        if rank:
            rank_str = str(rank).lower()
            if "mythic" in rank_str or "–º—ñ—Ñ—ñ—á–Ω–∏–π" in rank_str: analytics_parts.append("  üîÆ <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è")
            elif "legend" in rank_str or "–ª–µ–≥–µ–Ω–¥–∞" in rank_str: analytics_parts.append("  ‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> –°–∏–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –∑ —Ö–æ—Ä–æ—à–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏")
            # ... (—ñ–Ω—à—ñ —É–º–æ–≤–∏ –¥–ª—è —Ä–∞–Ω–≥—É) ...
            else: analytics_parts.append("  üå± <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä–∞–≤–µ—Ü—å, —â–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è")
        
        matches = data.get("matches_played")
        if matches:
            matches_num = calc.safe_number(matches)
            if matches_num is not None:
                if matches_num > 5000: analytics_parts.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π")
                # ... (—ñ–Ω—à—ñ —É–º–æ–≤–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ) ...
                else: analytics_parts.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ü–æ–º—ñ—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
        # ... (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è –ª–∞–π–∫—ñ–≤)

    return "\n".join(analytics_parts) if analytics_parts else "üìà <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.</i>"


# === –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î (–±–µ–∑ –∑–º—ñ–Ω) ===
async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    if not message.from_user: await message.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."); return
    user_name = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    await state.update_data(analysis_type="profile", vision_prompt=PROFILE_SCREENSHOT_PROMPT, original_user_name=user_name)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! –ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é MLBB.", parse_mode=ParseMode.HTML)

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    if not message.from_user: await message.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."); return
    user_name = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzestats.")
    await state.update_data(analysis_type="player_stats", vision_prompt=PLAYER_STATS_PROMPT, original_user_name=user_name)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! –ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è MLBB.", parse_mode=ParseMode.HTML)

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user or not message.chat or not message.photo:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")
    photo_file_id = message.photo[-1].file_id
    try: await message.delete()
    except TelegramAPIError: logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º.")
    await state.update_data(vision_photo_file_id=photo_file_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")]
    ])
    try:
        sent_msg = await bot.send_photo(message.chat.id, photo_file_id, caption="–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –†–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑?", reply_markup=keyboard)
        await state.update_data(bot_message_id_for_analysis=sent_msg.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

# === –û–°–ù–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ö–û–õ–ë–ï–ö–£ –ê–ù–ê–õ–Ü–ó–£ ===
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    if not callback_query.message or not callback_query.message.chat:
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏.", show_alert=True); await state.clear(); return

    chat_id = callback_query.message.chat.id
    message_id_to_edit = callback_query.message.message_id # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —è–∫–µ –±—É–¥–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt")
    analysis_type = user_data.get("analysis_type")

    if not all([photo_file_id, vision_prompt, analysis_type]):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É FSM –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", show_alert=True)
        await state.clear(); return

    try:
        await callback_query.message.edit_caption(caption=f"‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name}...", reply_markup=None)
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name}: {e}")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    generated_comment_html = ""
    unique_analytics_html = ""
    raw_stats_plain_text = ""
    error_occurred = False
    final_text_for_display = f"–ù–∞ –∂–∞–ª—å, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."

    try:
        file_info = await bot.get_file(photo_file_id)
        if not file_info.file_path: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
        image_bytes = (await bot.download_file(file_info.file_path)).read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, vision_prompt)

            if not analysis_result_json or "error" in analysis_result_json:
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Vision API ({analysis_type}) –¥–ª—è {user_name}: {error_msg}")
                final_text_for_display = f"üòî –í–∏–±–∞—á, {user_name}, –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {html.escape(error_msg)}"
                error_occurred = True
            else:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π Vision –∞–Ω–∞–ª—ñ–∑ ({analysis_type}) –¥–ª—è {user_name}.")
                
                # 1. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI
                comment_text = ""
                data_for_comment_gen = analysis_result_json.copy()
                
                if analysis_type == "player_stats":
                    # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è, –¥–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≤ –∫–æ–ø—ñ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—è
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –∞ –Ω–µ HTML —Ä—è–¥–æ–∫
                    # –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è `calculate_derived_stats_map` (–ø–æ–¥—ñ–±–Ω–∞ –¥–æ `calculate_derived_stats` –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–µ—Ä—Å—ñ–π)
                    # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ `_calculate_unique_analytics` –º–æ–∂–Ω–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É.
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–∞—Ä–∞–∑, –ø–µ—Ä–µ–¥–∞–º–æ `analysis_result_json` —è–∫ —î,
                    # –∞–ª–µ –∫—Ä–∞—â–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, —è–∫ –º–∏ —Ä–æ–±–∏–ª–∏.
                    # –ü–æ–∫–∏ —â–æ `_calculate_unique_analytics` –ø–æ–≤–µ—Ä—Ç–∞—î HTML, —Ç–æ–º—É –Ω–µ –º–æ–∂–µ–º–æ —ó—ó –ø—Ä—è–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è `data_for_comment_gen`
                    # –¶–µ –º—ñ—Å—Ü–µ –ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏, —è–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.
                    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ get_player_stats_description –≤ —Å–µ—Ä–≤—ñ—Å—ñ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ "—Å–∏—Ä–∏–º–∏" –¥–∞–Ω–∏–º–∏ + —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏.
                    # –î–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞, —â–æ–± `_calculate_unique_analytics` –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ HTML, –∞ —Å–ª–æ–≤–Ω–∏–∫,
                    # –∞–±–æ –º–∞—Ç–∏ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–ª–æ–≤–Ω–∏–∫–∞.
                    
                    # –¢–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–∏—Ä—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –Ω–µ–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–ª–æ–≤–Ω–∏–∫–∞ derived_stats
                    # –ö—Ä–∞—â–µ:
                    # derived_stats_map = calculate_derived_stats_map(analysis_result_json) # –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫
                    # if derived_stats_map: data_for_comment_gen['derived_stats'] = derived_stats_map
                    # comment_text = await gpt_analyzer.get_player_stats_description(user_name, data_for_comment_gen)
                    
                    # –ü–æ—Ç–æ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É –≤–∏–∫–ª–∏–∫–∞—î get_stats_professional_commentary
                    # –ü–µ—Ä–µ–π–º–µ–Ω—É—î–º–æ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –∑ —Ç–≤–æ—ó–º services/openai_service.py, —è–∫—â–æ —Ç–∞–º —î —Ç–∞–∫–∏–π –º–µ—Ç–æ–¥
                    # –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_player_stats_description, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º —î
                    comment_text = await gpt_analyzer.get_player_stats_description(user_name, data_for_comment_gen) # –ê–±–æ get_stats_professional_commentary

                elif analysis_type == "profile":
                    comment_text = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)

                if comment_text and "<i>" not in comment_text: # –£–Ω–∏–∫–∞—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–æ–∫ —è–∫ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                    generated_comment_html = f"üéôÔ∏è <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI:</b>\n{html.escape(comment_text)}"
                elif comment_text: # –Ø–∫—â–æ —Ü–µ –≤—Å–µ –∂ –∑–∞–≥–ª—É—à–∫–∞
                    generated_comment_html = comment_text 
                
                # 2. –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
                # _calculate_unique_analytics –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É –≤–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î HTML-—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫
                unique_analytics_html = _calculate_unique_analytics(analysis_result_json, analysis_type)
                if unique_analytics_html and "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö" not in unique_analytics_html and "–ü–æ–º–∏–ª–∫–∞" not in unique_analytics_html:
                    unique_analytics_html = f"<b>üìà <u>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI:</u></b>\n{unique_analytics_html}"
                elif not unique_analytics_html : # –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
                    unique_analytics_html = "üìà <i>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</i>"


                # 3. –§–æ—Ä–º–∞—Ç—É—î–º–æ "—Å—É—Ö—É" —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è <pre>
                raw_stats_plain_text = _format_raw_stats_to_plain_text(analysis_result_json, analysis_type, user_name)
                raw_stats_pre_block = f"<pre>{html.escape(raw_stats_plain_text)}</pre>"
                
                # –ó–±–∏—Ä–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —É –±–∞–∂–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                final_parts = []
                if generated_comment_html: final_parts.append(generated_comment_html)
                if unique_analytics_html: final_parts.append(unique_analytics_html)
                
                raw_stats_header = "üìä <u>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è):</u>"
                if analysis_type == "player_stats":
                    raw_stats_header = f"üìä <u>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name} (–¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è):</u>"
                elif analysis_type == "profile":
                     raw_stats_header = f"üìä <u>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é {user_name} (–¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è):</u>"
                final_parts.append(f"{raw_stats_header}\n{raw_stats_pre_block}")
                
                final_text_for_display = "\n\n".join(filter(None, final_parts))

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name}: {e}")
        final_text_for_display = f"–ù–∞ –∂–∞–ª—å, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {html.escape(str(e))}"
        error_occurred = True

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
    await _display_analysis_result(bot, chat_id, message_id_to_edit, final_text_for_display, user_name, error_occurred)
    await state.clear()


async def _display_analysis_result(bot: Bot, chat_id: int, message_id: int,
                                 result_text: str, user_name: str, error_in_processing: bool) -> None:
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É: —Ä–µ–¥–∞–≥—É—î –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    try:
        # –ó–∞–≤–∂–¥–∏ –≤–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é, —è–∫—â–æ –≤–æ–Ω–æ —â–µ —ñ—Å–Ω—É—î —ñ –º–∞—î –∫–Ω–æ–ø–∫–∏
        # (—Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º–∏ –±—É–¥–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏)
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            target_message = await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except TelegramAPIError as e:
            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ –º–∞—î –∫–Ω–æ–ø–æ–∫, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
            # –ê–±–æ —è–∫—â–æ —Ü–µ –Ω–µ —Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º–∏ –æ—á—ñ–∫—É–≤–∞–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–µ–∫—Å—Ç–æ–≤–µ).
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {user_name}: {e}. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ –∑–º—ñ–Ω–µ–Ω–µ/–≤–∏–¥–∞–ª–µ–Ω–µ.")


        if len(result_text) <= 1024: # –Ø–∫—â–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤–ª–∞–∑–∏—Ç—å —É –ø—ñ–¥–ø–∏—Å
            await bot.edit_message_caption(
                chat_id=chat_id,
                message_id=message_id, # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
                caption=result_text,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –≤ –ø—ñ–¥–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ.")
        else: # –¢–µ–∫—Å—Ç –∑–∞–¥–æ–≤–≥–∏–π –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
            logger.info(f"–¢–µ–∫—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –∑–∞–¥–æ–≤–≥–∏–π ({len(result_text)} —Å–∏–º–≤–æ–ª—ñ–≤). –†–µ–¥–∞–≥—É—é –ø—ñ–¥–ø–∏—Å —Ñ–æ—Ç–æ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—é –¥–µ—Ç–∞–ª—ñ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            
            placeholder_caption = "‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–µ—Ç–∞–ª—ñ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ üëá"
            if error_in_processing : # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞, –Ω–µ –∫–∞–∂–µ–º–æ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                 placeholder_caption = "‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ üëá"

            try:
                await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=placeholder_caption
                )
            except TelegramAPIError as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ {message_id} –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: {e}. –°–ø—Ä–æ–±—É—é –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Ü—å–æ–≥–æ.")

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await send_message_in_chunks(
                bot,
                chat_id,
                result_text,
                parse_mode=ParseMode.HTML,
                reply_to_message_id=message_id # –í–ê–ñ–õ–ò–í–û: —Ä–æ–±–∏–º–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
            )
            logger.info(f"–î–µ—Ç–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–æ—Ç–æ.")

    except TelegramAPIError as e:
        logger.error(f"TelegramAPIError –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è {user_name}: {e}")
        try: # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
            await send_message_in_chunks(bot, chat_id, result_text, ParseMode.HTML)
        except Exception as final_send_err:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –Ω–∞–≤—ñ—Ç—å —è–∫ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç: {final_send_err}")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –Ω–∞–≤—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—î –Ω–µ –ø—Ä–æ–π—à–ª–æ
            await bot.send_message(chat_id, f"–í–∏–±–∞—á—Ç–µ, {user_name}, —Å—Ç–∞–ª–∞—Å—è —Å–µ—Ä–π–æ–∑–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è {user_name}: {e}")
        await bot.send_message(chat_id, f"–í–∏–±–∞—á—Ç–µ, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")


# === –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò (delete_bot_message_callback, cancel_analysis, handle_wrong_input_for_analysis, register_vision_handlers) ===
# –ó–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ç–≤–æ–≥–æ –∫–æ–¥—É (–∫–æ–º—ñ—Ç 484a152...), 
# –æ—Å–∫—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è trigger_vision_analysis_callback —Ç–∞ _display_analysis_result.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤–æ–Ω–∏ —Å—É–º—ñ—Å–Ω—ñ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ –≤ —ñ–º–µ–Ω–∞—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∞–±–æ –ª–æ–≥—ñ—Ü—ñ, —è–∫—â–æ —Ç–∞–∫—ñ –±—É–ª–∏.
# –î–ª—è —Å—Ç–∏—Å–ª–æ—Å—Ç—ñ, —è —ó—Ö —Ç—É—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—é—é. –í–∞–∂–ª–∏–≤–æ, —â–æ–± register_vision_handlers –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    if not callback_query.message: logger.error("delete_bot_message_callback: callback_query.message is None."); await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True); return
    try:
        await callback_query.message.delete(); await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state_str = await state.get_state()
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_data = await state.get_data(); user_name = user_data.get("original_user_name", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {callback_query.from_user.id})")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name}. –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ."); await state.clear()
        else: logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (ID: {callback_query.from_user.id}). –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state_str}")
    except TelegramAPIError as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {callback_query.from_user.id}): {e}"); await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

async def cancel_analysis(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {message.from_user.id}) —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    user_data = await state.get_data(); bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id and message.chat:
        try: await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id); logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped}.")
        except TelegramAPIError: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped}.")
    await state.clear(); await message.reply(f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go –∞–±–æ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª—ñ–∑—É.")

async def handle_wrong_input_for_analysis(message: Message, state: FSMContext, bot: Bot, cmd_go_handler_func) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name); user_id = message.from_user.id
    if message.text and message.text.lower() == "/cancel": await cancel_analysis(message, state, bot); return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        user_data = await state.get_data(); bot_message_id = user_data.get("bot_message_id_for_analysis")
        if bot_message_id and message.chat:
            try: await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
            except TelegramAPIError: pass
        await state.clear(); await cmd_go_handler_func(message, state); return
    current_state_name = await state.get_state(); user_data = await state.get_data()
    analysis_type_display = user_data.get("analysis_type", "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É")
    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {analysis_type_display} –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ '{html.escape(message.text or '–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')}' —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ /cancel, {user_name_escaped}.")
    else:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É ({current_state_name}). –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.")

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None:
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
    dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")
    cancel_states = [VisionAnalysisStates.awaiting_profile_screenshot, VisionAnalysisStates.awaiting_analysis_trigger]
    for cancel_state in cancel_states: dp.message.register(cancel_analysis, cancel_state, Command("cancel"))
    wrong_input_handler_with_go = lambda message, state, bot: handle_wrong_input_for_analysis(message, state, bot, cmd_go_handler_func)
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_profile_screenshot)
    dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_analysis_trigger)
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
