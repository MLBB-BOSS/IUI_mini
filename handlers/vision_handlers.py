import base64
import html
import logging
import re
from typing import Dict, Any, Optional, Union
from decimal import Decimal, ROUND_HALF_UP

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É (–≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –º–æ–¥—É–ª—ñ)
from config import OPENAI_API_KEY, logger
from services.openai_service import (
    MLBBChatGPT, 
    PROFILE_SCREENSHOT_PROMPT, 
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks

# –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
COMMENT_TEMPLATES = {
    "high_win_rate": "–í–∞—É, {user}, —Ç–≤—ñ–π win rate ‚Äî —è–∫ —É —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ —á–µ–º–ø—ñ–æ–Ω–∞! üèÜ –ü—Ä–æ–¥–æ–≤–∂—É–π —Ç–∞–∫!",
    "low_kda": "–ì–µ–π, {user}, —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –æ–±–µ—Ä–µ–∂–Ω–æ—Å—Ç—ñ, —ñ —Ç–≤—ñ–π KDA –∑–∞—Å—è—î! üòé",
    "high_mvp_rate": "–¢–∏ —á–∞—Å—Ç–æ MVP, {user}! ü•á –ö–æ–º–∞–Ω–¥–∞ —Ç–æ—á–Ω–æ —Ü—ñ–Ω—É—î —Ç–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏!",
    "rare_savage": "Savage –∫–æ–∂–Ω—ñ {n} –º–∞—Ç—á—ñ–≤, {user}? –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ö–∏–∂–∞–∫ –Ω–∞ –∞—Ä–µ–Ω—ñ! üê∫"
}

class MLBBAnalyticsCalculator:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."""
    @staticmethod
    def safe_divide(numerator: Union[int, float, str], denominator: Union[int, float, str], 
                   precision: int = 2) -> Optional[float]:
        try:
            num = float(str(numerator).replace(',', '').replace(' ', ''))
            den = float(str(denominator).replace(',', '').replace(' ', ''))
            if den == 0: return None
            result = num / den
            return float(Decimal(str(result)).quantize(Decimal(f'0.{"0"*precision}'), rounding=ROUND_HALF_UP))
        except: return None

    @staticmethod
    def safe_number(value: Any) -> Optional[float]:
        if value is None: return None
        try: return float(str(value).replace(',', '').replace(' ', ''))
        except: return None

    @classmethod
    def calculate_mvp_rating(cls, mvp_count: Any, matches_played: Any) -> Optional[float]:
        result = cls.safe_divide(mvp_count, matches_played, 2)
        return result * 100 if result is not None else None

    @classmethod
    def calculate_savage_frequency(cls, savage_count: Any, matches_played: Any) -> Optional[float]:
        frequency = cls.safe_divide(savage_count, matches_played)
        return frequency * 1000 if frequency is not None else None

    @classmethod
    def calculate_damage_per_gold_ratio(cls, avg_hero_dmg_per_min: Any, avg_gold_per_min: Any) -> Optional[float]:
        return cls.safe_divide(avg_hero_dmg_per_min, avg_gold_per_min, 2)

    @classmethod
    def calculate_avg_impact_score(cls, kda_ratio: Any, avg_deaths_per_match: Any) -> Optional[float]:
        kda = cls.safe_number(kda_ratio)
        deaths = cls.safe_number(avg_deaths_per_match)
        if kda is not None and deaths is not None:
            return kda * deaths if deaths > 0 else kda
        return None

class AnalysisFormatter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."""
    @staticmethod
    def _create_header_section(title: str, icon: str = "üìä") -> str:
        return f"\n<b>{icon} {title}</b>\n" + "‚îÄ" * 35

    @staticmethod
    def _format_field(label: str, value: Any, icon: str = "‚Ä¢", unit: str = "") -> str:
        if value is None or value == "":
            return f"  {icon} <b>{label}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>"
        display_value = str(value)
        if "‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower():
            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
        return f"  {icon} <b>{label}:</b> {html.escape(display_value)}{unit}"

    @staticmethod
    def _format_metric(label: str, value: Optional[float], icon: str, unit: str = "", precision: int = 2) -> str:
        if value is None:
            return f"  {icon} <b>{label}:</b> <i>–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö</i>"
        formatted_value = f"{value:.{precision}f}" if precision > 0 else f"{value:.0f}"
        return f"  {icon} <b>{label}:</b> {formatted_value}{unit}"

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    await state.update_data(analysis_type="profile", vision_prompt=PROFILE_SCREENSHOT_PROMPT, original_user_name=user_name_escaped)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends.")

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name)
    await state.update_data(analysis_type="player_stats", vision_prompt=PLAYER_STATS_PROMPT, original_user_name=user_name_escaped)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (\"Statistics\" ‚Üí \"All Seasons\").")

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É."""
    user_data_state = await state.get_data()
    user_name_escaped = user_data_state.get("original_user_name", html.escape(message.from_user.first_name))
    if not message.photo:
        await message.answer(f"–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ, {user_name_escaped}.")
        return
    photo_file_id = message.photo[-1].file_id
    await message.delete()
    await state.update_data(vision_photo_file_id=photo_file_id)
    caption_text = "–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis"),
         InlineKeyboardButton(text="üìä –ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥", callback_data="quick_overview"),
         InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")]
    ])
    sent_message = await bot.send_photo(chat_id=message.chat.id, photo=photo_file_id, caption=caption_text, reply_markup=keyboard)
    await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
    await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)

def format_profile_result(user_name: str, data: Dict[str, Any], ai_comment: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é."""
    parts = []
    if ai_comment:
        parts.append(AnalysisFormatter._create_header_section("–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI", "üéôÔ∏è"))
        parts.append(html.escape(ai_comment))
    parts.append(AnalysisFormatter._create_header_section("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", "üìà"))
    parts.append(_generate_profile_analytics(data))
    parts.append(AnalysisFormatter._create_header_section("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä"))
    fields = {
        "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º",
        "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
        "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥",
        "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ",
        "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
        "location": "üåç –õ–æ–∫–∞—Ü—ñ—è",
        "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥"
    }
    for key, label in fields.items():
        value = data.get(key)
        parts.append(AnalysisFormatter._format_field(label, value, ""))
    return "\n".join(parts)

def format_player_stats_result(user_name: str, data: Dict[str, Any], ai_comment: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    parts = []
    if ai_comment:
        parts.append(AnalysisFormatter._create_header_section("–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI", "üéôÔ∏è"))
        parts.append(html.escape(ai_comment))
    parts.append(AnalysisFormatter._create_header_section("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", "üìà"))
    parts.append(_calculate_unique_analytics(data))
    parts.append(AnalysisFormatter._create_header_section("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä"))
    parts.append(_format_raw_stats(data))
    parts.append("\n<b>üìã –î–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:</b>\n<pre>{}</pre>".format(html.escape(_format_raw_stats_text(data))))
    return "\n".join(parts)

def _calculate_unique_analytics(data: Dict[str, Any]) -> str:
    """–û–±—á–∏—Å–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    calc = MLBBAnalyticsCalculator()
    analytics = []
    main_ind = data.get("main_indicators", {})
    details = data.get("details_panel", {})
    ach_left = data.get("achievements_left_column", {})
    ach_right = data.get("achievements_right_column", {})

    damage_per_gold = calc.calculate_damage_per_gold_ratio(details.get('avg_hero_dmg_per_min'), details.get('avg_gold_per_min'))
    analytics.append(AnalysisFormatter._format_metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞", damage_per_gold, "‚ö°", " —à–∫–æ–¥–∏/—Ö–≤ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ/—Ö–≤"))

    impact_score = calc.calculate_avg_impact_score(details.get('kda_ratio'), details.get('avg_deaths_per_match'))
    analytics.append(AnalysisFormatter._format_metric("–°–µ—Ä. –≤–ø–ª–∏–≤ (KDA*—Å–º–µ—Ä—Ç—ñ)", impact_score, "üéØ", "", 2))

    mvp_rating = calc.calculate_mvp_rating(main_ind.get('mvp_count'), main_ind.get('matches_played'))
    analytics.append(AnalysisFormatter._format_metric("MVP –†–µ–π—Ç–∏–Ω–≥", mvp_rating, "‚≠ê", "% –º–∞—Ç—á—ñ–≤"))

    savage_freq = calc.calculate_savage_frequency(ach_right.get('savage_count'), main_ind.get('matches_played'))
    analytics.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–æ—Ç–∞ Savage", savage_freq, "üî•", " –Ω–∞ 1000 –º–∞—Ç—á—ñ–≤", 2))

    return "\n".join(analytics) or "üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö"

def _generate_profile_analytics(data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    analytics = []
    rank = data.get("highest_rank_season")
    if rank:
        rank_str = str(rank).lower()
        if "mythic" in rank_str:
            analytics.append("üîÆ <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è")
        elif "legend" in rank_str:
            analytics.append("‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> –°–∏–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –∑ —Ö–æ—Ä–æ—à–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏")
    matches = data.get("matches_played")
    if matches:
        matches_num = MLBBAnalyticsCalculator.safe_number(matches)
        if matches_num > 2000:
            analytics.append("üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
    return "\n".join(analytics) or "üìà –ë–∞–∑–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

def _format_raw_stats(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Ä–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ HTML."""
    parts = []
    main_ind = data.get("main_indicators", {})
    parts.append(AnalysisFormatter._format_field("–ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", main_ind.get('matches_played'), "üéØ"))
    win_rate = main_ind.get('win_rate')
    if win_rate is not None:
        parts.append(AnalysisFormatter._format_field("–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥", f"{win_rate}%", "üèÜ"))
    parts.append(AnalysisFormatter._format_field("MVP", main_ind.get('mvp_count'), "üëë"))
    return "\n".join(parts)

def _format_raw_stats_text(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Ä–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è."""
    lines = [f"–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"]
    main_ind = data.get("main_indicators", {})
    lines.append(f"–ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {main_ind.get('matches_played', 'N/A')}")
    lines.append(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {main_ind.get('win_rate', 'N/A')}%")
    lines.append(f"MVP: {main_ind.get('mvp_count', 'N/A')}")
    return "\n".join(lines)

async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª—ñ–∑'."""
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")
    analysis_type = user_data.get("analysis_type")
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt")

    async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
        analysis_result_json = await gpt_analyzer.analyze_image_with_vision(photo_file_id, vision_prompt)
        if analysis_type == "profile":
            ai_comment = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
            final_text = format_profile_result(user_name, analysis_result_json, ai_comment)
        else:
            ai_comment = await gpt_analyzer.get_stats_professional_commentary(user_name, analysis_result_json)
            final_text = format_player_stats_result(user_name, analysis_result_json, ai_comment)

    if analysis_type == "player_stats":
        win_rate = analysis_result_json.get("main_indicators", {}).get("win_rate")
        if win_rate and float(win_rate) > 60:
            final_text = COMMENT_TEMPLATES["high_win_rate"].format(user=user_name) + "\n\n" + final_text

    await bot.edit_message_caption(chat_id=callback_query.message.chat.id, 
                                   message_id=callback_query.message.message_id, 
                                   caption=final_text, 
                                   parse_mode=ParseMode.HTML)
    await state.clear()

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None:
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ —ñ –∫–æ–ª–±–µ–∫—ñ–≤."""
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)

# –ü—Ä–∏–º—ñ—Ç–∫–∞: –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è "quick_overview" —Ç–∞ "delete_bot_message", —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.