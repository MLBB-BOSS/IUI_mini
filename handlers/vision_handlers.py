import base64
import html
import logging
import re
from typing import Dict, Any, Optional, Union
from decimal import Decimal, ROUND_HALF_UP

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import OPENAI_API_KEY, logger
from services.openai_service import (
    MLBBChatGPT, 
    PROFILE_SCREENSHOT_PROMPT, 
    PLAYER_STATS_PROMPT
)
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó


# === –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –ê–ù–ê–õ–Ü–¢–ò–ö–ò (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–º—ñ—Ç—ñ) ===
class MLBBAnalyticsCalculator:
    @staticmethod
    def safe_divide(numerator: Union[int, float, str], denominator: Union[int, float, str], 
                   precision: int = 2) -> Optional[float]:
        try:
            num = float(str(numerator).replace(',', '').replace(' ', ''))
            den = float(str(denominator).replace(',', '').replace(' ', ''))
            if den == 0: return None
            result = num / den
            return float(Decimal(str(result)).quantize(Decimal(f'0.{"0"*precision}'), rounding=ROUND_HALF_UP))
        except (ValueError, TypeError, ArithmeticError) as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –≤ safe_divide({numerator}, {denominator}): {e}")
            return None
    
    @staticmethod
    def safe_number(value: Any) -> Optional[float]:
        if value is None: return None
        try: return float(str(value).replace(',', '').replace(' ', ''))
        except (ValueError, TypeError): return None
    
    @classmethod
    def calculate_mvp_rating(cls, mvp_count: Any, matches_played: Any) -> Optional[float]:
        result = cls.safe_divide(mvp_count, matches_played, 4) # –ó–±—ñ–ª—å—à–µ–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è %
        return result * 100 if result is not None else None
    
    @classmethod
    def calculate_mvp_loss_percentage(cls, mvp_loss_count: Any, mvp_count: Any) -> Optional[float]:
        result = cls.safe_divide(mvp_loss_count, mvp_count, 4) # –ó–±—ñ–ª—å—à–µ–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è %
        return result * 100 if result is not None else None
    
    @classmethod
    def calculate_savage_frequency(cls, savage_count: Any, matches_played: Any) -> Optional[float]:
        frequency = cls.safe_divide(savage_count, matches_played, 5) # –ó–±—ñ–ª—å—à–µ–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è *1000
        return frequency * 1000 if frequency is not None else None
    
    @classmethod
    def calculate_legendary_frequency(cls, legendary_count: Any, matches_played: Any) -> Optional[float]:
        frequency = cls.safe_divide(legendary_count, matches_played, 4) # –ó–±—ñ–ª—å—à–µ–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è *100
        return frequency * 100 if frequency is not None else None
    
    @classmethod
    def calculate_gold_efficiency(cls, avg_hero_dmg_per_min: Any, avg_gold_per_min: Any) -> Optional[float]:
        return cls.safe_divide(avg_hero_dmg_per_min, avg_gold_per_min, 2)
    
    @classmethod
    def calculate_average_impact(cls, most_kills: Any, most_assists: Any) -> Optional[float]:
        kills = cls.safe_number(most_kills) or 0
        assists = cls.safe_number(most_assists) or 0
        return kills + assists if (kills > 0 or assists > 0) else None

class AnalysisFormatter:
    @staticmethod
    def _create_header_section(title: str, icon: str = "üìä") -> str:
        return f"\n<b>{icon} {title}</b>\n" + "‚îÄ" * 30 # –¢—Ä–æ—Ö–∏ –∫–æ—Ä–æ—Ç—à–∞ –ª—ñ–Ω—ñ—è
    
    @staticmethod
    def _format_field(label: str, value: Any, icon: str = "‚Ä¢", unit: str = "") -> str:
        if value is None or str(value).strip() == "": return f"  {icon} <b>{label}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>"
        display_value = str(value)
        if "‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower():
            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
        return f"  {icon} <b>{label}:</b> {html.escape(display_value)}{unit}"
    
    @staticmethod
    def _format_metric(label: str, value: Optional[float], icon: str, unit: str = "", precision: int = 2) -> str:
        if value is None: return f"  {icon} <b>{label}:</b> <i>–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö</i>"
        formatted_value = f"{value:.{precision}f}" if precision > 0 else f"{value:.0f}"
        return f"  {icon} <b>{label}:</b> {formatted_value}{unit}"

# === –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–º—ñ—Ç—ñ) ===
async def cmd_analyze_profile(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzeprofile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user; user_name_escaped = html.escape(user.first_name); user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    await state.update_data(analysis_type="profile", vision_prompt=PROFILE_SCREENSHOT_PROMPT, original_user_name=user_name_escaped)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.", parse_mode=ParseMode.HTML)

async def cmd_analyze_player_stats(message: Message, state: FSMContext) -> None:
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /analyzestats –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        return
    user = message.from_user; user_name_escaped = html.escape(user.first_name); user_id = user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzestats.")
    await state.update_data(analysis_type="player_stats", vision_prompt=PLAYER_STATS_PROMPT, original_user_name=user_name_escaped)
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ—î—ó —ñ–≥—Ä–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–∑–≤–∏—á–∞–π —Ä–æ–∑–¥—ñ–ª \"Statistics\" ‚Üí \"All Seasons\" –∞–±–æ \"Current Season\").\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.", parse_mode=ParseMode.HTML)

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user or not message.chat: logger.error("handle_profile_screenshot: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π message.from_user –∞–±–æ message.chat"); return
    user_data_state = await state.get_data()
    user_name_escaped = user_data_state.get("original_user_name", html.escape(message.from_user.first_name if message.from_user else "–ì—Ä–∞–≤–µ—Ü—å"))
    user_id = message.from_user.id; chat_id = message.chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ {user_name_escaped} (ID: {user_id}).")
    if not message.photo: await message.answer(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_escaped}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç)."); return
    photo_file_id = message.photo[-1].file_id
    try: await message.delete(); logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} (ID: {user_id}) –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped}: {e}")
    await state.update_data(vision_photo_file_id=photo_file_id)
    caption_text = ("–°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ, –∞–±–æ ¬´üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏¬ª, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.")
    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])
    try:
        sent_message = await bot.send_photo(chat_id=chat_id, photo=photo_file_id, caption=caption_text, reply_markup=keyboard)
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name_escaped} (ID: {user_id}) –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è {user_name_escaped}: {e}")
        await _send_error_message(bot, chat_id, user_name_escaped, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑")
        await state.clear()

# === –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ê–ù–ê–õ–Ü–ó–£ (–∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É, –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–∞–≤–∫–∞–º–∏) ===
# –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó format_profile_result —Ç–∞ format_player_stats_result –∑–±–∏—Ä–∞—é—Ç—å HTML.
# –ú–∏ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó final_caption_text.
# –ü–æ—Ä—è–¥–æ–∫ –±–ª–æ–∫—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω–∏—Ö –≤–∂–µ —Ç–∞–∫–∏–π, —è–∫ —Ç–∏ —Ö–æ—Ç—ñ–≤ (–ö–æ–º–µ–Ω—Ç–∞—Ä, –£–Ω—ñ–∫–∞–ª—å–Ω–∞, –î–µ—Ç–∞–ª—å–Ω–∞).
# –ì–æ–ª–æ–≤–Ω–µ, —â–æ —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ù–ï –±—É–¥—É—Ç—å –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ <pre> —Ç–µ–≥–∏, —Ü–µ –∑—Ä–æ–±–∏—Ç—å _get_formatted_raw_stats_for_pre_block.

def _get_formatted_raw_stats_for_pre_block(data: Dict[str, Any], analysis_type: str, user_name: str) -> str:
    """–ì–æ—Ç—É—î '—Å–∏—Ä—ñ' –¥–∞–Ω—ñ –¥–ª—è <pre> –±–ª–æ–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç."""
    lines = []
    
    def _get_val(source_dict, key, default="N/A"):
        val = source_dict.get(key)
        return str(val) if val is not None else default

    if analysis_type == "player_stats":
        lines.append(f"–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è {user_name} ({data.get('stats_filter_type', 'N/A')}):")
        main_ind = data.get("main_indicators", {})
        lines.append("\n–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:")
        lines.append(f"  ‚Ä¢ –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {_get_val(main_ind, 'matches_played')}")
        wr = _get_val(main_ind, 'win_rate'); lines.append(f"  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {wr}%" if wr != "N/A" else "  ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: N/A")
        lines.append(f"  ‚Ä¢ MVP: {_get_val(main_ind, 'mvp_count')}")

        ach_left = data.get("achievements_left_column", {})
        lines.append("\n–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 1):")
        lines.append(f"  ‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏—Ö: {_get_val(ach_left, 'legendary_count')}")
        lines.append(f"  ‚Ä¢ –ú–∞–Ω—ñ—è–∫—ñ–≤: {_get_val(ach_left, 'maniac_count')}")
        # ... —ñ —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ achievements_left_column
        lines.append(f"  ‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {_get_val(ach_left, 'double_kill_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –≤–±–∏–≤—Å—Ç–≤ –∑–∞ –≥—Ä—É: {_get_val(ach_left, 'most_kills_in_one_game')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {_get_val(ach_left, 'longest_win_streak')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. —à–∫–æ–¥–∏/—Ö–≤: {_get_val(ach_left, 'highest_dmg_per_min')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –∑–æ–ª–æ—Ç–∞/—Ö–≤: {_get_val(ach_left, 'highest_gold_per_min')}")


        ach_right = data.get("achievements_right_column", {})
        lines.append("\n–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–∫–æ–ª–æ–Ω–∫–∞ 2):")
        lines.append(f"  ‚Ä¢ –î–∏–∫—É–Ω—Å—Ç–≤ (Savage): {_get_val(ach_right, 'savage_count')}")
        lines.append(f"  ‚Ä¢ –ü–æ—Ç—Ä—ñ–π–Ω–∏—Ö –≤–±–∏–≤—Å—Ç–≤: {_get_val(ach_right, 'triple_kill_count')}")
        # ... —ñ —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ achievements_right_column
        lines.append(f"  ‚Ä¢ MVP –ø—Ä–∏ –ø–æ—Ä–∞–∑—Ü—ñ: {_get_val(ach_right, 'mvp_loss_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –¥–æ–ø–æ–º–æ–≥–∏ –∑–∞ –≥—Ä—É: {_get_val(ach_right, 'most_assists_in_one_game')}")
        lines.append(f"  ‚Ä¢ –ü–µ—Ä—à–∞ –∫—Ä–æ–≤: {_get_val(ach_right, 'first_blood_count')}")
        lines.append(f"  ‚Ä¢ –ù–∞–π–±. –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —à–∫–æ–¥–∏/—Ö–≤: {_get_val(ach_right, 'highest_dmg_taken_per_min')}")

        details = data.get("details_panel", {})
        lines.append("\n–î–µ—Ç–∞–ª—ñ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å):")
        lines.append(f"  ‚Ä¢ KDA: {_get_val(details, 'kda_ratio')}")
        tfpr = _get_val(details, 'teamfight_participation_rate'); lines.append(f"  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: {tfpr}%" if tfpr != "N/A" else "  ‚Ä¢ –£—á–∞—Å—Ç—å —É –∫–æ–º. –±–æ—è—Ö: N/A")
        # ... —ñ —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ details_panel
        lines.append(f"  ‚Ä¢ –°–µ—Ä. –∑–æ–ª–æ—Ç–æ/—Ö–≤: {_get_val(details, 'avg_gold_per_min')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≥–µ—Ä–æ—è–º/—Ö–≤: {_get_val(details, 'avg_hero_dmg_per_min')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —Å–º–µ—Ä—Ç–µ–π/–º–∞—Ç—á: {_get_val(details, 'avg_deaths_per_match')}")
        lines.append(f"  ‚Ä¢ –°–µ—Ä. —à–∫–æ–¥–∞ –≤–µ–∂–∞–º/–º–∞—Ç—á: {_get_val(details, 'avg_turret_dmg_per_match')}")

    elif analysis_type == "profile":
        lines.append(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è {user_name}:")
        fields = {
            "game_nickname": "–ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "ID (–°–µ—Ä–≤–µ—Ä)", 
            "highest_rank_season": "–ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥", "matches_played": "–ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", 
            "likes_received": "–õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ", "location": "–õ–æ–∫–∞—Ü—ñ—è", "squad_name": "–°–∫–≤–∞–¥"
        }
        for key, label in fields.items():
            value_raw = data.get(key)
            value_str = str(value_raw) if value_raw is not None else "–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ"
            if key == "highest_rank_season" and value_raw is not None:
                 if "‚òÖ" in value_str or "–∑—ñ—Ä–æ–∫" in value_str.lower():
                    value_str = re.sub(r'\s+‚òÖ', '‚òÖ', value_str.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ"))
            lines.append(f"  ‚Ä¢ {label}: {value_str}")
            
    return "\n".join(lines)

def _calculate_unique_analytics(data: Dict[str, Any], analysis_type: str) -> str: # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É, –≥–µ–Ω–µ—Ä—É—î HTML
    calc = MLBBAnalyticsCalculator()
    analytics_html_parts = [] # –ë—É–¥–µ–º–æ –∑–±–∏—Ä–∞—Ç–∏ HTML —á–∞—Å—Ç–∏–Ω–∏ —Ç—É—Ç
    
    if analysis_type == "player_stats":
        main_ind = data.get("main_indicators", {})
        ach_left = data.get("achievements_left_column", {})
        ach_right = data.get("achievements_right_column", {})
        details = data.get("details_panel", {})
        matches_played = main_ind.get('matches_played')
        
        mvp_rating = calc.calculate_mvp_rating(main_ind.get('mvp_count'), matches_played)
        analytics_html_parts.append(AnalysisFormatter._format_metric("MVP –†–µ–π—Ç–∏–Ω–≥", mvp_rating, "‚≠ê", "% –º–∞—Ç—á—ñ–≤"))
        
        mvp_loss_percentage = calc.calculate_mvp_loss_percentage(ach_right.get('mvp_loss_count'), main_ind.get('mvp_count'))
        analytics_html_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–∫–∞ MVP —É –ø–æ—Ä–∞–∑–∫–∞—Ö", mvp_loss_percentage, "üíî", "%"))

        savage_frequency = calc.calculate_savage_frequency(ach_right.get('savage_count'), matches_played)
        analytics_html_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–æ—Ç–∞ Savage", savage_frequency, "üî•", " –Ω–∞ 1000 –º–∞—Ç—á—ñ–≤"))
        
        legendary_frequency = calc.calculate_legendary_frequency(ach_left.get('legendary_count'), matches_played)
        analytics_html_parts.append(AnalysisFormatter._format_metric("–ß–∞—Å—Ç–æ—Ç–∞ Legendary", legendary_frequency, "‚ú®", " –Ω–∞ 100 –º–∞—Ç—á—ñ–≤"))

        gold_efficiency = calc.calculate_gold_efficiency(details.get('avg_hero_dmg_per_min'), details.get('avg_gold_per_min'))
        analytics_html_parts.append(AnalysisFormatter._format_metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞", gold_efficiency, "üí∞", " —à–∫–æ–¥–∏/—Ö–≤ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ/—Ö–≤"))
        
        win_rate = main_ind.get('win_rate')
        if win_rate is not None and matches_played is not None:
            matches_num = calc.safe_number(matches_played)
            wr_num = calc.safe_number(win_rate)
            if matches_num and wr_num and matches_num > 0: # –î–æ–¥–∞–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É matches_num > 0
                wins = int(matches_num * wr_num / 100)
                losses = int(matches_num - wins)
                analytics_html_parts.append(AnalysisFormatter._format_field("–ü–µ—Ä–µ–º–æ–≥/–ü–æ—Ä–∞–∑–æ–∫", f"{wins} / {losses}", "üëë"))
        
        # avg_impact = calc.calculate_average_impact(ach_left.get('most_kills_in_one_game'), ach_right.get('most_assists_in_one_game'))
        # analytics_html_parts.append(AnalysisFormatter._format_metric("–°–µ—Ä. –≤–ø–ª–∏–≤ (K+A)/–º–∞—Ç—á", avg_impact, "üéØ", "", 2)) # –ó–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞–≤, –±–æ —Ü–µ —Å—É–º–∞ –º–∞–∫—Å, –∞ –Ω–µ —Å–µ—Ä–µ–¥–Ω—î

    elif analysis_type == "profile": # –¶–µ _generate_profile_analytics –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É
        analytics_html_parts.extend(_generate_profile_analytics_list(data)) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤

    return "\n".join(analytics_html_parts) if analytics_html_parts else "üìà <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.</i>"

def _generate_profile_analytics_list(data: Dict[str, Any]) -> list[str]: # –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫
    """ –ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É HTML-—Ä—è–¥–∫—ñ–≤. """
    analytics_list = []
    calc = MLBBAnalyticsCalculator()
    try:
        rank = data.get("highest_rank_season")
        if rank:
            rank_str = str(rank).lower()
            if "mythic" in rank_str or "–º—ñ—Ñ—ñ—á–Ω–∏–π" in rank_str: analytics_list.append("  üîÆ <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è")
            elif "legend" in rank_str or "–ª–µ–≥–µ–Ω–¥–∞" in rank_str: analytics_list.append("  ‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> –°–∏–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
            elif "epic" in rank_str or "–µ–ø—ñ–∫" in rank_str: analytics_list.append("  üíé <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä–∞–≤–µ—Ü—å —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è")
            else: analytics_list.append("  üå± <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä–∞–≤–µ—Ü—å, —â–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è")
        
        matches = data.get("matches_played")
        if matches:
            matches_num = calc.safe_number(matches)
            if matches_num is not None: # –î–æ–¥–∞–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
                if matches_num > 5000: analytics_list.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π")
                elif matches_num > 2000: analytics_list.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
                elif matches_num > 1000: analytics_list.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
                else: analytics_list.append("  üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> –ü–æ–º—ñ—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å")
        
        likes = data.get("likes_received")
        if likes:
            likes_num = calc.safe_number(likes)
            if likes_num is not None: # –î–æ–¥–∞–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
                if likes_num > 1000: analytics_list.append("  üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –í–∏—Å–æ–∫–æ –æ—Ü—ñ–Ω–µ–Ω–∏–π")
                elif likes_num > 500: analytics_list.append("  üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –î–æ–±—Ä–µ –≤—ñ–¥–æ–º–∏–π")
                else: analytics_list.append("  üë• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å:</b> –ë—É–¥—É—î —Ä–µ–ø—É—Ç–∞—Ü—ñ—é")
        
        if not analytics_list: analytics_list.append("  üìà <i>–ë–∞–∑–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</i>")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        analytics_list.append("  üìà <i>–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.</i>")
    return analytics_list


async def _send_error_message(bot: Bot, chat_id: int, user_name: str, error_text: str, reply_to_id: Optional[int] = None) -> None:
    try:
        await bot.send_message(chat_id, f"{error_text}, {user_name}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_to_message_id=reply_to_id)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name}: {e}")

# === –û–ë–†–û–ë–ö–ê –ö–û–õ–ë–ï–ö–Ü–í ===
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    if not callback_query.message or not callback_query.message.chat:
        logger.error("trigger_vision_analysis_callback: callback_query.message –∞–±–æ callback_query.message.chat is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.", show_alert=True)
        await state.clear(); return

    chat_id = callback_query.message.chat.id
    message_id_to_process = callback_query.message.message_id # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —è–∫–µ –±—É–¥–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
    
    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")
    photo_file_id = user_data.get("vision_photo_file_id")
    vision_prompt = user_data.get("vision_prompt")
    analysis_type = user_data.get("analysis_type")

    if not all([photo_file_id, vision_prompt, analysis_type]):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö —É FSM –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}).")
        await _send_error_message(bot, chat_id, user_name, "–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–µ–ø–æ–≤–Ω—ñ", reply_to_id=message_id_to_process)
        await state.clear(); return

    try: # –û–Ω–æ–≤–ª—é—î–º–æ UI: "–û–±—Ä–æ–±–ª—è—é..."
        if callback_query.message.caption:
            await callback_query.message.edit_caption(caption=f"‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name}...", reply_markup=None)
        # –Ø–∫—â–æ –Ω–µ–º–∞—î caption, –∞–ª–µ —î –∫–Ω–æ–ø–∫–∏, —Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ (edit_reply_markup)
        elif callback_query.message.reply_markup:
             await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å/–∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
    generated_comment_html = ""
    unique_analytics_html = ""
    raw_stats_plain_text_for_pre = "" # –¢–µ–∫—Å—Ç –¥–ª—è <pre>
    error_in_processing = False
    final_text_to_display = f"–ù–∞ –∂–∞–ª—å, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É." # –î–µ—Ñ–æ–ª—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    try:
        file_info = await bot.get_file(photo_file_id)
        if not file_info.file_path: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
        
        downloaded_file = await bot.download_file(file_info.file_path)
        if downloaded_file is None: raise ValueError("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø–æ–≤–µ—Ä–Ω—É–ª–æ None.")
        image_bytes = downloaded_file.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, vision_prompt)

            if not analysis_result_json or "error" in analysis_result_json:
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Vision API ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {error_msg}")
                final_text_to_display = await _format_error_response(user_name, error_msg, analysis_result_json)
                error_in_processing = True
            else:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π Vision –∞–Ω–∞–ª—ñ–∑ ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}).")
                
                # 1. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI
                ai_comment_text = ""
                # –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≤ get_player_stats_description, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–º
                # –î–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞ –º–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Å–µ—Ä–≤—ñ—Å OpenAI –º–æ–∂–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ü–µ –∞–±–æ –º–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –π–æ–≥–æ –ø—ñ–∑–Ω—ñ—à–µ
                data_for_comment_generation = analysis_result_json.copy()
                # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ derived_stats –¥–æ data_for_comment_generation, —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫

                if analysis_type == "player_stats":
                    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤ MLBBChatGPT —î –º–µ—Ç–æ–¥ get_player_stats_description
                    # –∞–±–æ get_stats_professional_commentary, —ñ –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î
                    ai_comment_text = await gpt_analyzer.get_player_stats_description(user_name, data_for_comment_generation)
                elif analysis_type == "profile":
                    ai_comment_text = await gpt_analyzer.get_profile_description(user_name, data_for_comment_generation)

                if ai_comment_text and "<i>" not in ai_comment_text: # –£–Ω–∏–∫–∞—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–æ–∫
                    generated_comment_html = f"üéôÔ∏è <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ IUI:</b>\n{html.escape(ai_comment_text)}"
                elif ai_comment_text: # –Ø–∫—â–æ —Ü–µ –≤—Å–µ –∂ –∑–∞–≥–ª—É—à–∫–∞ –∑ <i>
                    generated_comment_html = ai_comment_text
                
                # 2. –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É (HTML)
                # _calculate_unique_analytics –≤–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ—Ç–æ–≤–∏–π HTML –±–ª–æ–∫ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É/–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
                unique_analytics_html_content = _calculate_unique_analytics(analysis_result_json, analysis_type)
                if unique_analytics_html_content and "<i>" not in unique_analytics_html_content:
                     unique_analytics_html = f"<b>üìà <u>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥ IUI:</u></b>\n{unique_analytics_html_content}"
                elif unique_analytics_html_content : # –Ø–∫—â–æ —Ç–∞–º –≤–∂–µ —î <i> –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
                    unique_analytics_html = unique_analytics_html_content


                # 3. –§–æ—Ä–º–∞—Ç—É—î–º–æ "—Å—É—Ö—É" —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è <pre>
                raw_stats_plain_text_for_pre = _get_formatted_raw_stats_for_pre_block(analysis_result_json, analysis_type, user_name)
                
                # –ó–±–∏—Ä–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —É –±–∞–∂–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                final_parts = []
                if generated_comment_html: final_parts.append(generated_comment_html)
                if unique_analytics_html: final_parts.append(unique_analytics_html)
                
                if raw_stats_plain_text_for_pre:
                    raw_stats_header = AnalysisFormatter._create_header_section(
                        f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ({user_name}) –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", "üìã" # –ë—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    ).strip() # strip() —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤—ñ \n –Ω–∞ –ø–æ—á–∞—Ç–∫—É/–∫—ñ–Ω—Ü—ñ
                    final_parts.append(f"{raw_stats_header}\n<pre>{html.escape(raw_stats_plain_text_for_pre)}</pre>")
                
                final_text_to_display = "\n\n".join(filter(None, final_parts))
                if not final_text_to_display: # –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ
                    final_text_to_display = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {user_name}."
                    error_in_processing = True


    except ValueError as e: # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥ get_file –∞–±–æ download_file
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}", exc_info=True)
        final_text_to_display = f"–ù–∞ –∂–∞–ª—å, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {html.escape(str(e))}"
        error_in_processing = True
    except TelegramAPIError as e: # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ Telegram
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}", exc_info=True)
        final_text_to_display = f"–ü—Ä–æ–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ Telegram: {html.escape(str(e))}"
        error_in_processing = True
    except Exception as e: # –Ü–Ω—à—ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É ({analysis_type}) –¥–ª—è {user_name} (ID: {callback_query.from_user.id}): {e}")
        final_text_to_display = f"–ù–∞ –∂–∞–ª—å, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∞."
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        error_in_processing = True

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
    await _display_analysis_result(bot, chat_id, message_id_to_process, final_text_to_display, user_name, error_in_processing)
    await state.clear()


async def _handle_analysis_error(callback_query: CallbackQuery, bot: Bot, chat_id: int, 
                               message_id: int, user_name: str, error_reason: str) -> None:
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—è —É —Ç–≤–æ—î–º—É –∫–æ–¥—ñ, –∑–∞–ª–∏—à–∞—é —ó—ó, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–µ—Å—å —â–µ.
    # –£ trigger_vision_analysis_callback –ª–æ–≥—ñ–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É.
    try:
        if callback_query.message and callback_query.message.caption:
            await callback_query.message.edit_caption(caption=f"–ü–æ–º–∏–ª–∫–∞, {user_name}: {error_reason}. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑.")
        else:
            await bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞, {user_name}: {error_reason}. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}: {e}")

async def _format_error_response(user_name: str, error_msg: str, analysis_result: Optional[Dict[str, Any]]) -> str:
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—è —É —Ç–≤–æ—î–º—É –∫–æ–¥—ñ.
    base_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
    if analysis_result:
        raw_response = analysis_result.get('raw_response')
        details = analysis_result.get('details')
        if raw_response: base_text += f"\n–î–µ—Ç–∞–ª—ñ –≤—ñ–¥ –®–Ü: {html.escape(str(raw_response)[:150])}..."
        elif details: base_text += f"\n–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {html.escape(str(details)[:150])}..."
    return base_text

async def _display_analysis_result(bot: Bot, chat_id: int, message_id_to_process: int, 
                                 result_text: str, user_name: str, 
                                 error_in_processing: bool) -> None: # –î–æ–¥–∞–Ω–æ error_in_processing
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É: —Ä–µ–¥–∞–≥—É—î –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º–∏ –±—É–¥–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, –ø–µ—Ä—à –Ω—ñ–∂ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ reply_markup
            # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ), edit_message_reply_markup –º–æ–∂–µ –¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
            # –ê–ª–µ –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–π–≤–æ—é.
            # –ì–æ–ª–æ–≤–Ω–µ - –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ –º–∞—î –∫–Ω–æ–ø–æ–∫.
            await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id_to_process, reply_markup=None)
        except TelegramAPIError as e:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_to_process} –¥–ª—è {user_name}: {e}. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ –∑–º—ñ–Ω–µ–Ω–µ/–≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ –º–∞–ª–æ –∫–Ω–æ–ø–æ–∫.")

        if len(result_text) <= 1024: # –Ø–∫—â–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤–ª–∞–∑–∏—Ç—å —É –ø—ñ–¥–ø–∏—Å
            await bot.edit_message_caption(
                chat_id=chat_id,
                message_id=message_id_to_process, 
                caption=result_text,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –≤ –ø—ñ–¥–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ.")
        else: # –¢–µ–∫—Å—Ç –∑–∞–¥–æ–≤–≥–∏–π –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
            placeholder_caption = "‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–µ—Ç–∞–ª—ñ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ üëá"
            if error_in_processing:
                 placeholder_caption = "‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ üëá"
            
            logger.info(f"–¢–µ–∫—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –∑–∞–¥–æ–≤–≥–∏–π ({len(result_text)}). –†–µ–¥–∞–≥—É—é –ø—ñ–¥–ø–∏—Å —Ñ–æ—Ç–æ –Ω–∞ '{placeholder_caption}' —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—é –¥–µ—Ç–∞–ª—ñ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            
            try:
                await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id_to_process,
                    caption=placeholder_caption
                )
            except TelegramAPIError as e: # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ)
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ {message_id_to_process} –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: {e}. –°–ø—Ä–æ–±—É—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await send_message_in_chunks(
                bot,
                chat_id,
                result_text,
                parse_mode=ParseMode.HTML,
                reply_to_message_id=message_id_to_process # –í–ê–ñ–õ–ò–í–û: —Ä–æ–±–∏–º–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
            )
            logger.info(f"–î–µ—Ç–∞–ª—ñ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_to_process}.")

    except TelegramAPIError as e: # –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–Ω–∞–¥—Å–∏–ª–∞—Ç–∏
        logger.error(f"TelegramAPIError –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è {user_name} (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_to_process}): {e}", exc_info=True)
        try: 
            await send_message_in_chunks(bot, chat_id, result_text, ParseMode.HTML, reply_to_message_id=message_id_to_process if not error_in_processing else None)
        except Exception as final_send_err:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –Ω–∞–≤—ñ—Ç—å —è–∫ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç: {final_send_err}", exc_info=True)
            await _send_error_message(bot, chat_id, user_name, "—Å—Ç–∞–ª–∞—Å—è —Å–µ—Ä–π–æ–∑–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", reply_to_id=message_id_to_process if not error_in_processing else None)
    except Exception as e: # –Ü–Ω—à—ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è {user_name} (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_to_process}): {e}", exc_info=True)
        await _send_error_message(bot, chat_id, user_name, "–≤–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", reply_to_id=message_id_to_process if not error_in_processing else None)


# === –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–º—ñ—Ç—ñ) ===
async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    if not callback_query.message: logger.error("delete_bot_message_callback: callback_query.message is None."); await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True); return
    try:
        await callback_query.message.delete(); await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state_str = await state.get_state()
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_data = await state.get_data(); user_name = user_data.get("original_user_name", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {callback_query.from_user.id})")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name}. –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ."); await state.clear()
        else: logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (ID: {callback_query.from_user.id}). –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state_str}")
    except TelegramAPIError as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {callback_query.from_user.id}): {e}"); await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

async def cancel_analysis(message: Message, state: FSMContext, bot: Bot) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {message.from_user.id}) —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    user_data = await state.get_data(); bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id and message.chat:
        try: await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id); logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped}.")
        except TelegramAPIError: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped}.")
    await state.clear(); await message.reply(f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go –∞–±–æ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª—ñ–∑—É.", parse_mode=ParseMode.HTML)

async def handle_wrong_input_for_analysis(message: Message, state: FSMContext, bot: Bot, cmd_go_handler_func) -> None:
    if not message.from_user: return
    user_name_escaped = html.escape(message.from_user.first_name); user_id = message.from_user.id
    if message.text and message.text.lower() == "/cancel": await cancel_analysis(message, state, bot); return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É.")
        # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ _cleanup_analysis_state –Ω–∞ _cleanup_vision_analysis_state –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        chat_id_for_cleanup = message.chat.id if message.chat else None
        await _cleanup_vision_analysis_state(state, bot, chat_id_for_cleanup) 
        await cmd_go_handler_func(message, state); return
        
    current_state_name = await state.get_state(); user_data = await state.get_data()
    analysis_type_display = user_data.get("analysis_type", "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É")
    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {analysis_type_display} –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", parse_mode=ParseMode.HTML)
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ '{html.escape(message.text or '–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')}' —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É: {analysis_type_display}).")
        await message.reply(f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel, {user_name_escaped}.", parse_mode=ParseMode.HTML)
    else:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É ({current_state_name}). –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.", parse_mode=ParseMode.HTML)

async def _cleanup_vision_analysis_state(state: FSMContext, bot: Bot, chat_id: Optional[int]) -> None: # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ
    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id and chat_id:
        try: await bot.delete_message(chat_id=chat_id, message_id=bot_message_id)
        except TelegramAPIError as e: logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞–Ω—É –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
    await state.clear()

def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func) -> None:
    try:
        dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
        dp.message.register(cmd_analyze_player_stats, Command("analyzestats"))
        dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
        dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
        dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")
        cancel_states = [VisionAnalysisStates.awaiting_profile_screenshot, VisionAnalysisStates.awaiting_analysis_trigger]
        for cancel_state in cancel_states: dp.message.register(cancel_analysis, cancel_state, Command("cancel"))
        wrong_input_handler_with_go = lambda message, state, bot: handle_wrong_input_for_analysis(message, state, bot, cmd_go_handler_func)
        dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_profile_screenshot)
        dp.message.register(wrong_input_handler_with_go, VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å: {e}")
        raise