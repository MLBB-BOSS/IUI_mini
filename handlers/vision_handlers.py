import base64
import html
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import OPENAI_API_KEY, logger # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logger –∑ config
from services.openai_service import MLBBChatGPT, PROFILE_SCREENSHOT_PROMPT
from states.vision_states import VisionAnalysisStates
from utils.message_utils import send_message_in_chunks
# from ..config import OPENAI_API_KEY, logger
# from ..services.openai_service import MLBBChatGPT, PROFILE_SCREENSHOT_PROMPT
# from ..states.vision_states import VisionAnalysisStates
# from ..utils.message_utils import send_message_in_chunks
# –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Ç–∞–∫–æ–∂ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ cmd_go, —è–∫—â–æ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
# from .general_handlers import cmd_go # –ê–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∏–π
# logger = logging.getLogger(__name__)

async def cmd_analyze_profile(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /analyzeprofile. –ó–∞–ø–∏—Ç—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} (ID: {user_id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name_escaped}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )

async def handle_profile_screenshot(message: Message, state: FSMContext, bot: Bot): # –î–æ–¥–∞–Ω–æ bot
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    user_id = user.id if user else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    chat_id = message.chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≤—ñ–¥ {user_name_escaped} (ID: {user_id}).")

    if not message.photo: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ —Ñ–æ—Ç–æ
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return

    photo_file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ

    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º, —è–∫—â–æ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞
        await message.delete()
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name_escaped} –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º: {e}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    await state.update_data(vision_photo_file_id=photo_file_id, original_user_name=user_name_escaped)

    caption_text = "–°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ."

    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])

    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –Ω–∞–∑–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –∞–ª–µ –≤–∂–µ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –±–æ—Ç–∞, –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        sent_message = await bot.send_photo( # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
            chat_id=chat_id,
            photo=photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name_escaped} –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏. –ù–æ–≤–∏–π state: awaiting_analysis_trigger")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name_escaped}: {e}")
        try:
            await bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except TelegramAPIError as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name_escaped}: {send_err}")
        await state.clear()


async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot): # –î–æ–¥–∞–Ω–æ bot
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª—ñ–∑", –≤–∏–∫–ª–∏–∫–∞—î Vision API —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    if not callback_query.message or not callback_query.message.chat:
        logger.error("trigger_vision_analysis_callback: callback_query.message –∞–±–æ callback_query.message.chat is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.", show_alert=True)
        await state.clear()
        return

    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ —Ñ–æ—Ç–æ —Ç–∞ –∫–Ω–æ–ø–∫–æ—é

    user_data = await state.get_data()
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å") # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å—Ç–∞–Ω—É

    try:
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑—É—é—á–∏, —â–æ –æ–±—Ä–æ–±–∫–∞ –ø–æ—á–∞–ª–∞—Å—è, —ñ –≤–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
        if callback_query.message.caption: # –Ø–∫—â–æ —î –ø—ñ–¥–ø–∏—Å (–º–∞—î –±—É—Ç–∏)
            await callback_query.message.edit_caption(
                caption=f"‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç, {user_name}...",
                reply_markup=None # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            )
        else: # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø—ñ–¥–ø–∏—Å—É –Ω–µ –±—É–ª–æ (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Ç—Ä–∞–ø–∏—Ç–∏—Å—è)
             await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...") # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name}: {e}")

    photo_file_id = user_data.get("vision_photo_file_id")

    if not photo_file_id:
        logger.error(f"File_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}.")
        try:
            if callback_query.message.caption: 
                await callback_query.message.edit_caption(caption=f"–ü–æ–º–∏–ª–∫–∞, {user_name}: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–Ω–æ–≤—É.")
        except TelegramAPIError: pass 
        await state.clear()
        return

    final_caption_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"

    try:
        file_info = await bot.get_file(photo_file_id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")

        downloaded_file_io = await bot.download_file(file_info.file_path) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
        if downloaded_file_io is None: 
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (download_file –ø–æ–≤–µ—Ä–Ω—É–≤ None).")
        
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer: # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OPENAI_API_KEY –∑ config
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PROFILE_SCREENSHOT_PROMPT –∑ openai_service
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, PROFILE_SCREENSHOT_PROMPT)

            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é (JSON) –¥–ª—è {user_name}: {analysis_result_json}")
                response_parts = [f"<b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, {user_name}:</b>"]
                fields_translation = {
                    "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
                    "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)",
                    "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
                    "location": "üåç –õ–æ–∫–∞—Ü—ñ—è", "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥"
                }
                has_data = False
                for key, readable_name in fields_translation.items():
                    value = analysis_result_json.get(key)
                    if value is not None: 
                        display_value = str(value)
                        if key == "highest_rank_season" and ("‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower() or "—Å–ª–∞–≤–∞" in display_value.lower()):
                            if "‚òÖ" not in display_value: 
                                 display_value = display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ")
                            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value) 
                        response_parts.append(f"<b>{readable_name}:</b> {html.escape(display_value)}")
                        has_data = True
                    else:
                         response_parts.append(f"<b>{readable_name}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>")
                
                if not has_data and analysis_result_json.get("raw_response"): 
                     response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.</i>\n–î–µ—Ç–∞–ª—ñ –≤—ñ–¥ –®–Ü: ...{html.escape(analysis_result_json['raw_response'][-100:])}")
                elif not has_data:
                     response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.</i>")

                structured_data_text = "\n".join(response_parts)
                
                profile_description_plain = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
                # –û—Å–∫—ñ–ª—å–∫–∏ PROFILE_DESCRIPTION_PROMPT_TEMPLATE –≤–∏–º–∞–≥–∞—î —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –µ–∫—Ä–∞–Ω—É—î–º–æ –π–æ–≥–æ –¥–ª—è HTML
                final_caption_text = f"{structured_data_text}\n\n{html.escape(profile_description_plain)}"

            else:
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É.') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é (JSON) –¥–ª—è {user_name}: {error_msg}")
                final_caption_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
                if analysis_result_json and analysis_result_json.get("raw_response"):
                    final_caption_text += f"\n–î–µ—Ç–∞–ª—ñ: {html.escape(str(analysis_result_json.get('raw_response'))[:100])}..."
                elif analysis_result_json and analysis_result_json.get("details"):
                     final_caption_text += f"\n–î–µ—Ç–∞–ª—ñ: {html.escape(str(analysis_result_json.get('details'))[:100])}..."

    except TelegramAPIError as e:
        logger.exception(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–ü—Ä–æ–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ñ–∞–π–ª—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ Telegram."
    except ValueError as e: 
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–ù–∞ –∂–∞–ª—å, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞."
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."


    try:
        if callback_query.message: 
            if len(final_caption_text) > 1024: # –õ—ñ–º—ñ—Ç –¥–æ–≤–∂–∏–Ω–∏ –ø—ñ–¥–ø–∏—Å—É –¥–æ –º–µ–¥—ñ–∞
                logger.warning(f"–ü—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è {user_name} –∑–∞–¥–æ–≤–≥–∏–π ({len(final_caption_text)} —Å–∏–º–≤–æ–ª—ñ–≤). –†–µ–¥–∞–≥—É—é —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É —ñ –Ω–∞–¥—Å–∏–ª–∞—é —Ç–µ–∫—Å—Ç –æ–∫—Ä–µ–º–æ.")
                await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None) # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —Ñ–æ—Ç–æ
                await send_message_in_chunks(bot, chat_id, final_caption_text, ParseMode.HTML) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
            else:
                await bot.edit_message_caption( # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=final_caption_text,
                    reply_markup=None, # –ö–Ω–æ–ø–∫–∏ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–±–æ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è —Ç—É—Ç
                    parse_mode=ParseMode.HTML
                )
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ/–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —è–∫ –Ω–æ–≤–µ.")
        try:
            await send_message_in_chunks(bot, chat_id, final_caption_text, ParseMode.HTML) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
        except Exception as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –¥–ª—è {user_name}: {send_err}")
            # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            if callback_query.message: 
                try:
                    await bot.send_message(chat_id, f"–í–∏–±–∞—á—Ç–µ, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                except Exception as final_fallback_err:
                     logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_name}: {final_fallback_err}")

    await state.clear()


async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏" –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ-–ø—Ä–µ–≤'—é —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. """
    if not callback_query.message:
        logger.error("delete_bot_message_callback: callback_query.message is None.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    try:
        await callback_query.message.delete()
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state_str = await state.get_state()
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ —Ü–∏–º –ø–æ—Ç–æ–∫–æ–º –∞–Ω–∞–ª—ñ–∑—É
        if current_state_str == VisionAnalysisStates.awaiting_analysis_trigger.state:
            user_name = (await state.get_data()).get("original_user_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            logger.info(f"–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name}, —Å—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ.")
            await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ (–π–º–æ–≤—ñ—Ä–Ω–æ, –ø—Ä–µ–≤'—é): {e}")
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)


async def cancel_profile_analysis(message: Message, state: FSMContext, bot: Bot): # –î–æ–¥–∞–Ω–æ bot
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ–º–∞–Ω–¥–æ—é /cancel.")

    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id and message.chat: 
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É {user_name_escaped}.")
        except TelegramAPIError: 
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–µ–≤'—é –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name_escaped}.")

    await state.clear()
    await message.reply(f"–ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {user_name_escaped}. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go.")


async def handle_wrong_input_for_profile_screenshot(message: Message, state: FSMContext, bot: Bot, cmd_go_handler): # –î–æ–¥–∞–Ω–æ bot —Ç–∞ cmd_go_handler
    """–û–±—Ä–æ–±–ª—è—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –∞–±–æ —Ç—Ä–∏–≥–µ—Ä–∞ –∞–Ω–∞–ª—ñ–∑—É."""
    user = message.from_user
    user_name_escaped = html.escape(user.first_name if user else "–ì—Ä–∞–≤–µ—Ü—å")

    # –Ø–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel
    if message.text and message.text.lower() == "/cancel":
        await cancel_profile_analysis(message, state, bot) # –ü–µ—Ä–µ–¥–∞—î–º–æ bot
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ /go, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –æ–±—Ä–æ–±–Ω–∏–∫ /go
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        user_data = await state.get_data()
        bot_message_id = user_data.get("bot_message_id_for_analysis")
        if bot_message_id and message.chat:
            try: await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π bot
            except TelegramAPIError: pass
        await state.clear()
        await cmd_go_handler(message, state, bot) # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ cmd_go
        return 

    current_state_name = await state.get_state()
    if current_state_name == VisionAnalysisStates.awaiting_profile_screenshot.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot. –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ.")
        await message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name_escaped}, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    elif current_state_name == VisionAnalysisStates.awaiting_analysis_trigger.state:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ '{html.escape(message.text or '–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')}' —É —Å—Ç–∞–Ω—ñ awaiting_analysis_trigger. –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply(f"–û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º (–∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ñ–æ—Ç–æ) –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ /cancel, {user_name_escaped}.")
    else: 
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name_escaped} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, {user_name_escaped}.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
def register_vision_handlers(dp: Dispatcher, cmd_go_handler_func): # –î–æ–¥–∞–Ω–æ cmd_go_handler_func
    dp.message.register(cmd_analyze_profile, Command("analyzeprofile"))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —É —Å—Ç–∞–Ω—ñ awaiting_profile_screenshot
    dp.message.register(handle_profile_screenshot, VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–ª–±–µ–∫—É –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª—ñ–∑"
    dp.callback_query.register(trigger_vision_analysis_callback, F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–ª–±–µ–∫—É –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏"
    dp.callback_query.register(delete_bot_message_callback, F.data == "delete_bot_message")
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /cancel —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Å—Ç–∞–Ω–∞—Ö
    dp.message.register(cancel_profile_analysis, VisionAnalysisStates.awaiting_profile_screenshot, Command("cancel"))
    dp.message.register(cancel_profile_analysis, VisionAnalysisStates.awaiting_analysis_trigger, Command("cancel"))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É —É —Å—Ç–∞–Ω–∞—Ö (–º–∞—é—Ç—å –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –¥–ª—è —Ü–∏—Ö —Å—Ç–∞–Ω—ñ–≤)
    # –ü–µ—Ä–µ–¥–∞—î–º–æ cmd_go_handler_func –≤ lambda, —â–æ–± –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–ª—è –≤–∏–∫–ª–∏–∫—É
    dp.message.register(
        lambda message, state, bot: handle_wrong_input_for_profile_screenshot(message, state, bot, cmd_go_handler_func),
        VisionAnalysisStates.awaiting_profile_screenshot
    )
    dp.message.register(
        lambda message, state, bot: handle_wrong_input_for_profile_screenshot(message, state, bot, cmd_go_handler_func),
        VisionAnalysisStates.awaiting_analysis_trigger
    )
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
