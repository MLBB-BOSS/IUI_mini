"""
Handler for GPT Vision Beta functionality.
Allows users to send an image for general analysis by OpenAI's GPT Vision model.
"""
import base64
import logging
from io import BytesIO
from typing import Union

import aiohttp
import tenacity
from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.enums import ParseMode

# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ OPENAI_API_KEY —Ç–∞ VISION_MODEL_NAME —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥: from config.settings import OPENAI_API_KEY, VISION_BETA_MODEL_NAME
# –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—ó —Ä–µ–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏ —ñ–º–ø–æ—Ä—Ç—É —Ç–∞ –Ω–∞–∑–≤–∏ –∑–º—ñ–Ω–Ω–∏—Ö
try:
    from config.settings import OPENAI_API_KEY, VISION_BETA_MODEL_NAME
except ImportError:
    logging.critical("OPENAI_API_KEY or VISION_BETA_MODEL_NAME not found in config.settings.")
    # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à –≤–∏—Ç–æ–Ω—á–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∞–±–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
    OPENAI_API_KEY = "YOUR_OPENAI_API_KEY_HERE" # –ó–∞–≥–ª—É—à–∫–∞
    VISION_BETA_MODEL_NAME = "gpt-4o" # –ê–±–æ "gpt-4-vision-preview"

# –Ü–º–ø–æ—Ä—Ç—É–π —Å–≤–æ—ó —Å—Ç–∞–Ω–∏
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥: from states.all_states import VisionBetaStates
# –ê–±–æ:
from states.vision_states import VisionBetaStates


router = Router(name="vision_beta_handler")
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"
MAX_API_RETRIES = 3
API_TIMEOUT_SECONDS = 120 # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –¥–æ–≤–≥–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π Vision
GENERAL_VISION_PROMPT = (
    "–¢–∏ ‚Äî –±–∞–≥–∞—Ç–æ—Ü—ñ–ª—å–æ–≤–∏–π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π AI. –û–ø–∏—à–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ. "
    "–Ø–∫—â–æ —Ü–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –≥—Ä–∏, —Å–ø—Ä–æ–±—É–π –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≥—Ä—É —Ç–∞ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ. "
    "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
)
MAX_IMAGE_SIZE_BYTES = 4 * 1024 * 1024  # 4MB - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è GPT-4 Vision


async def download_image(message: Message, bot: Bot) -> Union[BytesIO, None]:
    """
    Downloads the image sent by the user (photo or document).

    Args:
        message: The user's message object.
        bot: The Bot instance.

    Returns:
        A BytesIO object containing the image data, or None if download fails
        or image is too large.
    """
    file_id = None
    file_size = None

    if message.photo:
        # –ë–µ—Ä–µ–º–æ —Ñ–æ—Ç–æ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        file_id = message.photo[-1].file_id
        file_size = message.photo[-1].file_size
    elif message.document and message.document.mime_type and message.document.mime_type.startswith("image/"):
        file_id = message.document.file_id
        file_size = message.document.file_size
    else:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ —Ñ–æ—Ç–æ –∞–±–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª)."
        )
        return None

    if file_id and file_size:
        if file_size > MAX_IMAGE_SIZE_BYTES:
            await message.reply(
                f"–í–∏–±–∞—á—Ç–µ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ({(file_size / (1024*1024)):.1f}MB). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ä–æ–∑–º—ñ—Ä: {(MAX_IMAGE_SIZE_BYTES / (1024*1024)):.0f}MB."
            )
            return None
        try:
            file_info = await bot.get_file(file_id)
            if not file_info.file_path:
                logger.error(f"Failed to get file_path for file_id: {file_id}")
                return None
            image_bytes_io = await bot.download_file(file_info.file_path)
            return image_bytes_io
        except TelegramAPIError as e:
            logger.error(f"Telegram API error downloading image {file_id}: {e}")
            await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return None
        except Exception as e:
            logger.exception(f"Unexpected error downloading image {file_id}: {e}")
            await message.reply("–°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            return None
    return None


@tenacity.retry(
    stop=tenacity.stop_after_attempt(MAX_API_RETRIES),
    wait=tenacity.wait_exponential(multiplier=1, min=2, max=10),
    retry=tenacity.retry_if_exception_type(aiohttp.ClientError),
    reraise=True,
)
async def call_openai_vision_api(
    base64_image: str,
    prompt: str,
    model: str = VISION_BETA_MODEL_NAME,
    max_tokens: int = 1024, # –ú–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏
) -> Union[str, None]:
    """
    Calls the OpenAI GPT Vision API.

    Args:
        base64_image: The base64 encoded image string.
        prompt: The prompt to send to the model.
        model: The GPT model to use.
        max_tokens: The maximum number of tokens for the response.

    Returns:
        The text content from the API response, or None if an error occurs.
    """
    if not OPENAI_API_KEY or OPENAI_API_KEY == "YOUR_OPENAI_API_KEY_HERE":
        logger.error("OpenAI API key is not configured for Vision (beta) call.")
        return "–ü–æ–º–∏–ª–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ."

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {OPENAI_API_KEY}",
    }
    payload = {
        "model": model,
        "messages": [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                    },
                ],
            }
        ],
        "max_tokens": max_tokens,
    }

    try:
        async with aiohttp.ClientSession() as session:
            logger.info(f"Sending Vision API request. Model: {model}. Prompt: '{prompt[:70]}...'")
            async with session.post(
                OPENAI_API_URL, headers=headers, json=payload, timeout=API_TIMEOUT_SECONDS
            ) as response:
                response_data = await response.json()
                if response.status == 200:
                    content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                    if content:
                        logger.info("Vision API call successful.")
                        return content.strip()
                    logger.error(f"Vision API response structure unexpected: {response_data}")
                    return "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ."
                error_details = response_data.get("error", {}).get("message", str(response_data))
                logger.error(f"Vision API request failed. Status: {response.status}, Details: {error_details}")
                return f"–ü–æ–º–∏–ª–∫–∞ API ({response.status}): {error_details}"
    except aiohttp.ClientError as e:
        logger.error(f"HTTP error during Vision API call: {e}")
        # tenacity
        raise
    except Exception as e:
        logger.exception(f"Unexpected error during Vision API call: {e}")
        return "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ Vision API."


@router.message(Command("vision_beta"))
async def cmd_vision_beta(message: Message, state: FSMContext):
    """
    Handles the /vision_beta command.
    Prompts the user to send an image for analysis.
    """
    await state.set_state(VisionBetaStates.AWAITING_IMAGE)
    await message.reply(
        "üîÆ **–ë–µ—Ç–∞-–≤–µ—Ä—Å—ñ—è –ê–Ω–∞–ª—ñ–∑—É –ó–æ–±—Ä–∞–∂–µ–Ω—å** üîÆ\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫ —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç), —ñ —è —Å–ø—Ä–æ–±—É—é –π–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏. "
        "–¶–µ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –∑–∞–≤–∂–¥–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–º–∏."
    )
    logger.info(f"User {message.from_user.id} initiated /vision_beta. Awaiting image.")


@router.message(VisionBetaStates.AWAITING_IMAGE, F.content_type.in_({'photo', 'document'}))
async def handle_vision_image(message: Message, state: FSMContext, bot: Bot):
    """
    Handles the image sent by the user when in AWAITING_IMAGE state.
    Processes the image using GPT Vision and sends back the analysis.
    """
    processing_message = await message.reply("‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.")
    
    image_bytes_io = await download_image(message, bot)

    if not image_bytes_io:
        # download_image –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞
        try: # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ "–û–±—Ä–æ–±–ª—è—é..."
            await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
        except TelegramAPIError:
            pass # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –Ω—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        await state.clear() # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
        return

    try:
        image_bytes_io.seek(0) # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        base64_image_str = base64.b64encode(image_bytes_io.read()).decode("utf-8")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ—ó
        analysis_result = await call_openai_vision_api(
            base64_image=base64_image_str, prompt=GENERAL_VISION_PROMPT
        )

        if analysis_result:
            # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –¥–æ–≤–≥–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (Telegram –º–∞—î –ª—ñ–º—ñ—Ç ~4096 —Å–∏–º–≤–æ–ª—ñ–≤)
            max_length = 4000 # –¢—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –ª—ñ–º—ñ—Ç—É –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            if len(analysis_result) > max_length:
                parts = [analysis_result[i:i + max_length] for i in range(0, len(analysis_result), max_length)]
                for i, part in enumerate(parts):
                    header = f"üìÑ **–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—á–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(parts)}):**\n\n" if len(parts) > 1 else "üìÑ **–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:**\n\n"
                    await message.answer(f"{header}{part}", parse_mode=ParseMode.MARKDOWN) # –ê–±–æ HTML, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            else:
                await message.answer(f"üìÑ **–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:**\n\n{analysis_result}", parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –∞–±–æ –ø—ñ–∑–Ω—ñ—à–µ.")

    except tenacity.RetryError:
        logger.error("GPT Vision API call failed after multiple retries.")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –∞–Ω–∞–ª—ñ–∑—É –ø—ñ—Å–ª—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.exception(f"Error processing vision image for user {message.from_user.id}: {e}")
        await message.reply("–°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
    finally:
        try:
            await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
        except TelegramAPIError:
            pass # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏
        await state.clear()


@router.message(VisionBetaStates.AWAITING_IMAGE)
async def handle_wrong_content_vision(message: Message, state: FSMContext):
    """
    Handles incorrect content type when AWAITING_IMAGE state is active.
    """
    await message.reply(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç). "
        "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É."
    )
