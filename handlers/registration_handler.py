"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states.profile_states import ProfileRegistration
from keyboards.profile_keyboards import get_profile_menu_keyboard, get_confirm_delete_keyboard
from database.crud import get_user_by_telegram_id, add_or_update_user, delete_user
from config import logger

# –£—è–≤—ñ–º–æ, —â–æ —É –≤–∞—Å —î —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤
# from vision.analyzer import analyze_screenshot

# --- Mock-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ ---
# –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–®–£ –†–ï–ê–õ–¨–ù–£ –§–£–ù–ö–¶–Ü–Æ
async def analyze_screenshot(photo: bytes, mode: str) -> dict:
    """
    Mock-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—É.
    –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ –≤–∞—à–æ–≥–æ Vision-–º–æ–¥—É–ª—è.
    """
    logger.info(f"–ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –≤ —Ä–µ–∂–∏–º—ñ: {mode}")
    if mode == "basic":
        return {"nickname": "MockPlayer", "player_id": 12345678, "server_id": 1234, "current_rank": "–ú—ñ—Ñ—ñ—á–Ω–∏–π"}
    if mode == "stats":
        return {"total_matches": 1500, "win_rate": 55.5}
    if mode == "heroes":
        return {"favorite_heroes": "–§–∞–Ω–Ω—ñ, –õ—ñ–Ω, –ì—Ä–µ–π–Ω–¥–∂–µ—Ä"}
    return {}
# --- –ö—ñ–Ω–µ—Ü—å Mock-—Ñ—É–Ω–∫—Ü—ñ—ó ---

router = Router()

def format_profile_message(user_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ—Ñ—ñ–ª—é."""
    lines = [
        f"üë§ **–ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è @{user_data.get('nickname', 'N/A')}**",
        "",
        f"**–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**",
        f"  - ID –≥—Ä–∞–≤—Ü—è: `{user_data.get('player_id', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}` (–°–µ—Ä–≤–µ—Ä: `{user_data.get('server_id', 'N/A')}`)",
        f"  - –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥: {user_data.get('current_rank', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}",
        "",
        "**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
        f"  - –í—Å—å–æ–≥–æ –º–∞—Ç—á—ñ–≤: {user_data.get('total_matches', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}",
        f"  - –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {user_data.get('win_rate', 'N/A')}%",
        "",
        "**–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:**",
        f"  - {user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}",
    ]
    return "\n".join(lines)

@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    user_id = message.from_user.id
    user_profile = await get_user_by_telegram_id(user_id)

    if user_profile:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –û—Å—å –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:")
        profile_text = format_profile_message(user_profile)
        await message.answer(profile_text, reply_markup=get_profile_menu_keyboard())
        return

    await state.set_state(ProfileRegistration.waiting_for_initial_photo)
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ **–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É –ø—Ä–æ—Ñ—ñ–ª—é** –≤ Mobile Legends."
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è."""
    await state.clear()
    user_profile = await get_user_by_telegram_id(message.from_user.id)
    if not user_profile:
        await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register.")
        return

    profile_text = format_profile_message(user_profile)
    await message.answer(profile_text, reply_markup=get_profile_menu_keyboard())

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É —Å—Ç–∞–Ω–∞—Ö FSM
@router.message(F.photo, ProfileRegistration)
async def handle_profile_photo(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."""
    current_state = await state.get_state()
    user_id = message.from_user.id
    
    modes = {
        ProfileRegistration.waiting_for_initial_photo: "basic",
        ProfileRegistration.waiting_for_basic_photo_update: "basic",
        ProfileRegistration.waiting_for_stats_photo_update: "stats",
        ProfileRegistration.waiting_for_heroes_photo_update: "heroes",
    }
    
    mode = modes.get(current_state)
    if not mode:
        return

    await message.answer("‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É.")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ
    photo_bytes = await bot.download(message.photo[-1])
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑
    extracted_data = await analyze_screenshot(photo_bytes.read(), mode)

    if not extracted_data:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ —á—ñ—Ç–∫–µ —Ç–∞ –Ω–µ–æ–±—Ä—ñ–∑–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ
    user_profile = await get_user_by_telegram_id(user_id) or {"telegram_id": user_id}
    user_profile.update(extracted_data) # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏

    await add_or_update_user(user_profile)
    
    success_message = {
        "basic": "‚úÖ –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!",
        "stats": "‚úÖ –ó–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ!",
        "heroes": "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—ó–≤ –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ!",
    }[mode]
    
    await message.answer(success_message)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    updated_profile = await get_user_by_telegram_id(user_id)
    profile_text = format_profile_message(updated_profile)
    await message.answer(profile_text, reply_markup=get_profile_menu_keyboard())
    
    await state.clear()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---

@router.callback_query(F.data == "profile_update_basic")
async def cb_update_basic(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileRegistration.waiting_for_basic_photo_update)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç **–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É –ø—Ä–æ—Ñ—ñ–ª—é**.")
    await callback.answer()

@router.callback_query(F.data == "profile_add_stats")
async def cb_add_stats(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileRegistration.waiting_for_stats_photo_update)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ **'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' -> '–í—Å—ñ —Å–µ–∑–æ–Ω–∏'**.")
    await callback.answer()

@router.callback_query(F.data == "profile_add_heroes")
async def cb_add_heroes(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileRegistration.waiting_for_heroes_photo_update)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ **'–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó' -> '–í—Å—ñ —Å–µ–∑–æ–Ω–∏'** (–ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤–∏–¥–Ω–æ —Ç–æ–ø-3).")
    await callback.answer()

@router.callback_query(F.data == "profile_delete")
async def cb_delete_profile(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileRegistration.confirming_deletion)
    await callback.message.edit_text(
        "**–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å?**\n\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
        reply_markup=get_confirm_delete_keyboard()
    )
    await callback.answer()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ---

@router.callback_query(F.data == "confirm_delete_yes", ProfileRegistration.confirming_deletion)
async def cb_confirm_delete(callback: CallbackQuery, state: FSMContext):
    deleted = await delete_user(callback.from_user.id)
    if deleted:
        await callback.message.edit_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "confirm_delete_no", ProfileRegistration.confirming_deletion)
async def cb_cancel_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_profile = await get_user_by_telegram_id(callback.from_user.id)
    if not user_profile:
        await callback.message.edit_text("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. /register, —â–æ–± –ø–æ—á–∞—Ç–∏.")
        return
        
    profile_text = format_profile_message(user_profile)
    await callback.message.edit_text(profile_text, reply_markup=get_profile_menu_keyboard())
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

def register_registration_handlers(dp):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º."""
    dp.include_router(router)
