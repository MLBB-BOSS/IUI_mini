#handlers/registration_handler.py
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
–≤–∫–ª—é—á–Ω–æ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
"""
import html
import base64
import io
import asyncio
from enum import Enum, auto
from typing import Dict, Any, Optional, List, Union

from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery, PhotoSize, InputMediaPhoto,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import (
    create_expanded_profile_menu_keyboard, create_delete_confirm_keyboard
)
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id, delete_user_by_telegram_id
from config import OPENAI_API_KEY, logger

registration_router = Router()

# === –õ–û–ì–Ü–ö–ê –ö–ê–†–£–°–ï–õ–Ü (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ profile_handler.py) ===

class CarouselType(Enum):
    AVATAR = auto()
    PROFILE = auto()
    STATS = auto()
    HEROES = auto()

CAROUSEL_TYPE_TO_KEY = {
    CarouselType.AVATAR: "custom_avatar_file_id",
    CarouselType.PROFILE: "profile_screenshot_file_id",
    CarouselType.STATS: "stats_screenshot_file_id",
    CarouselType.HEROES: "heroes_screenshot_file_id",
}

CAROUSEL_TYPE_TO_TITLE = {
    CarouselType.AVATAR: "üé≠ –ê–≤–∞—Ç–∞—Ä",
    CarouselType.PROFILE: "üë§ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å",
    CarouselType.STATS: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    CarouselType.HEROES: "ü¶∏ –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó",
}

DEFAULT_IMAGE_URL = "https://res.cloudinary.com/ha1pzppgf/image/upload/v1748286434/file_0000000017a46246b78bf97e2ecd9348_zuk16r.png"

def create_carousel_keyboard(current_type: CarouselType, available_types: List[CarouselType]):
    builder = InlineKeyboardBuilder()
    current_idx = available_types.index(current_type)
    
    nav_row = []
    nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"carousel:goto:{available_types[current_idx - 1].name}") if current_idx > 0 else InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop"))
    nav_row.append(InlineKeyboardButton(text=f"{current_idx + 1}/{len(available_types)}", callback_data="carousel:noop"))
    nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"carousel:goto:{available_types[current_idx + 1].name}") if current_idx < len(available_types) - 1 else InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop"))
    builder.row(*nav_row)
    
    edit_map = { CarouselType.AVATAR: "profile_add_avatar", CarouselType.PROFILE: "profile_update_basic", CarouselType.STATS: "profile_add_stats", CarouselType.HEROES: "profile_add_heroes" }
    builder.row(InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ü–µ —Ñ–æ—Ç–æ", callback_data=edit_map[current_type]), InlineKeyboardButton(text="‚öôÔ∏è –ë—ñ–ª—å—à–µ –æ–ø—Ü—ñ–π", callback_data="profile_menu_expand"))
    builder.row(InlineKeyboardButton(text="üö™ –ó–∞–∫—Ä–∏—Ç–∏", callback_data="profile_carousel_close"))
    return builder.as_markup()

def format_profile_info(user_data: Dict[str, Any]) -> str:
    nickname = user_data.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
    player_id = user_data.get('player_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    server_id = user_data.get('server_id', '–ù–µ–≤—ñ–¥–æ–º–æ')
    rank = user_data.get('current_rank', '–ù–µ–≤—ñ–¥–æ–º–æ')
    win_rate = user_data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ–≤—ñ–¥–æ–º–æ"
    matches = user_data.get('total_matches', '–ù–µ–≤—ñ–¥–æ–º–æ')
    heroes = user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    return (f"üë§ <b>{nickname}</b>\nüÜî <b>ID:</b> {player_id} ({server_id})\nüèÜ <b>–†–∞–Ω–≥:</b> {rank}\n"
            f"üìä <b>WR:</b> {win_rate_str} ({matches} –º–∞—Ç—á—ñ–≤)\nü¶∏ <b>–ì–µ—Ä–æ—ó:</b> {heroes}")

def get_caption_for_carousel_type(carousel_type: CarouselType, user_data: Dict[str, Any]) -> str:
    title = CAROUSEL_TYPE_TO_TITLE.get(carousel_type, "–ü—Ä–æ—Ñ—ñ–ª—å")
    return f"<b>{title}</b>\n\n{format_profile_info(user_data)}" if carousel_type == CarouselType.AVATAR else f"<b>{title}</b>"

async def show_profile_carousel(bot: Bot, chat_id: int, user_id: int, carousel_type: CarouselType = CarouselType.AVATAR, message_to_edit: Optional[Message] = None):
    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        text = "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /profile –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        if message_to_edit: await message_to_edit.edit_text(text)
        else: await bot.send_message(chat_id, text)
        return
    
    available_types = [c for c in CarouselType if user_data.get(CAROUSEL_TYPE_TO_KEY.get(c))]
    if not available_types: available_types = [CarouselType.AVATAR]
    if carousel_type not in available_types: carousel_type = available_types[0]
    
    file_id = user_data.get(CAROUSEL_TYPE_TO_KEY.get(carousel_type)) or DEFAULT_IMAGE_URL
    keyboard = create_carousel_keyboard(carousel_type, available_types)
    caption = get_caption_for_carousel_type(carousel_type, user_data)
    media = InputMediaPhoto(media=file_id, caption=caption, parse_mode="HTML")
    
    try:
        if message_to_edit:
            if message_to_edit.photo:
                await bot.edit_message_media(chat_id, message_to_edit.message_id, media, reply_markup=keyboard)
            else:
                await message_to_edit.delete()
                await bot.send_photo(chat_id, file_id, caption=caption, reply_markup=keyboard, parse_mode="HTML")
        else:
            await bot.send_photo(chat_id, file_id, caption=caption, reply_markup=keyboard, parse_mode="HTML")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ: {e}")
        await bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ.")

# === –û–°–ù–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ö–û–ú–ê–ù–î–ò /profile ===

@registration_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext, bot: Bot):
    if not message.from_user: return
    await state.clear()
    try: await message.delete()
    except TelegramAPIError as e: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /profile: {e}")
    
    user_data = await get_user_by_telegram_id(message.from_user.id)
    if user_data:
        await show_profile_carousel(bot, message.chat.id, message.from_user.id)
    else:
        await state.set_state(RegistrationFSM.waiting_for_basic_photo)
        sent_msg = await bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
        await state.update_data(last_bot_message_id=sent_msg.message_id)

# === –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –ö–ê–†–£–°–ï–õ–Ü ===

@registration_router.callback_query(F.data.startswith("carousel:goto:"))
async def carousel_navigation(callback: CallbackQuery, bot: Bot):
    if not (callback.message and callback.from_user): return
    try:
        carousel_type = CarouselType[callback.data.split(":")[-1]]
        await show_profile_carousel(bot, callback.message.chat.id, callback.from_user.id, carousel_type, callback.message)
        await callback.answer()
    except (KeyError, ValueError):
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–ª–∞–π–¥—É")

@registration_router.callback_query(F.data == "profile_carousel_close")
async def close_profile_carousel(callback: CallbackQuery):
    if callback.message: await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ")

@registration_router.callback_query(F.data == "carousel:noop")
async def carousel_noop(callback: CallbackQuery):
    await callback.answer()

@registration_router.callback_query(F.data == "profile_menu_expand")
async def expand_menu_from_carousel(callback: CallbackQuery):
    if callback.message:
        await callback.message.edit_reply_markup(reply_markup=create_expanded_profile_menu_keyboard())
    await callback.answer()

# === –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø FSM (–û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ) ===

@registration_router.callback_query(F.data == "profile_update_basic")
@registration_router.callback_query(F.data == "profile_add_stats")
@registration_router.callback_query(F.data == "profile_add_heroes")
@registration_router.callback_query(F.data == "profile_add_avatar")
async def profile_update_handler(callback: CallbackQuery, state: FSMContext):
    state_map = {
        "profile_update_basic": (RegistrationFSM.waiting_for_basic_photo, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é."),
        "profile_add_stats": (RegistrationFSM.waiting_for_stats_photo, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."),
        "profile_add_heroes": (RegistrationFSM.waiting_for_heroes_photo, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤."),
        "profile_add_avatar": (RegistrationFSM.waiting_for_avatar_photo, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –∞–≤–∞—Ç–∞—Ä–∫–∏."),
    }
    new_state, text = state_map[callback.data]
    await state.set_state(new_state)
    if callback.message:
        await callback.message.edit_text(text)
        await state.update_data(last_bot_message_id=callback.message.message_id)
    await callback.answer()

@registration_router.message(StateFilter(RegistrationFSM.waiting_for_basic_photo, RegistrationFSM.waiting_for_stats_photo, RegistrationFSM.waiting_for_heroes_photo, RegistrationFSM.waiting_for_avatar_photo), F.photo)
async def handle_profile_photo_update(message: Message, state: FSMContext, bot: Bot):
    if not (message.photo and message.from_user): return
    
    state_data = await state.get_data()
    last_bot_msg_id = state_data.get("last_bot_message_id")
    current_state_str = await state.get_state()
    
    try: await message.delete()
    except TelegramAPIError: pass

    if not last_bot_msg_id:
        await bot.send_message(message.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ /profile.")
        await state.clear()
        return

    thinking_msg = await bot.edit_message_text(message.chat.id, last_bot_msg_id, text="–û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è... ü§ñ")
    
    try:
        largest_photo = max(message.photo, key=lambda p: p.file_size or 0)
        update_data = {'telegram_id': message.from_user.id}
        
        mode_map = {
            RegistrationFSM.waiting_for_basic_photo.state: ('basic', 'profile_screenshot_file_id'),
            RegistrationFSM.waiting_for_stats_photo.state: ('stats', 'stats_screenshot_file_id'),
            RegistrationFSM.waiting_for_heroes_photo.state: ('heroes', 'heroes_screenshot_file_id'),
        }

        if current_state_str == RegistrationFSM.waiting_for_avatar_photo.state:
            update_data['custom_avatar_file_id'] = largest_photo.file_id
        else:
            analysis_mode, file_id_key = mode_map[current_state_str]
            image_bytes_io = await bot.download_file(largest_photo.file_id)
            image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')
            
            async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
                analysis_result = await gpt.analyze_user_profile(image_base64, mode=analysis_mode)

            if not analysis_result or 'error' in analysis_result:
                error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
                await thinking_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
                return

            if analysis_mode == 'basic':
                update_data.update({'nickname': analysis_result.get('game_nickname'), 'player_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split(' ')[0]), 'server_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split('(')[1].replace(')', '')), 'current_rank': analysis_result.get('highest_rank_season'), 'total_matches': analysis_result.get('matches_played')})
            elif analysis_mode == 'stats':
                main_ind = analysis_result.get('main_indicators', {})
                update_data.update({'total_matches': main_ind.get('matches_played'), 'win_rate': main_ind.get('win_rate')})
            elif analysis_mode == 'heroes':
                heroes_list = analysis_result.get('favorite_heroes', [])
                update_data['favorite_heroes'] = ", ".join([h.get('hero_name', '') for h in heroes_list if h.get('hero_name')])
            
            update_data[file_id_key] = largest_photo.file_id
        
        status = await add_or_update_user({k: v for k, v in update_data.items() if v is not None})
        
        if status == 'success':
            await show_profile_carousel(bot, message.chat.id, message.from_user.id, message_to_edit=thinking_msg)
        elif status == 'conflict':
            await thinking_msg.edit_text("üõ°Ô∏è <b>–ö–æ–Ω—Ñ–ª—ñ–∫—Ç!</b> –¶–µ–π —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        else:
            await thinking_msg.edit_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ:")
        if 'thinking_msg' in locals(): await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")
    finally:
        await state.clear()

# === –û–ë–†–û–ë–ù–ò–ö–ò –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ ===

@registration_router.callback_query(F.data == "profile_delete")
async def profile_delete_handler(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await state.set_state(RegistrationFSM.confirming_deletion)
        await callback.message.edit_text("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.", reply_markup=create_delete_confirm_keyboard())
    await callback.answer()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes")
async def confirm_delete_profile(callback: CallbackQuery, state: FSMContext):
    if not (callback.from_user and callback.message): return
    deleted = await delete_user_by_telegram_id(callback.from_user.id)
    await callback.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." if deleted else "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.")
    await state.clear()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no")
async def cancel_delete_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not (callback.from_user and callback.message): return
    await state.clear()
    await show_profile_carousel(bot, callback.message.chat.id, callback.from_user.id, message_to_edit=callback.message)
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

def register_registration_handlers(dp: Dispatcher):
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º (–æ–±'—î–¥–Ω–∞–Ω—ñ) —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
