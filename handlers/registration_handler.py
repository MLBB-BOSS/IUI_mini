#handlers/registration_handler.py
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
import html
import base64
import io
from typing import Dict, Any

from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import (
    create_profile_menu_keyboard, 
    create_delete_confirm_keyboard
)
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id, delete_user_by_telegram_id
from config import OPENAI_API_KEY, logger

registration_router = Router()

def format_profile_display(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    nickname = html.escape(user_data.get('nickname', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
    player_id = user_data.get('player_id', 'N/A')
    server_id = user_data.get('server_id', 'N/A')
    current_rank = html.escape(user_data.get('current_rank', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
    
    total_matches = user_data.get('total_matches', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    win_rate = user_data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    heroes = user_data.get('favorite_heroes')
    heroes_str = html.escape(heroes) if heroes else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    return (
        f"<b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {nickname}\n"
        f"üÜî <b>ID:</b> {player_id} ({server_id})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {current_rank}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {total_matches}\n"
        f"üìä <b>WR:</b> {win_rate_str}\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b> {heroes_str}"
    )

async def show_profile_menu(message: types.Message, user_id: int):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è."""
    user_data = await get_user_by_telegram_id(user_id)
    if user_data:
        profile_text = format_profile_display(user_data)
        await message.answer(
            profile_text,
            reply_markup=create_profile_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –¶–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Ç—Ä–∞–ø–∏—Ç–∏—Å—è, —è–∫—â–æ –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –∞–ª–µ —Ü–µ –∑–∞–ø–æ–±—ñ–∂–Ω–∏–∫
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /profile.")

@registration_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º."""
    if not message.from_user: return
    await state.clear()
    
    user_id = message.from_user.id
    existing_user = await get_user_by_telegram_id(user_id)
    
    if existing_user:
        await show_profile_menu(message, user_id)
    else:
        await state.set_state(RegistrationFSM.waiting_for_basic_photo)
        await message.answer("üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞). üì∏")

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---

@registration_router.callback_query(F.data == "profile_update_basic")
async def profile_update_basic_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_basic_photo)
    await callback.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–¥–µ –Ω—ñ–∫–Ω–µ–π–º, ID, —Ä–∞–Ω–≥).")
    await callback.answer()

@registration_router.callback_query(F.data == "profile_add_stats")
async def profile_add_stats_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_stats_photo)
    await callback.message.edit_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–¥—ñ–ª 'Statistics' -> 'All Seasons').")
    await callback.answer()

@registration_router.callback_query(F.data == "profile_add_heroes")
async def profile_add_heroes_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_heroes_photo)
    await callback.message.edit_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (—Ä–æ–∑–¥—ñ–ª 'Favorite' -> 'All Seasons', —Ç–æ–ø-3).")
    await callback.answer()

# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω—ñ–≤ ---

@registration_router.message(
    StateFilter(
        RegistrationFSM.waiting_for_basic_photo,
        RegistrationFSM.waiting_for_stats_photo,
        RegistrationFSM.waiting_for_heroes_photo
    ),
    F.photo
)
async def handle_profile_update_photo(message: Message, state: FSMContext, bot: Bot):
    if not message.photo or not message.from_user: return

    current_state = await state.get_state()
    mode_map = {
        RegistrationFSM.waiting_for_basic_photo.state: 'basic',
        RegistrationFSM.waiting_for_stats_photo.state: 'stats',
        RegistrationFSM.waiting_for_heroes_photo.state: 'heroes'
    }
    analysis_mode = mode_map.get(current_state)
    if not analysis_mode:
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ /profile.")
        await state.clear()
        return

    thinking_msg = await message.reply(f"–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç ({analysis_mode})... ü§ñ")
    
    try:
        largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info.file_path:
            await thinking_msg.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª.")
            return

        image_bytes_io = await bot.download_file(file_info.file_path)
        image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            analysis_result = await gpt.analyze_user_profile(image_base64, mode=analysis_mode)

        if not analysis_result or 'error' in analysis_result:
            error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
            await thinking_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü—ñ—é.")
            return

        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤
        update_data = {}
        if analysis_mode == 'basic':
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
            update_data = {
                'nickname': analysis_result.get('game_nickname'),
                'player_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split(' ')[0]),
                'server_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split('(')[1].replace(')', '')),
                'current_rank': analysis_result.get('highest_rank_season'),
                'total_matches': analysis_result.get('matches_played')
            }
        elif analysis_mode == 'stats':
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            main_indicators = analysis_result.get('main_indicators', {})
            update_data = {
                'total_matches': main_indicators.get('matches_played'),
                'win_rate': main_indicators.get('win_rate')
            }
        elif analysis_mode == 'heroes':
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ –≥–µ—Ä–æ—è—Ö
            heroes_list = analysis_result.get('favorite_heroes', [])
            heroes_str = ", ".join([h.get('hero_name', '') for h in heroes_list if h.get('hero_name')])
            update_data = {'favorite_heroes': heroes_str}

        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—é—á—ñ –∑ None, —â–æ–± –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
        update_data = {k: v for k, v in update_data.items() if v is not None}

        if not update_data:
            await thinking_msg.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∂–æ–¥–Ω–∏—Ö –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
            
        update_data['telegram_id'] = message.from_user.id
        await add_or_update_user(update_data)
        
        await thinking_msg.delete()
        await message.answer(f"‚úÖ –î–∞–Ω—ñ '{analysis_mode}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        await show_profile_menu(message, message.from_user.id)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ (mode={analysis_mode}):")
        await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ---

@registration_router.callback_query(F.data == "profile_delete")
async def profile_delete_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.confirming_deletion)
    await callback.message.edit_text(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.",
        reply_markup=create_delete_confirm_keyboard()
    )
    await callback.answer()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes")
async def confirm_delete_profile(callback: CallbackQuery, state: FSMContext):
    if not callback.from_user: return
    user_id = callback.from_user.id
    deleted = await delete_user_by_telegram_id(user_id)
    if deleted:
        await callback.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        await callback.answer("–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
    else:
        await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.")
    await state.clear()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no")
async def cancel_delete_profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
    if callback.from_user:
        await show_profile_menu(callback.message, callback.from_user.id) # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑–Ω–æ–≤—É
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

def register_registration_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø—Ä–æ—Ü–µ—Å–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
