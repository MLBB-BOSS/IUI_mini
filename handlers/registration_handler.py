"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
import html
import json
import base64
import io
from aiogram import Bot, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import create_registration_confirmation_keyboard
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id
from config import OPENAI_API_KEY, logger

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
registration_router = Router()

def format_profile_data_for_confirmation(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    return (
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {html.escape(data.get('nickname', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))}\n"
        f"üÜî <b>ID:</b> {data.get('player_id', 'N/A')} ({data.get('server_id', 'N/A')})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {html.escape(data.get('current_rank', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {data.get('total_matches', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìä <b>WR:</b> {data.get('win_rate', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}%\n\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b>\n‚Ä¢ {html.escape(data.get('favorite_heroes', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))}"
    )

@registration_router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –ø–æ–∫–∞–∑—É—î —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ—Ñ—ñ–ª—å."""
    user_id = message.from_user.id
    
    existing_user = await get_user_by_telegram_id(user_id)
    if existing_user:
        profile_info = format_profile_data_for_confirmation(existing_user)
        await message.answer(f"–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ:\n\n{profile_info}", parse_mode="HTML")
        return

    await state.set_state(RegistrationFSM.waiting_for_photo)
    await message.answer("–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é. üì∏")

@registration_router.message(RegistrationFSM.waiting_for_photo, F.photo)
async def handle_registration_photo(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é, –∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    if not message.photo or not message.from_user:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    thinking_msg = await message.reply("–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å... ü§ñ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    
    try:
        largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info.file_path: return

        image_bytes = await bot.download_file(file_info.file_path)
        if not isinstance(image_bytes, io.BytesIO): return
        
        image_base64 = base64.b64encode(image_bytes.getvalue()).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é
            analysis_result = await gpt.analyze_user_profile(image_base64)

        if not analysis_result or 'error' in analysis_result:
            error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
            await thinking_msg.edit_text(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg} –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
            return
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –¥–∞–Ω—ñ —É FSM
        await state.update_data(profile_data=analysis_result)
        
        confirmation_text = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –¥–∞–Ω—ñ:\n\n"
            f"{format_profile_data_for_confirmation(analysis_result)}\n\n"
            "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏'."
        )
        
        await thinking_msg.edit_text(
            confirmation_text,
            reply_markup=create_registration_confirmation_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationFSM.waiting_for_confirmation)

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

@registration_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ –ë–î –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    user_data = await state.get_data()
    profile_data = user_data.get('profile_data')

    if not profile_data or not callback.from_user:
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    # –î–æ–¥–∞—î–º–æ Telegram ID –¥–æ –¥–∞–Ω–∏—Ö
    profile_data['telegram_id'] = callback.from_user.id
    
    await add_or_update_user(profile_data)
    
    await callback.message.edit_text("‚úÖ –í—ñ—Ç–∞—é! –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await callback.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    await state.clear()

@registration_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    await state.clear()
    await callback.message.edit_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /register.")
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
# === üÜï –§–£–ù–ö–¶–Ü–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –†–û–£–¢–ï–†–ê ===
def register_registration_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø—Ä–æ—Ü–µ—Å–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
