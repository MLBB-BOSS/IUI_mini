#handlers/registration_handler.py
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ª–æ–≥—ñ–∫–∏ "–ß–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É".
"""
import html
import base64
import io
from typing import Dict, Any, Optional
import asyncio

from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.exceptions import TelegramAPIError

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import (
    create_profile_menu_keyboard,
    create_expanded_profile_menu_keyboard,
    create_delete_confirm_keyboard
)
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id, delete_user_by_telegram_id
from config import OPENAI_API_KEY, logger
# ‚ùóÔ∏è –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∫–∞—Ä—É—Å–µ–ª—ñ –¥–ª—è –≤–∏–∫–ª–∏–∫—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
from handlers.profile_handler import show_profile_carousel

registration_router = Router()

def format_profile_display(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    nickname = html.escape(user_data.get('nickname', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
    player_id = user_data.get('player_id', 'N/A')
    server_id = user_data.get('server_id', 'N/A')
    current_rank = html.escape(user_data.get('current_rank', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
    total_matches = user_data.get('total_matches', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    win_rate = user_data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    heroes = user_data.get('favorite_heroes')
    heroes_str = html.escape(heroes) if heroes else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    return (
        f"<b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {nickname}\n"
        f"üÜî <b>ID:</b> {player_id} ({server_id})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {current_rank}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {total_matches}\n"
        f"üìä <b>WR:</b> {win_rate_str}\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b> {heroes_str}"
    )

# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –Ω–∞–ø—Ä—è–º—É, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é
async def show_profile_menu(bot: Bot, chat_id: int, user_id: int, message_to_delete_id: int = None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–¥–∞–ª—è—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ —á–∞—Ç—É."""
    if message_to_delete_id:
        try:
            await bot.delete_message(chat_id, message_to_delete_id)
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º—ñ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_to_delete_id}: {e}")

    # –ó–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é, —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
    await show_profile_carousel(bot, chat_id, user_id)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, —â–æ –∑–∞–ø—É—Å–∫–∞—é—Ç—å FSM ---
@registration_router.callback_query(F.data == "profile_update_basic")
async def profile_update_basic_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_basic_photo)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–¥–µ –Ω—ñ–∫–Ω–µ–π–º, ID, —Ä–∞–Ω–≥)."
            )
        else:
            await callback.message.edit_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–¥–µ –Ω—ñ–∫–Ω–µ–π–º, ID, —Ä–∞–Ω–≥)."
            )
        await state.update_data(last_bot_message_id=callback.message.message_id)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        try:
            new_msg = await callback.bot.send_message(
                callback.message.chat.id,
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–¥–µ –Ω—ñ–∫–Ω–µ–π–º, ID, —Ä–∞–Ω–≥)."
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
        except TelegramAPIError:
            pass
            
    await callback.answer()

@registration_router.callback_query(F.data == "profile_add_stats")
async def profile_add_stats_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_stats_photo)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–¥—ñ–ª 'Statistics' -> 'All Seasons')."
            )
        else:
            await callback.message.edit_text(
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–¥—ñ–ª 'Statistics' -> 'All Seasons')."
            )
        await state.update_data(last_bot_message_id=callback.message.message_id)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        try:
            new_msg = await callback.bot.send_message(
                callback.message.chat.id,
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–¥—ñ–ª 'Statistics' -> 'All Seasons')."
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
        except TelegramAPIError:
            pass
            
    await callback.answer()

@registration_router.callback_query(F.data == "profile_add_heroes")
async def profile_add_heroes_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_heroes_photo)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (—Ä–æ–∑–¥—ñ–ª 'Favorite' -> 'All Seasons', —Ç–æ–ø-3)."
            )
        else:
            await callback.message.edit_text(
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (—Ä–æ–∑–¥—ñ–ª 'Favorite' -> 'All Seasons', —Ç–æ–ø-3)."
            )
        await state.update_data(last_bot_message_id=callback.message.message_id)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        try:
            new_msg = await callback.bot.send_message(
                callback.message.chat.id,
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (—Ä–æ–∑–¥—ñ–ª 'Favorite' -> 'All Seasons', —Ç–æ–ø-3)."
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
        except TelegramAPIError:
            pass
            
    await callback.answer()

# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ, —â–æ —Ä–µ–∞–ª—ñ–∑—É—î "–ß–∏—Å—Ç–∏–π —á–∞—Ç" ---
@registration_router.message(StateFilter(RegistrationFSM.waiting_for_basic_photo, RegistrationFSM.waiting_for_stats_photo, RegistrationFSM.waiting_for_heroes_photo), F.photo)
async def handle_profile_update_photo(message: Message, state: FSMContext, bot: Bot):
    if not message.photo or not message.from_user: return
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    state_data = await state.get_data()
    last_bot_message_id = state_data.get("last_bot_message_id")

    try:
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_id}: {e}")

    current_state_str = await state.get_state()
    mode_map = {
        RegistrationFSM.waiting_for_basic_photo.state: 'basic',
        RegistrationFSM.waiting_for_stats_photo.state: 'stats',
        RegistrationFSM.waiting_for_heroes_photo.state: 'heroes'
    }
    analysis_mode = mode_map.get(current_state_str)
    if not (analysis_mode and last_bot_message_id):
        await bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ /profile.")
        await state.clear()
        return
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ try-except –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    thinking_msg = None
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç (—è–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        thinking_msg = await bot.edit_message_text(
            chat_id=chat_id, 
            message_id=last_bot_message_id, 
            text=f"–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç ({analysis_mode})... ü§ñ"
        )
    except TelegramAPIError as e:
        # –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ, —Å–ø—Ä–æ–±—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å
        if "there is no text in the message to edit" in str(e).lower():
            try:
                thinking_msg = await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=last_bot_message_id,
                    caption=f"–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç ({analysis_mode})... ü§ñ"
                )
            except TelegramAPIError as e2:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e2}")
                # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                thinking_msg = await bot.send_message(
                    chat_id=chat_id,
                    text=f"–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç ({analysis_mode})... ü§ñ"
                )
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            thinking_msg = await bot.send_message(
                chat_id=chat_id,
                text=f"–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç ({analysis_mode})... ü§ñ"
            )
    
    try:
        largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info.file_path:
            await safe_edit_message(thinking_msg, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª.")
            return

        image_bytes_io = await bot.download_file(file_info.file_path)
        image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            analysis_result = await gpt.analyze_user_profile(image_base64, mode=analysis_mode)

        if not analysis_result or 'error' in analysis_result:
            error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
            await safe_edit_message(thinking_msg, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü—ñ—é –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
            await state.set_state(current_state_str) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
            await state.update_data(last_bot_message_id=thinking_msg.message_id)
            return

        update_data = {}
        if analysis_mode == 'basic':
            update_data = {
                'nickname': analysis_result.get('game_nickname'), 'player_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split(' ')[0]),
                'server_id': int(analysis_result.get('mlbb_id_server', '0 (0)').split('(')[1].replace(')', '')), 'current_rank': analysis_result.get('highest_rank_season'),
                'total_matches': analysis_result.get('matches_played'),
                'profile_screenshot_file_id': largest_photo.file_id
            }
        elif analysis_mode == 'stats':
            main_indicators = analysis_result.get('main_indicators', {})
            update_data = {
                'total_matches': main_indicators.get('matches_played'), 'win_rate': main_indicators.get('win_rate'),
                'stats_screenshot_file_id': largest_photo.file_id
            }
        elif analysis_mode == 'heroes':
            heroes_list = analysis_result.get('favorite_heroes', [])
            heroes_str = ", ".join([h.get('hero_name', '') for h in heroes_list if h.get('hero_name')])
            update_data = {
                'favorite_heroes': heroes_str,
                'heroes_screenshot_file_id': largest_photo.file_id
            }
        
        update_data = {k: v for k, v in update_data.items() if v is not None}
        
        if not update_data or (analysis_mode == 'basic' and 'player_id' not in update_data):
            await safe_edit_message(thinking_msg, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∫–ª—é—á–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (–æ—Å–æ–±–ª–∏–≤–æ Player ID). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            await state.set_state(current_state_str)
            await state.update_data(last_bot_message_id=thinking_msg.message_id)
            return
            
        update_data['telegram_id'] = user_id
        
        status = await add_or_update_user(update_data)
        
        if status == 'success':
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
            await show_profile_carousel(bot, chat_id, user_id, message_to_edit=thinking_msg)
        elif status == 'conflict':
            await safe_edit_message(thinking_msg, 
                "üõ°Ô∏è <b>–ö–æ–Ω—Ñ–ª—ñ–∫—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó!</b>\n\n"
                "–¶–µ–π —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —ñ–Ω—à–∏–º –∞–∫–∞—É–Ω—Ç–æ–º Telegram. "
                "–û–¥–∏–Ω —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –ª–∏—à–µ –¥–æ –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É Telegram."
            )
        else: # status == 'error'
            await safe_edit_message(thinking_msg, "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ (mode={analysis_mode}):")
        if thinking_msg: await safe_edit_message(thinking_msg, "–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–µ–Ω—é ---
@registration_router.callback_query(F.data == "profile_menu_expand")
async def profile_menu_expand_handler(callback: CallbackQuery):
    # –¶—è –ª–æ–≥—ñ–∫–∞ —Ç–µ–ø–µ—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ profile_handler, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    # —è–∫—â–æ —Å—Ç–∞—Ä–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–µ—Å—å –∑–∞–ª–∏—à–∏—Ç—å—Å—è
    await callback.message.edit_reply_markup(reply_markup=create_expanded_profile_menu_keyboard())
    await callback.answer()

@registration_router.callback_query(F.data == "profile_menu_collapse")
async def profile_menu_collapse_handler(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=create_profile_menu_keyboard())
    await callback.answer()

@registration_router.callback_query(F.data == "profile_menu_close")
async def profile_menu_close_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ.")

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ---
@registration_router.callback_query(F.data == "profile_delete")
async def profile_delete_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.confirming_deletion)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.",
                reply_markup=create_delete_confirm_keyboard()
            )
        else:
            await callback.message.edit_text(
                "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.",
                reply_markup=create_delete_confirm_keyboard()
            )
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
        try:
            # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback.message.delete()
            new_msg = await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.",
                reply_markup=create_delete_confirm_keyboard()
            )
        except TelegramAPIError:
            pass
            
    await callback.answer()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes")
async def confirm_delete_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user or not callback.message: return
    user_id = callback.from_user.id
    deleted = await delete_user_by_telegram_id(user_id)
    success_text = "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." if deleted else "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î."
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(caption=success_text)
        else:
            await callback.message.edit_text(success_text)
        
        await callback.answer("–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ" if deleted else "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", show_alert=True)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
        try:
            await callback.message.delete()
            await callback.bot.send_message(callback.message.chat.id, success_text)
        except TelegramAPIError:
            pass
            
    await state.clear()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no")
async def cancel_delete_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user or not callback.message: return
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await state.clear()
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
    await show_profile_carousel(bot, chat_id, user_id, message_to_edit=callback.message)
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

# --- –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–≤–∞—Ç–∞—Ä" ---
@registration_router.callback_query(F.data == "profile_add_avatar")
async def profile_add_avatar_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationFSM.waiting_for_avatar_photo)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ—ñ–ª—é.\n\n"
                "üí° <i>–ü–æ—Ä–∞–¥–∞: –ù–∞–π–∫—Ä–∞—â–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∞—à–∏–º –≥–µ—Ä–æ—î–º –∞–±–æ –ª–æ–≥–æ—Ç–∏–ø–æ–º.</i>"
            )
        else:
            await callback.message.edit_text(
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ—ñ–ª—é.\n\n"
                "üí° <i>–ü–æ—Ä–∞–¥–∞: –ù–∞–π–∫—Ä–∞—â–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∞—à–∏–º –≥–µ—Ä–æ—î–º –∞–±–æ –ª–æ–≥–æ—Ç–∏–ø–æ–º.</i>"
            )
        await state.update_data(last_bot_message_id=callback.message.message_id)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        try:
            await callback.message.delete()
            new_msg = await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ—ñ–ª—é.\n\n"
                     "üí° <i>–ü–æ—Ä–∞–¥–∞: –ù–∞–π–∫—Ä–∞—â–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∞—à–∏–º –≥–µ—Ä–æ—î–º –∞–±–æ –ª–æ–≥–æ—Ç–∏–ø–æ–º.</i>",
                parse_mode="HTML"
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
        except TelegramAPIError:
            pass
            
    await callback.answer()

# --- –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ ---
@registration_router.message(RegistrationFSM.waiting_for_avatar_photo, F.photo)
async def handle_avatar_photo(message: Message, state: FSMContext, bot: Bot):
    if not message.photo or not message.from_user: return
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    state_data = await state.get_data()
    last_bot_message_id = state_data.get("last_bot_message_id")

    try:
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ-–∞–≤–∞—Ç–∞—Ä–∫—É –≤—ñ–¥ {user_id}: {e}")

    if not last_bot_message_id:
        await bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ /profile.")
        await state.clear()
        return

    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    thinking_msg = None
    try:
        thinking_msg = await bot.edit_message_text(
            chat_id=chat_id, 
            message_id=last_bot_message_id, 
            text="–ó–±–µ—Ä—ñ–≥–∞—é –≤–∞—à—É –Ω–æ–≤—É –∞–≤–∞—Ç–∞—Ä–∫—É... üñºÔ∏è"
        )
    except TelegramAPIError as e:
        if "there is no text in the message to edit" in str(e).lower():
            try:
                thinking_msg = await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=last_bot_message_id,
                    caption="–ó–±–µ—Ä—ñ–≥–∞—é –≤–∞—à—É –Ω–æ–≤—É –∞–≤–∞—Ç–∞—Ä–∫—É... üñºÔ∏è"
                )
            except TelegramAPIError as e2:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e2}")
                thinking_msg = await bot.send_message(
                    chat_id=chat_id,
                    text="–ó–±–µ—Ä—ñ–≥–∞—é –≤–∞—à—É –Ω–æ–≤—É –∞–≤–∞—Ç–∞—Ä–∫—É... üñºÔ∏è"
                )
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            thinking_msg = await bot.send_message(
                chat_id=chat_id,
                text="–ó–±–µ—Ä—ñ–≥–∞—é –≤–∞—à—É –Ω–æ–≤—É –∞–≤–∞—Ç–∞—Ä–∫—É... üñºÔ∏è"
            )
    
    try:
        largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        
        update_data = {
            'telegram_id': user_id,
            'custom_avatar_file_id': largest_photo.file_id
        }
        
        status = await add_or_update_user(update_data)
        
        if status == 'success':
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await show_profile_carousel(bot, chat_id, user_id, message_to_edit=thinking_msg)
        else:
            await safe_edit_message(thinking_msg, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏:")
        if thinking_msg: await safe_edit_message(thinking_msg, "–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        await state.clear()

# --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
async def safe_edit_message(message: Message, new_text: str) -> None:
    """–ë–µ–∑–ø–µ—á–Ω–æ —Ä–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—é—á–∏ –π–æ–≥–æ —Ç–∏–ø."""
    if not message:
        return
        
    try:
        if message.photo:
            await message.edit_caption(caption=new_text, parse_mode="HTML")
        else:
            await message.edit_text(text=new_text, parse_mode="HTML")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–µ–∑–ø–µ—á–Ω–æ–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def register_registration_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø—Ä–æ—Ü–µ—Å–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
