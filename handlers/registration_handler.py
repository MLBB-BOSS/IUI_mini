#handlers/registration_handler.py
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ª–æ–≥—ñ–∫–∏ "–ß–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É" —Ç–∞ —Å—Ç—ñ–π–∫–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ñ–∞–π–ª—ñ–≤.
"""
import html
import base64
import io
from typing import Dict, Any, Optional, List
import asyncio

from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize, InputMediaPhoto, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from enum import Enum, auto
from aiohttp.client_exceptions import ClientResponseError

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import (
    create_expanded_profile_menu_keyboard,
    create_delete_confirm_keyboard
)
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id, delete_user_by_telegram_id
from config import OPENAI_API_KEY, logger
from utils.file_manager import file_resilience_manager

registration_router = Router()

# === –õ–û–ì–Ü–ö–ê –ö–ê–†–£–°–ï–õ–Ü (–∑–º—ñ–Ω–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è permanent_url) ===

class CarouselType(Enum):
    AVATAR = auto()
    PROFILE = auto()
    STATS = auto()
    HEROES = auto()

CAROUSEL_TYPE_TO_KEY = {
    CarouselType.AVATAR: "custom_avatar_file_id",
    CarouselType.PROFILE: "profile_screenshot_file_id",
    CarouselType.STATS: "stats_screenshot_file_id",
    CarouselType.HEROES: "heroes_screenshot_file_id",
}

CAROUSEL_TYPE_TO_PERMANENT_KEY = {
    CarouselType.AVATAR: "custom_avatar_permanent_url",
    CarouselType.PROFILE: "profile_screenshot_permanent_url",
    CarouselType.STATS: "stats_screenshot_permanent_url",
    CarouselType.HEROES: "heroes_screenshot_permanent_url",
}

CAROUSEL_TYPE_TO_TITLE = {
    CarouselType.AVATAR: "üé≠ –ê–≤–∞—Ç–∞—Ä",
    CarouselType.PROFILE: "üë§ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å",
    CarouselType.STATS: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    CarouselType.HEROES: "ü¶∏ –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó",
}

DEFAULT_IMAGE_URL = "https://res.cloudinary.com/ha1pzppgf/image/upload/v1748286434/file_0000000017a46246b78bf97e2ecd9348_zuk16r.png"

def create_carousel_keyboard(current_type: CarouselType, available_types: list[CarouselType]):
    builder = InlineKeyboardBuilder()
    current_idx = available_types.index(current_type)
    nav_row = [
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"carousel:goto:{available_types[current_idx - 1].name}") if current_idx > 0 else InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop"),
        InlineKeyboardButton(text=f"{current_idx + 1}/{len(available_types)}", callback_data="carousel:noop"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"carousel:goto:{available_types[current_idx + 1].name}") if current_idx < len(available_types) - 1 else InlineKeyboardButton(text="‚Ä¢", callback_data="carousel:noop")
    ]
    builder.row(*nav_row)
    edit_map = { CarouselType.AVATAR: "profile_add_avatar", CarouselType.PROFILE: "profile_update_basic", CarouselType.STATS: "profile_add_stats", CarouselType.HEROES: "profile_add_heroes" }
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=edit_map[current_type]),
        InlineKeyboardButton(text="‚öôÔ∏è –û–ø—Ü—ñ—ó", callback_data="profile_menu_expand")
    )
    builder.row(InlineKeyboardButton(text="üö™ –ó–∞–∫—Ä–∏—Ç–∏", callback_data="profile_carousel_close"))
    return builder.as_markup()

def format_profile_info(user_data: Dict[str, Any]) -> str:
    nickname = html.escape(user_data.get('nickname', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    player_id = user_data.get('player_id', 'N/A')
    server_id = user_data.get('server_id', 'N/A')
    rank = html.escape(user_data.get('current_rank', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    win_rate = user_data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "N/A"
    matches = user_data.get('total_matches', 'N/A')
    heroes = html.escape(user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
    return (f"üë§ <b>{nickname}</b> | üÜî {player_id}({server_id})\n"
            f"üèÜ {rank} | üìä {win_rate_str} ({matches} –º–∞—Ç—á—ñ–≤)\n"
            f"ü¶∏ <b>–ì–µ—Ä–æ—ó:</b> {heroes}")

def get_caption_for_carousel_type(carousel_type: CarouselType, user_data: Dict[str, Any]) -> str:
    title = CAROUSEL_TYPE_TO_TITLE.get(carousel_type, "–ü—Ä–æ—Ñ—ñ–ª—å")
    if carousel_type == CarouselType.AVATAR:
        return f"<b>{title}</b>\n\n{format_profile_info(user_data)}"
    return f"<b>{title}</b>"

async def show_profile_carousel(bot: Bot, chat_id: int, user_id: int, carousel_type: CarouselType = CarouselType.AVATAR, message_to_edit: Optional[Message] = None):
    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        text = "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑ /profile."
        if message_to_edit and not message_to_edit.photo:
            await message_to_edit.edit_text(text)
        else:
            if message_to_edit: await message_to_edit.delete()
            await bot.send_message(chat_id, text)
        return

    available_types = [c for c in CarouselType if user_data.get(CAROUSEL_TYPE_TO_PERMANENT_KEY.get(c)) or user_data.get(CAROUSEL_TYPE_TO_KEY.get(c))]
    if not available_types: available_types.append(CarouselType.AVATAR)
    if carousel_type not in available_types: carousel_type = available_types[0]

    permanent_url = user_data.get(CAROUSEL_TYPE_TO_PERMANENT_KEY.get(carousel_type))
    temp_file_id = user_data.get(CAROUSEL_TYPE_TO_KEY.get(carousel_type))
    
    media_source = permanent_url or temp_file_id or DEFAULT_IMAGE_URL
    
    keyboard = create_carousel_keyboard(carousel_type, available_types)
    caption = get_caption_for_carousel_type(carousel_type, user_data)
    media = InputMediaPhoto(media=media_source, caption=caption)

    try:
        if message_to_edit:
            if message_to_edit.photo:
                await bot.edit_message_media(chat_id, message_to_edit.message_id, media, reply_markup=keyboard)
            else:
                await message_to_edit.delete()
                await bot.send_photo(chat_id, media_source, caption=caption, reply_markup=keyboard)
        else:
            await bot.send_photo(chat_id, media_source, caption=caption, reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ: {e}. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
        if "message to edit not found" in str(e).lower():
             await bot.send_photo(chat_id, media_source, caption=caption, reply_markup=keyboard)
        else:
            fallback_source = temp_file_id if media_source == permanent_url else permanent_url
            if fallback_source:
                 try:
                    await bot.send_photo(chat_id, fallback_source, caption=caption, reply_markup=keyboard)
                    return
                 except TelegramAPIError:
                    pass
            await bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# === –û–°–ù–û–í–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò ===
@registration_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext, bot: Bot):
    if not message.from_user: return
    await state.clear()
    try: await message.delete()
    except TelegramAPIError: pass
    user_data = await get_user_by_telegram_id(message.from_user.id)
    if user_data:
        await show_profile_carousel(bot, message.chat.id, message.from_user.id)
    else:
        await state.set_state(RegistrationFSM.waiting_for_basic_photo)
        sent_msg = await bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
        await state.update_data(last_bot_message_id=sent_msg.message_id)

# === ‚úÖ‚úÖ‚úÖ –ì–û–õ–û–í–ù–ò–ô –û–ù–û–í–õ–ï–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö FSM –î–õ–Ø –§–û–¢–û (–ó –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø–ú) ‚úÖ‚úÖ‚úÖ ===
@registration_router.message(StateFilter(RegistrationFSM.waiting_for_basic_photo, RegistrationFSM.waiting_for_stats_photo, RegistrationFSM.waiting_for_heroes_photo, RegistrationFSM.waiting_for_avatar_photo), F.photo)
async def fsm_photo_handler(message: Message, state: FSMContext, bot: Bot):
    if not (message.photo and message.from_user): return
    
    user_id = message.from_user.id
    state_data = await state.get_data()
    last_bot_msg_id = state_data.get("last_bot_message_id")
    current_state_str = await state.get_state()
    
    thinking_msg = await bot.send_message(message.chat.id, "–û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è... ü§ñ")

    try:
        largest_photo = max(message.photo, key=lambda p: p.file_size or 0)
        
        # ‚úÖ –ö–†–û–ö 1: –°–ü–û–ß–ê–¢–ö–£ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Telegram
        image_bytes_io = await bot.download_file(largest_photo.file_id)
        if not image_bytes_io:
            await thinking_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ —Å–µ—Ä–≤–µ—Ä—ñ–≤ Telegram.")
            return
            
        # ‚úÖ –ö–†–û–ö 2: –¢–ï–ü–ï–† –±–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±–æ —Ñ–∞–π–ª –≤–∂–µ —É –Ω–∞—Å
        try:
            await message.delete()
            if last_bot_msg_id:
                await bot.delete_message(message.chat.id, last_bot_msg_id)
        except TelegramAPIError:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ —Ñ–∞–π–ª –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
            pass

        image_bytes = image_bytes_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        update_data = {'telegram_id': user_id}
        
        mode_map = {
            RegistrationFSM.waiting_for_basic_photo.state: ('basic', 'profile_screenshot'),
            RegistrationFSM.waiting_for_stats_photo.state: ('stats', 'stats_screenshot'),
            RegistrationFSM.waiting_for_heroes_photo.state: ('heroes', 'heroes_screenshot'),
            RegistrationFSM.waiting_for_avatar_photo.state: ('avatar', 'custom_avatar'),
        }
        analysis_mode, file_type_prefix = mode_map[current_state_str]

        # ‚úÖ –ö–†–û–ö 3: –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ (OpenAI) —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ (Cloudinary)
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt, file_resilience_manager:
            if analysis_mode == 'avatar':
                analysis_result = {}
                permanent_url = await file_resilience_manager.optimize_and_store_image(image_bytes, user_id, file_type_prefix)
            else:
                analysis_task = gpt.analyze_user_profile(image_base64, mode=analysis_mode)
                storage_task = file_resilience_manager.optimize_and_store_image(image_bytes, user_id, file_type_prefix)
                analysis_result, permanent_url = await asyncio.gather(analysis_task, storage_task)

        # ‚úÖ –ö–†–û–ö 4: –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if not permanent_url:
            await thinking_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        if analysis_mode != 'avatar' and (not analysis_result or 'error' in analysis_result):
            error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
            await thinking_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg}")
            return
        
        if analysis_mode == 'basic':
            update_data.update({
                'nickname': analysis_result.get('game_nickname'), 
                'player_id': int(str(analysis_result.get('mlbb_id_server', '0 (0)')).split(' ')[0]), 
                'server_id': int(str(analysis_result.get('mlbb_id_server', '0 (0)')).split('(')[1].replace(')', '')), 
                'current_rank': analysis_result.get('highest_rank_season'), 
                'total_matches': analysis_result.get('matches_played')
            })
        elif analysis_mode == 'stats':
            main_ind = analysis_result.get('main_indicators', {})
            update_data.update({'total_matches': main_ind.get('matches_played'), 'win_rate': main_ind.get('win_rate')})
        elif analysis_mode == 'heroes':
            heroes_list = analysis_result.get('favorite_heroes', [])
            update_data['favorite_heroes'] = ", ".join([h.get('hero_name', '') for h in heroes_list if h.get('hero_name')])

        update_data[f'{file_type_prefix}_file_id'] = largest_photo.file_id
        update_data[f'{file_type_prefix}_permanent_url'] = permanent_url
        
        # ‚úÖ –ö–†–û–ö 5: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤ –ë–î
        status = await add_or_update_user({k: v for k, v in update_data.items() if v is not None})
        
        if status == 'success':
            await show_profile_carousel(bot, message.chat.id, user_id, message_to_edit=thinking_msg)
        elif status == 'conflict':
            await thinking_msg.edit_text("üõ°Ô∏è <b>–ö–æ–Ω—Ñ–ª—ñ–∫—Ç!</b> –¶–µ–π —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å (Player ID) –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        else:
            await thinking_msg.edit_text("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.")

    except ClientResponseError as e:
        if e.status == 404:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É (404 Not Found): {e}. –ô–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–æ.")
            enhanced_error_msg = file_resilience_manager.get_enhanced_error_message(message.from_user.first_name if message.from_user else "–¥—Ä—É–∂–µ")
            await thinking_msg.edit_text(enhanced_error_msg)
        else:
            logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ (ClientResponseError):")
            await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ:")
        await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")
    finally:
        await state.clear()


def register_registration_handlers(dp: Dispatcher):
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
