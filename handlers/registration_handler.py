"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
import html
import base64
from aiogram import Bot, F, Router, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize

from states.user_states import RegistrationFSM
from services.openai_service import MLBBChatGPT
from database.crud import (
    add_or_update_user,
    get_user_by_telegram_id,
    delete_user
)
from keyboards.inline_keyboards import (
    create_registration_confirmation_keyboard,
    create_profile_menu_keyboard,
    create_delete_confirm_keyboard
)
from config import OPENAI_API_KEY, logger

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
profile_router = Router()


def format_profile_data_for_confirmation(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    win_rate = data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    heroes = data.get('favorite_heroes', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    if isinstance(heroes, list):
        heroes_str = ", ".join(heroes)
    else:
        heroes_str = heroes if heroes is not None else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    return (
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {html.escape(str(data.get('nickname', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')))}\n"
        f"üÜî <b>ID:</b> {data.get('player_id', 'N/A')} ({data.get('server_id', 'N/A')})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {html.escape(str(data.get('current_rank', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')))}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {data.get('total_matches', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìä <b>WR:</b> {win_rate_str}\n\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b>\n‚Ä¢ {html.escape(str(heroes_str))}"
    )


@profile_router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –ø–æ–∫–∞–∑ —ñ—Å–Ω—É—é—á–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_id = message.from_user.id
    existing = await get_user_by_telegram_id(user_id)
    if existing:
        # –í–∏–≤–æ–¥–∏–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        txt = format_profile_data_for_confirmation(existing)
        await message.answer(txt, parse_mode="HTML", reply_markup=create_profile_menu_keyboard())
        return

    # –ó–∞–ø–∏—Ç —Å–∫—Ä—ñ–Ω—É –¥–ª—è –±–∞–∑–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    await state.set_state(RegistrationFSM.waiting_for_photo)
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. üì∏")


@profile_router.message(RegistrationFSM.waiting_for_photo, F.photo)
async def handle_registration_photo(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç."""
    thinking = await message.reply("–ê–Ω–∞–ª—ñ–∑—É—é –ø—Ä–æ—Ñ—ñ–ª—å... ü§ñ")
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ base64
        largest: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest.file_id)
        image_bytes = await bot.download_file(file_info.file_path)
        image_b64 = base64.b64encode(image_bytes.read()).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            result = await gpt.analyze_user_profile(image_b64)
        if not result or 'error' in result:
            raise ValueError(result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'))

        await state.update_data(profile_data=result)

        text = (
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:\n\n"
            f"{format_profile_data_for_confirmation(result)}\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–±–µ—Ä–µ–≥—Ç–∏¬ª –∞–±–æ ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏¬ª"
        )
        await thinking.edit_text(text, reply_markup=create_registration_confirmation_keyboard(), parse_mode="HTML")
        await state.set_state(RegistrationFSM.waiting_for_confirmation)

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ñ–æ—Ç–æ:")
        await thinking.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
        await state.clear()


@profile_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    data = await state.get_data()
    profile = data.get('profile_data')
    profile['telegram_id'] = callback.from_user.id
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ —É —Ä—è–¥–æ–∫
    if isinstance(profile.get('favorite_heroes'), list):
        profile['favorite_heroes'] = ", ".join(profile['favorite_heroes'])

    await add_or_update_user(profile)
    await callback.message.edit_text("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await callback.answer()
    # –ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π
    await callback.message.answer(
        format_profile_data_for_confirmation(profile),
        parse_mode="HTML",
        reply_markup=create_profile_menu_keyboard()
    )
    await state.clear()


@profile_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    await state.clear()
    await callback.message.edit_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer()


# ==== –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é ====
@profile_router.callback_query(F.data == "profile_update_basic")
async def update_basic(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.",
        reply_markup=None
    )
    await state.set_state(RegistrationFSM.waiting_for_photo)

@profile_router.callback_query(F.data == "profile_add_stats")
async def update_stats(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é All Seasons.",
        reply_markup=None
    )
    await state.set_state(RegistrationFSM.waiting_for_stats_photo)

@profile_router.callback_query(F.data == "profile_add_heroes")
async def update_heroes(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç Favorite Heroes (Top 3).", reply_markup=None
    )
    await state.set_state(RegistrationFSM.waiting_for_heroes_photo)

@profile_router.callback_query(F.data == "profile_delete")
async def cb_delete_profile(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å?", reply_markup=create_delete_confirm_keyboard()
    )
    await state.set_state(RegistrationFSM.confirming_deletion)

@profile_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes")
async def cb_delete_yes(cb: CallbackQuery, state: FSMContext):
    await delete_user(cb.from_user.id)
    await cb.message.edit_text("–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ‚Äî /register")
    await state.clear()

@profile_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no")
async def cb_delete_no(cb: CallbackQuery, state: FSMContext):
    user = await get_user_by_telegram_id(cb.from_user.id)
    txt = format_profile_data_for_confirmation(user)
    await cb.message.edit_text(
        txt, parse_mode="HTML", reply_markup=create_profile_menu_keyboard()
    )
    await state.clear()


def register_profile_handlers(dp: Dispatcher):
    dp.include_router(profile_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
