#handlers/registration_handler.py 
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""
import html
import json
import base64
import io
from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, PhotoSize

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import create_registration_confirmation_keyboard, create_profile_menu_keyboard, create_delete_confirm_keyboard
from services.openai_service import MLBBChatGPT
from database.crud import add_or_update_user, get_user_by_telegram_id, delete_user_by_telegram_id
from config import OPENAI_API_KEY, logger

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
registration_router = Router()

def format_profile_data_for_confirmation(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    win_rate = data.get('win_rate')
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    heroes = data.get('favorite_heroes', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    if isinstance(heroes, list):
        heroes_str = ", ".join(heroes)
    else:
        heroes_str = heroes if heroes is not None else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    return (
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {html.escape(str(data.get('nickname', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')))}\n"
        f"üÜî <b>ID:</b> {data.get('player_id', 'N/A')} ({data.get('server_id', 'N/A')})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {html.escape(str(data.get('current_rank', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')))}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {data.get('total_matches', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìä <b>WR:</b> {win_rate_str}\n\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b>\n‚Ä¢ {html.escape(str(heroes_str))}"
    )

@registration_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º.
    - –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.
    - –Ø–∫—â–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º.
    """
    if not message.from_user:
        return

    user_id = message.from_user.id
    
    existing_user = await get_user_by_telegram_id(user_id)
    if existing_user:
        profile_info = format_profile_data_for_confirmation(existing_user)
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n{profile_info}",
            reply_markup=create_profile_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await state.set_state(RegistrationFSM.waiting_for_photo)
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é. üì∏")

@registration_router.callback_query(F.data == "profile_update")
async def profile_update_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    await state.set_state(RegistrationFSM.waiting_for_photo)
    await callback.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
    await callback.answer()

@registration_router.callback_query(F.data == "profile_delete")
async def profile_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, –∑–∞–ø–∏—Ç—É—é—á–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    await state.set_state(RegistrationFSM.confirming_deletion)
    await callback.message.edit_text(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–≤—ñ–¥–≤–æ—Ä–æ—Ç–Ω–∞.",
        reply_markup=create_delete_confirm_keyboard()
    )
    await callback.answer()

@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes")
async def confirm_delete_profile(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î –ø—Ä–æ—Ñ—ñ–ª—å –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    if not callback.from_user:
        return
    user_id = callback.from_user.id
    try:
        deleted = await delete_user_by_telegram_id(user_id)
        if deleted:
            await callback.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            await callback.answer("–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
        else:
            await callback.message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.")
            await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", show_alert=True)
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ –ë–î:")
        await callback.message.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        await state.clear()


@registration_router.callback_query(RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no")
async def cancel_delete_profile(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å–æ–≤—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    await state.clear()
    await callback.message.edit_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É –±–µ–∑–ø–µ—Ü—ñ! üòä")
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

@registration_router.message(RegistrationFSM.waiting_for_photo, F.photo)
async def handle_registration_photo(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é, –∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    if not message.photo or not message.from_user:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    thinking_msg = await message.reply("–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å... ü§ñ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    
    try:
        largest_photo: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest_photo.file_id)
        if not file_info.file_path:
            await thinking_msg.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª.")
            return

        image_bytes_io = await bot.download_file(file_info.file_path)
        if not image_bytes_io:
             await thinking_msg.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
             return
        
        image_base64 = base64.b64encode(image_bytes_io.read()).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            analysis_result = await gpt.analyze_user_profile(image_base64)

        if not analysis_result or 'error' in analysis_result:
            error_msg = analysis_result.get('error', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.')
            await thinking_msg.edit_text(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {error_msg} –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
            await state.clear()
            return
            
        await state.update_data(profile_data=analysis_result)
        
        confirmation_text = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –¥–∞–Ω—ñ:\n\n"
            f"{format_profile_data_for_confirmation(analysis_result)}\n\n"
            "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏'."
        )
        
        await thinking_msg.edit_text(
            confirmation_text,
            reply_markup=create_registration_confirmation_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationFSM.waiting_for_confirmation)

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        await thinking_msg.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

@registration_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ –ë–î –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    if not callback.message or not callback.from_user:
        return
        
    user_data = await state.get_data()
    profile_data = user_data.get('profile_data')

    if not profile_data:
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await state.clear()
        return

    profile_data['telegram_id'] = callback.from_user.id
    
    if 'favorite_heroes' in profile_data and isinstance(profile_data['favorite_heroes'], list):
        profile_data['favorite_heroes'] = ", ".join(profile_data['favorite_heroes'])

    try:
        await add_or_update_user(profile_data)
        await callback.message.edit_text("‚úÖ –í—ñ—Ç–∞—é! –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await callback.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î:")
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        await state.clear()

@registration_router.callback_query(RegistrationFSM.waiting_for_confirmation, F.data == "register_cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    if not callback.message:
        return
    await state.clear()
    await callback.message.edit_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /register.")
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


def register_registration_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø—Ä–æ—Ü–µ—Å–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
