"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ª–æ–≥—ñ–∫–∏ "—á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É" —Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
"""
import html
import base64
import io
from typing import Any, Dict, List, Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    PhotoSize,
    InputMediaPhoto,
)
from aiogram.exceptions import TelegramAPIError

from states.user_states import RegistrationFSM
from keyboards.inline_keyboards import (
    create_profile_menu_keyboard,
    create_profile_menu_overview_keyboard,
    create_delete_confirm_keyboard,
)
from services.openai_service import MLBBChatGPT
from database.crud import (
    add_or_update_user,
    get_user_by_telegram_id,
    delete_user_by_telegram_id,
)
from utils.file_manager import file_resilience_manager
from config import OPENAI_API_KEY, logger

registration_router = Router()


def format_profile_display(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    nickname = html.escape(user_data.get("nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))
    player_id = user_data.get("player_id", "N/A")
    server_id = user_data.get("server_id", "N/A")
    current_rank = html.escape(user_data.get("current_rank", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))
    total_matches = user_data.get("total_matches", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    win_rate = user_data.get("win_rate")
    win_rate_str = f"{win_rate}%" if win_rate is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    heroes = user_data.get("favorite_heroes")
    heroes_str = html.escape(heroes) if heroes else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    return (
        f"<b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
        f"üë§ <b>–ù—ñ–∫–Ω–µ–π–º:</b> {nickname}\n"
        f"üÜî <b>ID:</b> {player_id} ({server_id})\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {current_rank}\n"
        f"‚öîÔ∏è <b>–ú–∞—Ç—á—ñ–≤:</b> {total_matches}\n"
        f"üìä <b>WR:</b> {win_rate_str}\n"
        f"ü¶∏ <b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b> {heroes_str}"
    )


async def build_profile_pages(user_data: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º—É—î –ø–µ—Ä–µ–ª—ñ–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø—Ä–æ—Ñ—ñ–ª—é:
      [{'photo': url, 'caption': text}, ...]
    –ü–æ—Ä—è–¥–æ–∫: basic ‚Üí stats ‚Üí heroes ‚Üí avatar.
    """
    pages: List[Dict[str, str]] = []
    # –ë–∞–∑–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    caption_basic = format_profile_display(user_data)
    url_basic = user_data.get("basic_profile_permanent_url")
    pages.append({"photo": url_basic or "", "caption": caption_basic})

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    url_stats = user_data.get("stats_photo_permanent_url")
    if url_stats:
        caption_stats = (
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚öîÔ∏è –ú–∞—Ç—á—ñ–≤: {user_data.get('total_matches', 'N/A')}\n"
            f"üìä WR: {user_data.get('win_rate', 'N/A')}%"
        )
        pages.append({"photo": url_stats, "caption": caption_stats})

    # –ì–µ—Ä–æ—ó
    url_heroes = user_data.get("heroes_photo_permanent_url")
    if url_heroes:
        caption_heroes = (
            f"<b>–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó:</b> "
            f"{html.escape(user_data.get('favorite_heroes', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))}"
        )
        pages.append({"photo": url_heroes, "caption": caption_heroes})

    # –ê–≤–∞—Ç–∞—Ä
    url_avatar = user_data.get("avatar_permanent_url")
    if url_avatar:
        pages.append({"photo": url_avatar, "caption": "<b>–í–∞—à –∞–≤–∞—Ç–∞—Ä</b>"})

    return pages


async def show_profile_carousel(
    bot: Bot,
    chat_id: int,
    message_id: int,
    user_id: int,
    page_index: int,
):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç—å carousel: –º—ñ–Ω—è—î —Ñ–æ—Ç–æ+–ø—ñ–¥–ø–∏—Å —ñ –æ–Ω–æ–≤–ª—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.
    """
    user_data = await get_user_by_telegram_id(user_id) or {}
    pages = await build_profile_pages(user_data)
    total = len(pages)
    page = pages[page_index]

    # –ó–º—ñ–Ω–∞ –º–µ–¥—ñ–∞, —è–∫—â–æ —î —Ñ–æ—Ç–æ
    if page["photo"]:
        media = InputMediaPhoto(media=page["photo"])
        await bot.edit_message_media(
            chat_id=chat_id, message_id=message_id, media=media
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    await bot.edit_message_caption(
        chat_id=chat_id,
        message_id=message_id,
        caption=page["caption"],
        parse_mode="HTML",
        reply_markup=create_profile_menu_overview_keyboard(
            current_page=page_index + 1, total_pages=total
        ),
    )


async def show_profile_menu(
    bot: Bot,
    chat_id: int,
    user_id: int,
    message_to_delete_id: Optional[int] = None,
):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é –≤ –æ–¥–Ω–æ–∫–Ω–æ–ø–∫–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.
    """
    if message_to_delete_id:
        try:
            await bot.delete_message(chat_id, message_to_delete_id)
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_to_delete_id}: {e}")

    user_data = await get_user_by_telegram_id(user_id)
    if not user_data:
        await bot.send_message(
            chat_id,
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /profile.",
        )
        return

    url = user_data.get("basic_profile_permanent_url")
    caption = format_profile_display(user_data)
    if url:
        await bot.send_photo(
            chat_id,
            url,
            caption=caption,
            reply_markup=create_profile_menu_keyboard(),
            parse_mode="HTML",
        )
    else:
        await bot.send_message(
            chat_id,
            caption,
            reply_markup=create_profile_menu_keyboard(),
            parse_mode="HTML",
        )


@registration_router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext, bot: Bot):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é."""
    if not message.from_user:
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        await message.delete()
    except TelegramAPIError:
        pass

    await state.clear()
    existing = await get_user_by_telegram_id(user_id)
    if existing:
        await show_profile_menu(bot, chat_id, user_id)
    else:
        await state.set_state(RegistrationFSM.waiting_for_basic_photo)
        sent = await bot.send_message(
            chat_id,
            "üëã –í—ñ—Ç–∞—é! –°—Ö–æ–∂–µ, –≤–∏ —Ç—É—Ç —É–ø–µ—Ä—à–µ.\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. üì∏",
        )
        await state.update_data(last_bot_message_id=sent.message_id)


# ---- –î–æ–¥–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–∞–º—ñ–Ω–∏ edit_text –Ω–∞ edit_caption —É —Ñ–æ—Ç–æ ----

@registration_router.callback_query(F.data == "profile_update_basic")
async def profile_update_basic_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é."""
    await state.set_state(RegistrationFSM.waiting_for_basic_photo)
    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é."
    # –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º—ñ–Ω—è—î–º–æ caption, —ñ–Ω–∞–∫—à–µ ‚Äì —Ç–µ–∫—Å—Ç
    if callback.message.photo:
        await callback.message.edit_caption(text, parse_mode="HTML")
    else:
        await callback.message.edit_text(text)
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await callback.answer()


@registration_router.callback_query(F.data == "profile_update_stats")
async def profile_add_stats_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é."""
    await state.set_state(RegistrationFSM.waiting_for_stats_photo)
    text = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ä–æ–∑–¥—ñ–ª—É 'Statistics' ‚Üí 'All Seasons'."
    if callback.message.photo:
        await callback.message.edit_caption(text, parse_mode="HTML")
    else:
        await callback.message.edit_text(text)
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await callback.answer()


@registration_router.callback_query(F.data == "profile_update_heroes")
async def profile_add_heroes_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ –ø—Ä–æ—Ñ—ñ–ª—é."""
    await state.set_state(RegistrationFSM.waiting_for_heroes_photo)
    text = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ä–æ–∑–¥—ñ–ª—É 'Favorite' ‚Üí 'All Seasons' (—Ç–æ–ø-3)."
    if callback.message.photo:
        await callback.message.edit_caption(text, parse_mode="HTML")
    else:
        await callback.message.edit_text(text)
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await callback.answer()


@registration_router.message(
    StateFilter(
        RegistrationFSM.waiting_for_basic_photo,
        RegistrationFSM.waiting_for_stats_photo,
        RegistrationFSM.waiting_for_heroes_photo,
    ),
    F.photo,
)
async def handle_profile_update_photo(
    message: Message, state: FSMContext, bot: Bot
):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ —É —Å—Ç–∞–Ω–∞—Ö –∫–æ–Ω—Ç—Ä–æ–ª—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–∞—Ä—Ç–∫—É, –∞–Ω–∞–ª—ñ–∑—É—î, –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ë–î.
    """
    if not message.from_user or not message.photo:
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    data = await state.get_data()
    last_id = data.get("last_bot_message_id")

    try:
        await message.delete()
    except TelegramAPIError:
        pass

    current = await state.get_state()
    mode_map = {
        RegistrationFSM.waiting_for_basic_photo.state: "basic",
        RegistrationFSM.waiting_for_stats_photo.state: "stats",
        RegistrationFSM.waiting_for_heroes_photo.state: "heroes",
    }
    mode = mode_map.get(current)
    if not mode or not last_id:
        await bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /profile –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    thinking = await bot.edit_message_text(
        chat_id=chat_id,
        message_id=last_id,
        text=f"–ê–Ω–∞–ª—ñ–∑—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç ({mode})... ü§ñ",
    )

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Ñ–æ—Ç–æ
        largest: PhotoSize = max(message.photo, key=lambda p: p.file_size or 0)
        file_info = await bot.get_file(largest.file_id)
        image_bytes = (await bot.download_file(file_info.file_path)).read()

        permanent_url = await file_resilience_manager.optimize_and_store_image(
            image_bytes, user_id, mode
        )

        image_b64 = base64.b64encode(image_bytes).decode("utf-8")
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            result = await gpt.analyze_user_profile(image_b64, mode=mode)

        if not result or "error" in result:
            err = result.get("error", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ.")
            await thinking.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {err}")
            await state.clear()
            return

        update_payload: Dict[str, Any] = {"telegram_id": user_id}
        if mode == "basic":
            ml = result.get("mlbb_id_server", "0 (0)").split()
            update_payload.update({
                "nickname": result.get("game_nickname"),
                "player_id": int(ml[0]),
                "server_id": int(ml[1].strip("()")),
                "current_rank": result.get("highest_rank_season"),
                "total_matches": result.get("matches_played"),
                "basic_profile_file_id": largest.file_id,
                "basic_profile_permanent_url": permanent_url,
            })
        elif mode == "stats":
            main = result.get("main_indicators", {})
            update_payload.update({
                "total_matches": main.get("matches_played"),
                "win_rate": main.get("win_rate"),
                "stats_photo_file_id": largest.file_id,
                "stats_photo_permanent_url": permanent_url,
            })
        else:  # heroes
            fav = result.get("favorite_heroes", [])
            heroes_str = ", ".join(h.get("hero_name", "") for h in fav if h.get("hero_name"))
            update_payload.update({
                "favorite_heroes": heroes_str,
                "heroes_photo_file_id": largest.file_id,
                "heroes_photo_permanent_url": permanent_url,
            })

        status = await add_or_update_user(update_payload)
        if status == "success":
            await show_profile_menu(
                bot, chat_id, user_id, message_to_delete_id=thinking.message_id
            )
        elif status == "conflict":
            await thinking.edit_text(
                "üõ°Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç: —Ü–µ–π –ø—Ä–æ—Ñ—ñ–ª—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —ñ–Ω—à–∏–º Telegram."
            )
        else:
            await thinking.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ ({mode}): {e}")
        await thinking.edit_text("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


# === –û–±—Ä–æ–±–Ω–∏–∫–∏ –º–µ–Ω—é —Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ ===

@registration_router.callback_query(F.data == "profile_show_menu")
async def profile_show_menu_handler(callback: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ä—É—Å–µ–ª—å –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é."""
    await show_profile_carousel(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        user_id=callback.from_user.id,
        page_index=0,
    )
    await callback.answer()


@registration_router.callback_query(F.data.startswith("profile_prev_page"))
async def profile_prev_page_handler(callback: CallbackQuery):
    """–ü–µ—Ä—à–∞ –∫–Ω–æ–ø–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó: –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞."""
    new_idx = int(callback.data.split(":")[-1])
    await show_profile_carousel(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        user_id=callback.from_user.id,
        page_index=new_idx,
    )
    await callback.answer()


@registration_router.callback_query(F.data.startswith("profile_next_page"))
async def profile_next_page_handler(callback: CallbackQuery):
    """–î—Ä—É–≥–∞ –∫–Ω–æ–ø–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó: –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞."""
    new_idx = int(callback.data.split(":")[-1])
    await show_profile_carousel(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        user_id=callback.from_user.id,
        page_index=new_idx,
    )
    await callback.answer()


@registration_router.callback_query(F.data == "profile_hide_menu")
async def profile_hide_menu_handler(callback: CallbackQuery):
    """–ü—Ä–∏—Ö–æ–≤—É—î –º–µ–Ω—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–Ω–æ–∫–Ω–æ–ø–∫–æ–≤–∏–π —Ä–µ–∂–∏–º."""
    await callback.message.edit_reply_markup(
        reply_markup=create_profile_menu_keyboard()
    )
    await callback.answer()


@registration_router.callback_query(F.data == "profile_delete")
async def profile_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    await state.set_state(RegistrationFSM.confirming_deletion)
    await callback.message.edit_text(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å? –¶–µ –Ω–∞–∑–∞–≤–∂–¥–∏.",
        reply_markup=create_delete_confirm_keyboard(),
    )
    await callback.answer()


@registration_router.callback_query(
    RegistrationFSM.confirming_deletion, F.data == "delete_confirm_yes"
)
async def confirm_delete_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_id = callback.from_user.id
    deleted = await delete_user_by_telegram_id(user_id)
    text = "–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." if deleted else "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å."
    await callback.message.edit_text(text)
    await callback.answer()
    await state.clear()


@registration_router.callback_query(
    RegistrationFSM.confirming_deletion, F.data == "delete_confirm_no"
)
async def cancel_delete_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await state.clear()
    await show_profile_menu(
        bot, chat_id, user_id, message_to_delete_id=callback.message.message_id
    )
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


def register_registration_handlers(dp: Router) -> None:
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é."""
    dp.include_router(registration_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")