"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–≥—Ä–æ–≤–∏–º –ª–æ–±—ñ (–ø–∞—Ç—ñ).

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –≤ —á–∞—Ç—ñ.
- –ü–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–±—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é FSM (–≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É, —Ä–æ–∑–º—ñ—Ä—É, —Ä–æ–ª–µ–π).
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ª–æ–±—ñ.
- –û–±—Ä–æ–±–∫–∏ –¥—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤: –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è, –≤–∏—Ö—ñ–¥, –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ.
- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–æ–±—ñ –ª—ñ–¥–µ—Ä–æ–º: –∑–∞–∫—Ä–∏—Ç—Ç—è.
- ‚ùóÔ∏è –ù–û–í–ï: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ä–∞–Ω–≥—ñ–≤ –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–Ω–∏–π –∑–±—ñ—Ä.
"""
import asyncio
import html
import logging
import re
from typing import Any

from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

# ‚ùóÔ∏è –ù–û–í–Ü –Ü–ú–ü–û–†–¢–ò
from database.crud import get_user_settings, get_user_by_telegram_id
from keyboards.inline_keyboards import (
    ALL_ROLES,
    create_game_mode_keyboard,
    create_lobby_keyboard,
    create_party_confirmation_keyboard,
    create_party_info_keyboard,
    create_party_size_keyboard,
    create_required_roles_keyboard,
    create_role_selection_keyboard,
)

logger = logging.getLogger(__name__)

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–û–£–¢–ï–†–ê –¢–ê –°–•–û–í–ò–©–ê ===
party_router = Router()
active_lobbies: dict[int, dict] = {}


# === –°–¢–ê–ù–ò FSM –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü ===
class PartyCreationFSM(StatesGroup):
    """–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ."""
    waiting_for_confirmation = State()
    waiting_for_game_mode = State()
    waiting_for_party_size = State()
    waiting_for_role_selection = State()
    waiting_for_required_roles = State()


# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

def get_user_display_name(user: Message | CallbackQuery) -> str:
    """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–∫—Ä–∞—â–µ —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–±'—î–∫—Ç–∞ User."""
    from_user = user.from_user
    if not from_user:
        return "–¥—Ä—É–∂–µ"
    if from_user.first_name and from_user.first_name.strip():
        return html.escape(from_user.first_name.strip())
    if from_user.username and from_user.username.strip():
        return html.escape(from_user.username.strip())
    return "–¥—Ä—É–∂–µ"

async def _get_user_rank(user_id: int) -> str:
    """–û—Ç—Ä–∏–º—É—î —Ä–∞–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î, —è–∫—â–æ –≤—ñ–Ω –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π."""
    user_data = await get_user_by_telegram_id(user_id)
    if user_data and user_data.get("current_rank"):
        return user_data["current_rank"]
    return "–Ω–µ–≤—ñ–¥–æ–º–∏–π"


def is_party_request_message(message: Message) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–æ–º –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ."""
    if not message.text:
        return False
    try:
        text_lower = message.text.lower()
        has_party_keywords = re.search(r'\b(–ø–∞—Ç—ñ|–ø–∞—Ç–∏|–∫–æ–º–∞–Ω–¥—É)\b', text_lower) is not None
        has_action_keywords = re.search(r'\b(–∑–±–∏—Ä|–≥–æ|—à—É–∫–∞|–≥—Ä–∞—Ç|–∑—ñ–±—Ä–∞)\w*\b|\+', text_lower) is not None
        return has_party_keywords and has_action_keywords
    except (AttributeError, TypeError):
        return False

def get_lobby_message_text(lobby_data: dict, joining_user_name: str | None = None) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–±—ñ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    leader_name = html.escape(lobby_data['leader_name'])
    game_mode = lobby_data.get('game_mode', 'Ranked')
    party_size = lobby_data.get('party_size', 5)

    game_mode_map = {"Ranked": "üèÜ –†–µ–π—Ç–∏–Ω–≥", "Classic": "üïπÔ∏è –ö–ª–∞—Å–∏–∫–∞", "Brawl": "‚öîÔ∏è –†–µ–∂–∏–º –±–æ—é"}
    mode_display = game_mode_map.get(game_mode, game_mode)

    role_emoji_map = {"EXP": "‚öîÔ∏è", "–õ–Ü–°": "üå≥", "–ú–Ü–î": "üßô", "–ê–î–ö": "üèπ", "–†–û–£–ú": "üõ°Ô∏è"}

    sorted_players = sorted(lobby_data['players'].items(), key=lambda item: ALL_ROLES.index(item[1]['role']))
    
    # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ —Ä–∞–Ω–≥ –¥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
    players_list = []
    for _, player_info in sorted_players:
        player_name = html.escape(player_info['name'])
        player_role = player_info['role']
        player_rank = html.escape(player_info.get('rank', '–Ω–µ–≤—ñ–¥–æ–º–∏–π'))
        players_list.append(
            f"  {role_emoji_map.get(player_role, 'üîπ')} <b>{player_role}:</b> {player_name} (<i>{player_rank}</i>)"
        )
    
    taken_roles = [player_info['role'] for _, player_info in sorted_players]
    available_slots_count = party_size - len(players_list)
    progress_bar = "üü¢" * len(players_list) + "‚ö™" * available_slots_count

    text_parts = [
        f"<b>{mode_display}</b>",
        f"<b>üßë‚Äçü§ù‚Äçüßë –ó–ë–Ü–† –ö–û–ú–ê–ù–î–ò</b>",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        f"üëë <b>–õ—ñ–¥–µ—Ä:</b> {leader_name}",
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {progress_bar} ({len(players_list)}/{party_size})",
    ]

    if players_list:
        text_parts.append("\nüë• <b>–°–ö–õ–ê–î –ö–û–ú–ê–ù–î–ò:</b>")
        text_parts.extend(players_list)

    if lobby_data.get('state') == 'joining' and joining_user_name:
        text_parts.append(f"\n‚è≥ <b>{html.escape(joining_user_name)}, –æ–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å...</b>")
    elif available_slots_count > 0:
        required_roles = lobby_data.get('required_roles', [])
        available_roles = [r for r in (required_roles or ALL_ROLES) if r not in taken_roles]
        
        section_title = "üîç <b>–®–£–ö–ê–Ñ–ú–û</b>" if required_roles else "üÜì <b>–î–û–°–¢–£–ü–ù–û</b>"
        if available_roles:
            text_parts.append(f"\n{section_title}:")
            text_parts.extend([f"  {role_emoji_map.get(r, 'üîπ')} {r}" for r in available_roles])
        
        text_parts.append("\nüí¨ <i>–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!</i>")
    else:
        # –¶–µ–π –±–ª–æ–∫ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ —î —Ñ—É–Ω–∫—Ü—ñ—è notify_and_close_full_lobby
        text_parts.append("\n\n‚úÖ <b>–ö–û–ú–ê–ù–î–ê –ì–û–¢–û–í–ê! –ü–û–ì–ù–ê–õ–ò! üöÄ</b>")
        
    return f"<blockquote>" + "\n".join(text_parts) + "</blockquote>"


# === ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –°–ü–û–í–Ü–©–ï–ù–ù–Ø ===
async def notify_and_close_full_lobby(bot: Bot, lobby_id: int, lobby_data: dict[str, Any]):
    """
    –°–ø–æ–≤—ñ—â–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ –ø–æ–≤–Ω–∏–π –∑–±—ñ—Ä, –∑–∞–∫—Ä–∏–≤–∞—î –ª–æ–±—ñ —Ç–∞ –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö.
    """
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–æ–±—ñ {lobby_id} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—ñ–±—Ä–∞–Ω–∞. –†–æ–∑—Å–∏–ª–∞—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    
    chat_id = lobby_data["chat_id"]
    chat_title = lobby_data.get("chat_title", "—Ü—å–æ–º—É —á–∞—Ç—ñ")
    chat_username = lobby_data.get("chat_username")
    players = lobby_data.get("players", {})
    
    role_emoji_map = {"EXP": "‚öîÔ∏è", "–õ–Ü–°": "üå≥", "–ú–Ü–î": "üßô", "–ê–î–ö": "üèπ", "–†–û–£–ú": "üõ°Ô∏è"}
    
    # –°–æ—Ä—Ç—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä–æ–ª–ª—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
    sorted_players = sorted(players.items(), key=lambda item: ALL_ROLES.index(item[1]['role']))
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ —Ä–æ–ª—è–º–∏
    participants_list = []
    for player_id, player_info in sorted_players:
        mention = f"<a href='tg://user?id={player_id}'>{html.escape(player_info['name'])}</a>"
        role = player_info['role']
        rank = html.escape(player_info.get('rank', '–Ω–µ–≤—ñ–¥–æ–º–∏–π'))
        emoji = role_emoji_map.get(role, 'üîπ')
        participants_list.append(
            f"  {emoji} <b>{role}:</b> {mention} (<i>{rank}</i>)"
        )
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
    group_message_parts = [
        "‚úÖ <b>–ö–û–ú–ê–ù–î–ê –ì–û–¢–û–í–ê!</b>",
        "",
        "–°–∫–ª–∞–¥ –∑—ñ–±—Ä–∞–Ω–æ, –ø–æ–≥–Ω–∞–ª–∏ –ø—ñ–¥–∫–æ—Ä—é–≤–∞—Ç–∏ —Ä–∞–Ω–≥–∏! üöÄ",
        "",
        "üë• <b>–£–ß–ê–°–ù–ò–ö–ò:</b>",
        *participants_list,
        "",
        "<i>P.S. –õ—ñ–¥–µ—Ä, –Ω–µ –∑–∞–±—É–¥—å –¥–æ–¥–∞—Ç–∏ –≤—Å—ñ—Ö —É –¥—Ä—É–∑—ñ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≥—Ä–æ–≤–µ –ª–æ–±—ñ.</i>"
    ]
    group_message_text = "<blockquote>" + "\n".join(group_message_parts) + "</blockquote>"

    try:
        await bot.edit_message_text(
            text=group_message_text,
            chat_id=chat_id,
            message_id=lobby_id,
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–±—ñ {lobby_id}: {e}")

    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç
    if chat_username:
        chat_link = f"https://t.me/{chat_username}"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–º
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ -100 –ø—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è ID —Å—É–ø–µ—Ä–≥—Ä—É–ø
        supergroup_chat_id = str(chat_id).replace("-100", "")
        chat_link = f"https://t.me/c/{supergroup_chat_id}/{lobby_id}"

    # –§–æ—Ä–º—É—î–º–æ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    dm_parts = [
        f"üî• <b>–ü–∞—Ç—ñ –≤ —á–∞—Ç—ñ ¬´<a href='{chat_link}'>{html.escape(chat_title)}</a>¬ª –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—ñ–±—Ä–∞–Ω–æ!</b>",
        "",
        "üë• <b>–í–ê–®–ê –ö–û–ú–ê–ù–î–ê:</b>",
        *participants_list,
        "",
        f"üîó <b><a href='{chat_link}'>–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ —á–∞—Ç</a></b>, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ–º–∞–Ω–¥–æ—é.",
        "–£—Å–ø—ñ—à–Ω–æ—ó –≥—Ä–∏! ‚≠ê"
    ]
    dm_text = "\n".join(dm_parts)

    # –†–æ–∑—Å–∏–ª–∫–∞ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for player_id in players.keys():
        try:
            await bot.send_message(player_id, dm_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
            await asyncio.sleep(0.1) # –ù–µ–≤–µ–ª–∏–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º-—Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {player_id} –∑ –ª–æ–±—ñ {lobby_id}: {e}")
            
    # –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–±—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    if lobby_id in active_lobbies:
        del active_lobbies[lobby_id]
        logger.info(f"–õ–æ–±—ñ {lobby_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ.")


# === –õ–û–ì–Ü–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–ê–¢–Ü (FSM) ===

@party_router.message(F.text & F.func(is_party_request_message))
async def ask_for_party_creation(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫, —â–æ —Ä–µ–∞–≥—É—î –Ω–∞ –∑–∞–ø–∏—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ, –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –º'—é—Ç—É."""
    if not message.from_user:
        return
        
    user_id = message.from_user.id
    user_name = get_user_display_name(message)
    
    settings = await get_user_settings(user_id)
    if settings.mute_party:
        logger.info(f"–Ü–≥–Ω–æ—Ä—É—é –∑–∞–ø–∏—Ç –Ω–∞ –ø–∞—Ç—ñ –≤—ñ–¥ {user_name} (ID: {user_id}), –æ—Å–∫—ñ–ª—å–∫–∏ mute_party=True.")
        return

    logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—ñ –≤—ñ–¥ {user_name}: '{message.text}'")
    await state.set_state(PartyCreationFSM.waiting_for_confirmation)
    sent_message = await message.reply(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–∞—á—É, —Ç–∏ –∑–±–∏—Ä–∞—î—à –∫–æ–º–∞–Ω–¥—É.\n"
        "–î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ª–æ–±—ñ?",
        reply_markup=create_party_confirmation_keyboard()
    )
    await state.update_data(last_message_id=sent_message.message_id, initiator_id=message.from_user.id)

@party_router.callback_query(F.data == "party_show_info")
async def show_party_info(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return

    info_text = (
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü—ñ—ó '–ó—ñ–±—Ä–∞—Ç–∏ –ü–∞—Ç—ñ'</b>\n\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —à–≤–∏–¥–∫–æ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≥—Ä–∏ –≤ Mobile Legends.\n\n"
        "<b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>\n"
        "1. –Ø –ø–æ–∫—Ä–æ–∫–æ–≤–æ –∑–∞–ø–∏—Ç–∞—é —Ç–µ–±–µ –ø—Ä–æ —Ä–µ–∂–∏–º –≥—Ä–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ –±–∞–∂–∞–Ω—ñ —Ä–æ–ª—ñ.\n"
        "2. –Ø —Å—Ç–≤–æ—Ä—é –ª–æ–±—ñ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–æ —è–∫–æ–≥–æ –∑–º–æ–∂—É—Ç—å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è —ñ–Ω—à—ñ –≥—Ä–∞–≤—Ü—ñ.\n"
        "3. –£—á–∞—Å–Ω–∏–∫–∏ –∑–º–æ–∂—É—Ç—å –æ–±—Ä–∞—Ç–∏ –≤—ñ–ª—å–Ω—É —Ä–æ–ª—å, –∞ —Ç–∏, —è–∫ –ª—ñ–¥–µ—Ä, –∑–º–æ–∂–µ—à –∑–∞–∫—Ä–∏—Ç–∏ –ª–æ–±—ñ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ '‚úÖ', —â–æ–± –ø–æ—á–∞—Ç–∏! üëç"
    )
    await callback.message.edit_text(info_text, reply_markup=create_party_info_keyboard())
    await callback.answer()

@party_router.callback_query(F.data == "party_cancel_creation")
async def cancel_party_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await state.clear()
    await callback.message.edit_text("–ì–∞—Ä–∞–∑–¥, —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à - –∑–≤–µ—Ä—Ç–∞–π—Å—è! üòâ")
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_confirmation, F.data == "party_start_creation")
async def prompt_for_game_mode(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return

    await state.set_state(PartyCreationFSM.waiting_for_game_mode)
    await callback.message.edit_text(
        "üéÆ <b>–ö—Ä–æ–∫ 1/3: –†–µ–∂–∏–º –≥—Ä–∏</b>\n\n"
        "–ß—É–¥–æ–≤–æ! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä–∏, –¥–µ –±—É–¥–µ–º–æ –ø–µ—Ä–µ–º–∞–≥–∞—Ç–∏:", 
        reply_markup=create_game_mode_keyboard()
    )
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_game_mode, F.data.startswith("party_set_mode:"))
async def prompt_for_party_size(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    game_mode = callback.data.split(":")[-1]
    await state.update_data(game_mode=game_mode)
    await state.set_state(PartyCreationFSM.waiting_for_party_size)
    await callback.message.edit_text(
        "üë• <b>–ö—Ä–æ–∫ 2/3: –†–æ–∑–º—ñ—Ä –∫–æ–º–∞–Ω–¥–∏</b>\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏, —Å–∫—ñ–ª—å–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∏ —à—É–∫–∞—î—à:", 
        reply_markup=create_party_size_keyboard()
    )
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_party_size, F.data.startswith("party_set_size:"))
async def prompt_for_leader_role(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return

    party_size = int(callback.data.split(":")[-1])
    await state.update_data(party_size=party_size)
    await state.set_state(PartyCreationFSM.waiting_for_role_selection)
    await callback.message.edit_text(
        "ü¶∏ <b>–ö—Ä–æ–∫ 3/3: –¢–≤–æ—è —Ä–æ–ª—å</b>\n\n"
        "–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –í–∏–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å —É —Ü—ñ–π –∫–æ–º–∞–Ω–¥—ñ:", 
        reply_markup=create_role_selection_keyboard(ALL_ROLES, "initial")
    )
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_role_selection, F.data.startswith("party_select_role:initial:"))
async def handle_leader_role_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    selected_role = callback.data.split(":")[-1]
    await state.update_data(leader_role=selected_role)
    
    state_data = await state.get_data()
    party_size = state_data.get("party_size", 5)
    
    if party_size < 5:
        await state.set_state(PartyCreationFSM.waiting_for_required_roles)
        num_to_select = party_size - 1
        available_for_selection = [r for r in ALL_ROLES if r != selected_role]
        
        await state.update_data(selected_required_roles=[], num_to_select=num_to_select)
        
        await callback.message.edit_text(
            f"üîç <b>–§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫: –ü–æ—à—É–∫ —Ä–æ–ª–µ–π</b>\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ <b>{num_to_select}</b> —Ä–æ–ª—å(—ñ), —è–∫—É(—ñ) —Ç–∏ —à—É–∫–∞—î—à:",
            reply_markup=create_required_roles_keyboard(available_for_selection, [], num_to_select)
        )
    else:
        await create_party_lobby(callback, state, bot)

@party_router.callback_query(PartyCreationFSM.waiting_for_required_roles, F.data.startswith("party_req_role:"))
async def handle_required_role_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return

    role = callback.data.split(":")[-1]
    selected = data.get("selected_required_roles", [])
    num_to_select = data.get("num_to_select", 1)
    leader_role = data.get("leader_role")
    
    if role in selected:
        selected.remove(role)
    else:
        if len(selected) < num_to_select:
            selected.append(role)
        else:
            await callback.answer(f"–ú–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –ª–∏—à–µ {num_to_select} —Ä–æ–ª—ñ.", show_alert=True)
            return

    await state.update_data(selected_required_roles=selected)
    
    available_for_selection = [r for r in ALL_ROLES if r != leader_role]
    await callback.message.edit_reply_markup(
        reply_markup=create_required_roles_keyboard(available_for_selection, selected, num_to_select)
    )
    await callback.answer()

@party_router.callback_query(PartyCreationFSM.waiting_for_required_roles, F.data == "party_confirm_roles")
async def confirm_required_roles_and_create_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await create_party_lobby(callback, state, bot)

async def create_party_lobby(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.message: return
    user = callback.from_user
    chat = callback.message.chat
    state_data = await state.get_data()
    
    user_name = get_user_display_name(callback)
    # ‚ùóÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∞–Ω–≥ –ª—ñ–¥–µ—Ä–∞
    user_rank = await _get_user_rank(user.id)
    lobby_id = callback.message.message_id
    
    leader_role = state_data.get("leader_role")
    required_roles = state_data.get("selected_required_roles", [])
    
    lobby_data = {
        "leader_id": user.id,
        "leader_name": user_name,
        "players": {user.id: {"name": user_name, "role": leader_role, "rank": user_rank}},
        "chat_id": chat.id,
        "chat_title": chat.title,
        "chat_username": chat.username,
        "state": "open",
        "joining_user": None,
        "game_mode": state_data.get("game_mode", "Ranked"),
        "party_size": state_data.get("party_size", 5),
        "required_roles": required_roles
    }
    
    active_lobbies[lobby_id] = lobby_data
    
    message_text = get_lobby_message_text(lobby_data)
    keyboard = create_lobby_keyboard(lobby_id, lobby_data)
    
    await bot.edit_message_text(
        text=message_text,
        chat_id=callback.message.chat.id,
        message_id=lobby_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–±—ñ {lobby_id} —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º {user_name} (—Ä–µ–∂–∏–º: {lobby_data['game_mode']}, —Ä–æ–∑–º—ñ—Ä: {lobby_data['party_size']})")
    await callback.answer("–õ–æ–±—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    await state.clear()


# === –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö "–ù–ê–ó–ê–î" ===

@party_router.callback_query(F.data == "party_step_back:to_confirmation")
async def step_back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await state.set_state(PartyCreationFSM.waiting_for_confirmation)
    await callback.message.edit_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–∞—á—É, —Ç–∏ –∑–±–∏—Ä–∞—î—à –∫–æ–º–∞–Ω–¥—É.\n"
        "–î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ª–æ–±—ñ?", 
        reply_markup=create_party_confirmation_keyboard()
    )
    await callback.answer()

@party_router.callback_query(F.data == "party_step_back:to_game_mode")
async def step_back_to_game_mode(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await state.set_state(PartyCreationFSM.waiting_for_game_mode)
    await callback.message.edit_text(
        "üéÆ <b>–ö—Ä–æ–∫ 1/3: –†–µ–∂–∏–º –≥—Ä–∏</b>\n\n"
        "–ß—É–¥–æ–≤–æ! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä–∏, –¥–µ –±—É–¥–µ–º–æ –ø–µ—Ä–µ–º–∞–≥–∞—Ç–∏:", 
        reply_markup=create_game_mode_keyboard()
    )
    await callback.answer()

@party_router.callback_query(F.data == "party_step_back:to_party_size")
async def step_back_to_party_size(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await state.set_state(PartyCreationFSM.waiting_for_party_size)
    await callback.message.edit_text(
        "üë• <b>–ö—Ä–æ–∫ 2/3: –†–æ–∑–º—ñ—Ä –∫–æ–º–∞–Ω–¥–∏</b>\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏, —Å–∫—ñ–ª—å–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∏ —à—É–∫–∞—î—à:", 
        reply_markup=create_party_size_keyboard()
    )
    await callback.answer()

@party_router.callback_query(F.data == "party_step_back:to_leader_role")
async def step_back_to_leader_role(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.from_user.id != data.get('initiator_id'):
        await callback.answer("–ù–µ —á—ñ–ø–∞–π, —Ü–µ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞! üò†", show_alert=True)
        return
        
    await state.set_state(PartyCreationFSM.waiting_for_role_selection)
    await callback.message.edit_text(
        "ü¶∏ <b>–ö—Ä–æ–∫ 3/3: –¢–≤–æ—è —Ä–æ–ª—å</b>\n\n"
        "–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –í–∏–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å —É —Ü—ñ–π –∫–æ–º–∞–Ω–¥—ñ:", 
        reply_markup=create_role_selection_keyboard(ALL_ROLES, "initial")
    )
    await callback.answer()


# === –õ–û–ì–Ü–ö–ê –í–ó–ê–Ñ–ú–û–î–Ü–á –ó –õ–û–ë–Ü ===

@party_router.callback_query(F.data.startswith("party_join:"))
async def handle_join_request(callback: CallbackQuery, bot: Bot):
    lobby_id = int(callback.data.split(":")[-1])
    user = callback.from_user
    
    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        try: await callback.message.delete()
        except TelegramAPIError: pass
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id in lobby_data["players"]:
        await callback.answer("–¢–∏ –≤–∂–µ —É —Ü—å–æ–º—É –ø–∞—Ç—ñ!", show_alert=True)
        return
        
    if len(lobby_data["players"]) >= lobby_data.get("party_size", 5):
        await callback.answer("–ü–∞—Ç—ñ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!", show_alert=True)
        return

    if lobby_data["state"] == "joining":
        await callback.answer("–•—Ç–æ—Å—å —ñ–Ω—à–∏–π –∑–∞—Ä–∞–∑ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π.", show_alert=True)
        return
        
    lobby_data["state"] = "joining"
    user_name = get_user_display_name(callback)
    lobby_data["joining_user"] = {"id": user.id, "name": user_name}
    
    new_text = get_lobby_message_text(lobby_data, joining_user_name=user_name)
    new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)

    await bot.edit_message_text(
        text=new_text,
        chat_id=lobby_data["chat_id"],
        message_id=lobby_id,
        reply_markup=new_keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@party_router.callback_query(F.data.startswith("party_select_role:"))
async def handle_join_role_selection(callback: CallbackQuery, bot: Bot):
    parts = callback.data.split(":")
    if parts[1] == "initial": return 
    
    lobby_id = int(parts[1])
    selected_role = parts[-1]
    user = callback.from_user

    if lobby_id not in active_lobbies:
        await callback.answer("–õ–æ–±—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    lobby_data = active_lobbies[lobby_id]

    if lobby_data.get("state") != "joining" or not lobby_data.get("joining_user") or lobby_data["joining_user"]["id"] != user.id:
        await callback.answer("–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤–æ—è —á–µ—Ä–≥–∞ –ø—Ä–∏—î–¥–Ω—É–≤–∞—Ç–∏—Å—è.", show_alert=True)
        return

    user_name = get_user_display_name(callback)
    # ‚ùóÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è, —â–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è
    user_rank = await _get_user_rank(user.id)
    lobby_data["players"][user.id] = {"name": user_name, "role": selected_role, "rank": user_rank}
    lobby_data["state"] = "open" 
    lobby_data["joining_user"] = None
    
    # ‚ùóÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–æ—Å—è –ª–æ–±—ñ
    if len(lobby_data["players"]) >= lobby_data.get("party_size", 5):
        await notify_and_close_full_lobby(bot, lobby_id, lobby_data)
        await callback.answer(f"–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –ø–∞—Ç—ñ! –ö–æ–º–∞–Ω–¥–∞ –∑—ñ–±—Ä–∞–Ω–∞!", show_alert=True)
    else:
        new_text = get_lobby_message_text(lobby_data)
        new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)
        
        await bot.edit_message_text(
            text=new_text,
            chat_id=lobby_data["chat_id"],
            message_id=lobby_id,
            reply_markup=new_keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer(f"–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –ø–∞—Ç—ñ –∑ —Ä–æ–ª–ª—é: {selected_role}!", show_alert=True)

@party_router.callback_query(F.data.startswith("party_leave:"))
async def handle_leave_lobby(callback: CallbackQuery, bot: Bot):
    lobby_id = int(callback.data.split(":")[-1])
    user = callback.from_user
    
    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id not in lobby_data["players"]:
        await callback.answer("–¢–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –ø–∞—Ç—ñ.", show_alert=True)
        return
        
    if user.id == lobby_data["leader_id"]:
        await callback.answer("–õ—ñ–¥–µ—Ä –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–Ω—É—Ç–∏ –ø–∞—Ç—ñ. –¢—ñ–ª—å–∫–∏ –∑–∞–∫—Ä–∏—Ç–∏ –π–æ–≥–æ.", show_alert=True)
        return
        
    removed_player_info = lobby_data["players"].pop(user.id)
    logger.info(f"–ì—Ä–∞–≤–µ—Ü—å {removed_player_info['name']} –ø–æ–∫–∏–Ω—É–≤ –ª–æ–±—ñ {lobby_id}")
    
    new_text = get_lobby_message_text(lobby_data)
    new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)
    try:
        await bot.edit_message_text(
            text=new_text,
            chat_id=lobby_data["chat_id"],
            message_id=lobby_id,
            reply_markup=new_keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–¢–∏ –ø–æ–∫–∏–Ω—É–≤ –ø–∞—Ç—ñ.", show_alert=True)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–±—ñ {lobby_id} –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è: {e}")
        lobby_data["players"][user.id] = removed_player_info

@party_router.callback_query(F.data.startswith("party_cancel_lobby:"))
async def handle_cancel_lobby(callback: CallbackQuery, bot: Bot):
    lobby_id = int(callback.data.split(":")[-1])
    user = callback.from_user
    user_name = get_user_display_name(callback)

    if lobby_id not in active_lobbies:
        await callback.answer("–¶—å–æ–≥–æ –ª–æ–±—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.", show_alert=True)
        return

    lobby_data = active_lobbies[lobby_id]
    
    if user.id != lobby_data["leader_id"]:
        await callback.answer("–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –ø–∞—Ç—ñ –º–æ–∂–µ –∑–∞–∫—Ä–∏—Ç–∏ –ª–æ–±—ñ.", show_alert=True)
        return
        
    del active_lobbies[lobby_id]
    logger.info(f"–õ–æ–±—ñ {lobby_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ª—ñ–¥–µ—Ä–æ–º {user_name}")
    
    try:
        await bot.edit_message_text(
            text="üö´ <b>–õ–æ–±—ñ –∑–∞–∫—Ä–∏—Ç–æ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º.</b>",
            chat_id=lobby_data["chat_id"],
            message_id=lobby_id,
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–õ–æ–±—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.", show_alert=True)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –ª–æ–±—ñ {lobby_id}: {e}")

@party_router.callback_query(F.data.startswith("party_cancel_join:"))
async def cancel_join_selection(callback: CallbackQuery, bot: Bot):
    lobby_id = int(callback.data.split(":")[1])
    user = callback.from_user

    if lobby_id not in active_lobbies:
        await callback.answer("–õ–æ–±—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
        
    lobby_data = active_lobbies[lobby_id]
    
    if (lobby_data["state"] == "joining" and lobby_data["joining_user"]["id"] == user.id) or (lobby_data["leader_id"] == user.id):
        lobby_data["state"] = "open"
        lobby_data["joining_user"] = None
        
        new_text = get_lobby_message_text(lobby_data)
        new_keyboard = create_lobby_keyboard(lobby_id, lobby_data)
        
        await bot.edit_message_text(
            text=new_text,
            chat_id=lobby_data["chat_id"],
            message_id=lobby_id,
            reply_markup=new_keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await callback.answer("–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü—é –¥—ñ—é.", show_alert=True)


# === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ===
def register_party_handlers(dp: Router):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–∞—Ç—ñ."""
    dp.include_router(party_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")