"""
utils/file_manager.py

–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Heroku dyno restarts.
–ó–∞–±–µ–∑–ø–µ—á—É—î –ø–æ—Å—Ç—ñ–π–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É Cloudinary —Ç–∞ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∏.
"""
import asyncio
from typing import Optional, Dict, Any

import aiohttp
import cloudinary
import cloudinary.uploader
from aiohttp.client_exceptions import ClientResponseError

from config import CLOUDINARY_URL, logger

# –Ø–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Cloudinary –∑ URL
try:
    cloudinary.config(cloudinary_url=CLOUDINARY_URL)
    logger.info("Cloudinary –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑ CLOUDINARY_URL.")
except Exception as e:
    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É–≤–∞—Ç–∏ Cloudinary –∑ CLOUDINARY_URL: {e}", exc_info=True)


class FileResilienceManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–∞ Heroku.
    –ó–¥—ñ–π—Å–Ω—é—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —É Cloudinary
    –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —Ç–∞ fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π URL.
    """

    async def __aenter__(self) -> "FileResilienceManager":
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π context manager –¥–ª—è HTTP —Å–µ—Å—ñ—ó."""
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ù—ñ—á–æ–≥–æ –Ω–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ, –±–æ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∏ session."""

    async def optimize_and_store_image(
        self,
        image_bytes: bytes,
        user_id: int,
        file_type: str,
        max_size_kb: int = 500
    ) -> Optional[str]:
        """
        –û–ø—Ç–∏–º—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —É Cloudinary.

        Args:
            image_bytes: –ë–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            file_type: –¢–∏–ø —Ñ–∞–π–ª—É ('profile', 'stats', 'heroes', 'avatar').
            max_size_kb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —É –ö–ë –¥–ª—è –∫–æ–º–ø—Ä–µ—Å—ñ—ó.

        Returns:
            –ü–æ—Å—Ç—ñ–π–Ω–∏–π URL –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ None.
        """
        public_id = f"mlbb_user_{user_id}_{file_type}_optimized"
        upload_params: Dict[str, Any] = {
            "public_id": public_id,
            "folder": "mlbb_profiles",
            "resource_type": "image",
            "format": "webp",
            "quality": "auto:good",
            "fetch_format": "auto",
            "overwrite": True,
            "invalidate": True
        }
        if len(image_bytes) > max_size_kb * 1024:
            upload_params.update({
                "quality": "auto:low",
                "width": 800,
                "height": 800,
                "crop": "limit"
            })

        try:
            logger.debug(
                "Cloudinary upload start",
                extra={
                    "user_id": user_id,
                    "file_type": file_type,
                    "upload_params": upload_params
                }
            )
            result = await asyncio.to_thread(
                cloudinary.uploader.upload,
                image_bytes,
                **upload_params
            )
            logger.debug(
                "Cloudinary upload result",
                extra={"user_id": user_id, "result": result}
            )

            optimized_url = result.get("secure_url") or result.get("url")
            if optimized_url:
                logger.info(
                    f"Image stored for user {user_id}, type={file_type}: {optimized_url}"
                )
                return optimized_url

            logger.warning(
                f"No URL returned for user {user_id}, type={file_type}",
                extra={"result_keys": list(result.keys())}
            )
        except ClientResponseError as e:
            logger.error(
                f"Cloudinary HTTP error for user {user_id}, type={file_type}: {e}",
                exc_info=True
            )
        except Exception as e:
            logger.exception(
                f"Unexpected error optimizing image for user {user_id}, type={file_type}: {e}"
            )
        return None

    @staticmethod
    def get_enhanced_error_message(user_name: str) -> str:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–∫—Ä–∞—â–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        return (
            f"üîÑ **–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name}!**\n\n"
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –±—É–≤ —Ç–∏–º—á–∞—Å–æ–≤–∏–º.\n\n"
            "üì∏ **–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —â–µ —Ä–∞–∑.**\n\n"
            "üôè –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
        )


file_resilience_manager = FileResilienceManager()
