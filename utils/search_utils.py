"""
–£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—à—É–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
"""
import aiohttp
import json
from typing import List, Dict, Any, Optional
from config import logger


async def search_mlbb_info(query: str) -> Optional[List[Dict[str, Any]]]:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ MLBB —á–µ—Ä–µ–∑ –ø—É–±–ª—ñ—á–Ω—ñ API.
    
    Args:
        query: –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É –∞–±–æ None
    """
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑:
    # - YouTube Data API –¥–ª—è –ø–æ—à—É–∫—É –≥–∞–π–¥—ñ–≤
    # - Reddit API –¥–ª—è –ø–æ—à—É–∫—É –æ–±–≥–æ–≤–æ—Ä–µ–Ω—å
    # - Custom scraper –¥–ª—è –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —Å–∞–π—Ç—É MLBB
    
    # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    logger.info(f"Fallback search for: {query}")
    return None


def format_search_results(results: List[Dict[str, Any]], user_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —É HTML.
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π HTML —Ç–µ–∫—Å—Ç
    """
    if not results:
        return f"–í–∏–±–∞—á, {user_name}, –Ω–µ –∑–Ω–∞–π—à–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ —Ç–≤–æ—î–º—É –∑–∞–ø–∏—Ç—É. üòî"
    
    formatted = [f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è {user_name}:</b>\n"]
    
    for i, result in enumerate(results[:5], 1):
        formatted.append(f"{i}. <b>{result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}</b>")
        if snippet := result.get('snippet'):
            formatted.append(f"   {snippet}")
        if source := result.get('source'):
            formatted.append(f"   <i>–î–∂–µ—Ä–µ–ª–æ: {source}</i>")
        formatted.append("")
    
    return "\n".join(formatted)
