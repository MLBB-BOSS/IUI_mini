"""
utils/redis_client.py

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑‚Äô—î–¥–Ω–∞–Ω—å –¥–æ Redis —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π redis-py (asyncio).
"""
import asyncio
from typing import Optional

from redis import asyncio as aioredis  # ‚Üê –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–æ–≥–æ aioredis
from config import REDIS_URL, logger

_redis: Optional[aioredis.Redis] = None
_lock = asyncio.Lock()

async def get_redis() -> aioredis.Redis:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—É–ª –∑‚Äô—î–¥–Ω–∞–Ω—å Redis.
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–ª–∏–∫—É.
    """
    global _redis
    if _redis is None:
        async with _lock:
            if _redis is None:
                if not REDIS_URL:
                    raise RuntimeError("REDIS_URL is not set in config.")
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ redis-py asyncio API
                    _redis = aioredis.from_url(
                        REDIS_URL, encoding="utf-8", decode_responses=True, max_connections=10
                    )
                    logger.info("‚úÖ Redis (redis-py asyncio) client initialized.")
                except Exception as e:
                    logger.error(f"‚ùå Failed to connect to Redis: {e}", exc_info=True)
                    raise
    return _redis

async def close_redis() -> None:
    """
    –ó–∞–∫—Ä–∏–≤–∞—î –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è Redis –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    global _redis
    if _redis:
        try:
            await _redis.close()
            logger.info("üîí Redis connection closed.")
        except Exception as e:
            logger.warning(f"Error closing Redis connection: {e}", exc_info=True)
        finally:
            _redis = None
