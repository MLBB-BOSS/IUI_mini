"""
utils/formatter.py

–ú–∞–π—Å—Ç–µ—Ä –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
–≤—Å—ñ—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞ –∑–∞ —î–¥–∏–Ω–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º.
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –î—ñ–∞–ª–æ–≥–æ–≤–æ—ó –°–∏—Å—Ç–µ–º–∏" (ADS).
"""
import html
import re
from typing import Literal

ContentType = Literal["default", "success", "error", "joke", "technical", "tip"]

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞ –µ–º–æ–¥–∑—ñ –∑–∞ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
RESPONSE_TEMPLATES = {
    "default": {
        "emoji": "üí¨",
        "title": "GGenius –Ω–∞ –∑–≤'—è–∑–∫—É"
    },
    "success": {
        "emoji": "üèÜ",
        "title": "–ü–µ—Ä–µ–º–æ–≥–∞!"
    },
    "error": {
        "emoji": "üíÄ",
        "title": "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫"
    },
    "joke": {
        "emoji": "üòÇ",
        "title": "–•–≤–∏–ª–∏–Ω–∫–∞ –≥—É–º–æ—Ä—É"
    },
    "technical": {
        "emoji": "‚öôÔ∏è",
        "title": "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"
    },
    "tip": {
        "emoji": "üí°",
        "title": "–ö–æ—Ä–∏—Å–Ω–∞ –ø–æ—Ä–∞–¥–∞"
    }
}

def _sanitize_html(text: str) -> str:
    """
    –û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö Telegram HTML-—Ç–µ–≥—ñ–≤.
    –ó–∞–º—ñ–Ω—é—î <br> –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —Ç–∞ –≤–∏–¥–∞–ª—è—î —ñ–Ω—à—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ç–µ–≥–∏.
    """
    # –ó–∞–º—ñ–Ω–∞ —Ç–µ–≥—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ä—è–¥–∫–∞
    sanitized_text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤, —â–æ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è (ul, li, p, div)
    # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–∞–∫—Ä–∏–≤–∞—é—á—ñ —Ç–µ–≥–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    sanitized_text = re.sub(r'</(li|p|div|ul|ol)>', '\n', sanitized_text, flags=re.IGNORECASE)
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ñ–æ—Ä–º–∏ —Ü–∏—Ö —Ç–µ–≥—ñ–≤
    sanitized_text = re.sub(r'<(/?)(ul|ol|li|p|div|span)\b[^>]*>', '', sanitized_text, flags=re.IGNORECASE)

    # –ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–µ–≥—ñ–≤ (b, i, code), —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –∑–∞–∫—Ä–∏—Ç—ñ
    tags_to_balance = ["b", "i", "code"]
    for tag in tags_to_balance:
        open_tags = len(re.findall(f'<{tag}>', sanitized_text, re.IGNORECASE))
        close_tags = len(re.findall(f'</{tag}>', sanitized_text, re.IGNORECASE))
        if open_tags > close_tags:
            sanitized_text += f'</{tag}>' * (open_tags - close_tags)
            
    return sanitized_text.strip()

def format_bot_response(
    text: str,
    content_type: ContentType = "default",
    tip: str | None = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏–≥–ª—è–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞.

    Args:
        text: –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –≤–∏–±–æ—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –µ–º–æ–¥–∑—ñ.
        tip: –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –ø–æ—Ä–∞–¥–∞, —â–æ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –∫—ñ–Ω—Ü—ñ.

    Returns:
        –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É HTML.
    """
    template = RESPONSE_TEMPLATES.get(content_type, RESPONSE_TEMPLATES["default"])
    
    header = f"{template['emoji']} <b>{template['title']}</b>"
    
    # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ HTML, –ø–æ—Ç—ñ–º —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ
    safe_text = _sanitize_html(text)

    parts = [
        header,
        "",
        safe_text
    ]

    if tip:
        parts.extend([
            "",
            f"üí° <i>–ü–æ—Ä–∞–¥–∞: {html.escape(tip)}</i>"
        ])
    
    return "\n".join(parts)
