"""
utils/formatter.py

–ú–∞–π—Å—Ç–µ—Ä –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
–≤—Å—ñ—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞ –∑–∞ —î–¥–∏–Ω–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º.
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—ó –î—ñ–∞–ª–æ–≥–æ–≤–æ—ó –°–∏—Å—Ç–µ–º–∏" (ADS).
"""
import html
import re
from typing import Literal

# –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –Ω–∞–∑–≤—É —Ç–∏–ø—É
ContentType = Literal["default", "success", "error", "joke", "technical", "tip"]

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞ –µ–º–æ–¥–∑—ñ –∑–∞ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
RESPONSE_TEMPLATES = {
    "default": {"emoji": "üí¨", "title": "GGenius –Ω–∞ –∑–≤'—è–∑–∫—É"},
    "success": {"emoji": "üèÜ", "title": "–ü–µ—Ä–µ–º–æ–≥–∞!"},
    "error": {"emoji": "üíÄ", "title": "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫"},
    "joke": {"emoji": "üòÇ", "title": "–•–≤–∏–ª–∏–Ω–∫–∞ –≥—É–º–æ—Ä—É"},
    "technical": {"emoji": "‚öôÔ∏è", "title": "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"},
    "tip": {"emoji": "üí°", "title": "–ö–æ—Ä–∏—Å–Ω–∞ –ø–æ—Ä–∞–¥–∞"}
}

def _sanitize_html(text: str) -> str:
    """
    –û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö Telegram HTML-—Ç–µ–≥—ñ–≤.
    –ó–∞–º—ñ–Ω—é—î <br> –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫.
    """
    return re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE).strip()

def format_bot_response(
    text: str,
    content_type: ContentType = "default", # ‚ùóÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏ –Ω–∞–∑–≤—É 'content_type'
    tip: str | None = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏–≥–ª—è–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞.
    –î–ª—è —Ç–∏–ø—ñ–≤ 'default', 'joke', 'success' –ø–æ–≤–µ—Ä—Ç–∞—î "—Å–∏—Ä–∏–π" —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.

    Args:
        text: –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç–∏–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
        tip: –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –ø–æ—Ä–∞–¥–∞, —â–æ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –∫—ñ–Ω—Ü—ñ.

    Returns:
        –ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É HTML –∞–±–æ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç—ñ.
    """
    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ä–æ–∑–º–æ–≤–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–±–≥–æ—Ä—Ç–∫–∏
    if content_type in ["default", "joke", "success"]:
        return _sanitize_html(text)

    # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ (error, technical, tip) –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –≤–∏–≥–ª—è–¥
    template = RESPONSE_TEMPLATES.get(content_type, RESPONSE_TEMPLATES["default"])
    
    header = f"{template['emoji']} <b>{template['title']}</b>"
    safe_text = _sanitize_html(text)

    parts = [header, "", safe_text]

    if tip:
        parts.extend(["", f"üí° <i>–ü–æ—Ä–∞–¥–∞: {html.escape(tip)}</i>"])
    
    return "\n".join(parts)
