# services/gemini_service.py

"""
–°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Google Gemini API.
–¶–µ–π —Ñ–∞–π–ª —ñ–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ google-genai.
- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –º–æ–¥–µ–ª—ñ Gemini.
- –û–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ API.
- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è "–∑–∞–ª—ñ–∑–Ω–∏—Ö" –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–µ—Ä—Å—ñ—é Gemini 2.5.
"""
import logging
import os
from typing import Optional
import asyncio
from datetime import datetime, timezone

import google.generativeai as genai
from google.api_core.exceptions import GoogleAPIError
from google.api_core import retry_async
# üÜï –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥—É –≤–∏–∫–ª–∏–∫—ñ–≤ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
from google.generativeai.types import FunctionCall, ToolOutput

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä –∑ config.py
from config import logger # GOOGLE_CLOUD_PROJECT_ID –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—É—Ç –¥–ª—è genai.configure()

# === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø GEMINI API ===
try:
    GEMINI_API_KEY = os.getenv('API_Gemini')
    if not GEMINI_API_KEY:
        raise ValueError("–ö–ª—é—á API_Gemini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Heroku Config Vars.")

    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑ —è–≤–Ω–æ–≥–æ Project ID —É client_options, –±–æ –¥–ª—è API key —Ü–µ –Ω–µ —Ç–∏–ø–æ–≤–æ
    # —Ç–∞ –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ API Endpoint —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –Ω–µ–≤—ñ—Ä–Ω–æ.
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å Google Gemini —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–æ.")
except (ValueError, ImportError) as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Gemini: {e}")

class GeminiSearch:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ç—É–∂–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏.
    """
    def __init__(self):
        # –ú–æ–¥–µ–ª—å –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º Grounding (–ø–æ—à—É–∫–æ–º) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—Ä—ñ—à—É—î, –∫–æ–ª–∏ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
        # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —è–≤–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ tools=[] –¥–ª—è –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ Google Search Tool.
        self.model = genai.GenerativeModel('models/gemini-2.5-pro')
        logger.info("–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: gemini-2.5-pro (–∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Google Search Grounding).")

    @retry_async.AsyncRetry(predicate=retry_async.if_exception_type(GoogleAPIError), initial=1.0, maximum=10.0, multiplier=2.0)
    async def get_search_response(self, user_query: str, user_name: str) -> Optional[str]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–æ Gemini –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º "–∑–∞–ª—ñ–∑–Ω–æ–≥–æ" –ø—Ä–æ–º–ø—Ç—É.

        Args:
            user_query: –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.

        Returns:
            –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
        """
        # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        if "—è–∫–∞ —Å—å–≥–æ–¥–Ω—ñ –¥–∞—Ç–∞" in user_query.lower() or "—è–∫–∞ –¥–∞—Ç–∞" in user_query.lower():
            current_date = datetime.now(timezone.utc).strftime('%Y-%m-%d')
            return f"–°—å–æ–≥–æ–¥–Ω—ñ {current_date}, {user_name}! üòä"

        if len(user_query) > 1000:
            logger.warning(f"–ó–∞–ø–∏—Ç –≤—ñ–¥ {user_name} –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π: {len(user_query)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return f"–í–∏–±–∞—á, {user_name}, —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–∫–æ—Ä–æ—Ç–∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤."

        prompt = f"""
        **–ó–ê–í–î–ê–ù–ù–Ø:** –¢–∏ ‚Äî –≤–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –¥–≤–∏–≥—É–Ω –Ω–∞ –±–∞–∑—ñ AI –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ Google Search. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–¥–∞—Ç–∏ –ø—Ä—è–º—É, —Ñ–∞–∫—Ç–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ –¥–∞–Ω—ñ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.

        **–ö–û–ù–¢–ï–ö–°–¢:**
        - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
        - –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{user_query}"

        **–ö–†–ò–¢–ò–ß–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:**
        1. **–ü–û–®–£–ö –í –Ü–ù–¢–ï–†–ù–ï–¢–Ü:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Google Search –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –¶–∏—Ç—É–π –¥–∂–µ—Ä–µ–ª–∞, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ.
        2. **–ü–†–Ø–ú–ê –í–Ü–î–ü–û–í–Ü–î–¨:** –ù–µ–≥–∞–π–Ω–æ –Ω–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç. –ù–µ –ø—Ä–æ–ø–æ–Ω—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —à—É–∫–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–µ—ñ–Ω–¥–µ.
        3. **–ó–ê–ë–û–†–û–ù–ê –í–Ü–î–ú–û–í–ò:** –ö–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø–∏—Å–∞—Ç–∏ —Ñ—Ä–∞–∑–∏ —Ç–∏–ø—É "–Ø –Ω–µ –º–∞—é –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ". –¢–∏ –ü–û–í–ò–ù–ï–ù –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
        4. **–§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø:** –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —á—ñ—Ç–∫–æ—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Markdown (–∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç, —Å–ø–∏—Å–∫–∏) –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ.
        5. **–¢–ï–†–ú–Ü–ù–û–õ–û–ì–Ü–Ø MLBB:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ—Ä–º—ñ–Ω–∏ Mobile Legends, —è–∫-–æ—Ç "–ø–∞—Ç—ñ", "–º—ñ–¥", "—Ç–∞–Ω–∫", —è–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≥—Ä–∏.

        **–í–ò–ö–û–ù–ê–ô –ó–ê–í–î–ê–ù–ù–Ø.**
        """
        try:
            logger.info(f"–ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –¥–æ Gemini –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}: '{user_query[:60]}...'")

            # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –º–æ–¥–µ–ª—ñ.
            # –ú–æ–¥–µ–ª—ñ —Ç–∏–ø—É Gemini 2.5 Pro –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º Grounding (–ø–æ—à—É–∫–æ–º)
            # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—Ä—ñ—à—É—é—Ç—å, –∫–æ–ª–∏ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç—É.
            response = await self.model.generate_content_async(prompt)

            # --- –î–µ–±–∞–≥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ---
            if response.candidates:
                logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∏ –≤—ñ–¥ Gemini. –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {len(response.candidates)}")
                for i, candidate in enumerate(response.candidates):
                    logger.info(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {i+1}:")
                    if candidate.content:
                        for part in candidate.content.parts:
                            if isinstance(part, FunctionCall):
                                logger.info(f"  –ú–û–î–ï–õ–¨ –í–ò–ö–õ–ò–ö–ê–õ–ê –Ü–ù–°–¢–†–£–ú–ï–ù–¢: {part.name}(args={part.args})")
                                if part.name == 'search': # –Ø–∫—â–æ –º–æ–¥–µ–ª—å —è–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "search"
                                    logger.info("  -> –ú–æ–¥–µ–ª—å —Å–ø—Ä–æ–±—É–≤–∞–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω–∏–π Google Search.")
                            elif isinstance(part, ToolOutput):
                                logger.info(f"  –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ò–ö–õ–ò–ö–£ –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ê ({part.tool_name}): {str(part.result)[:200]}...") # –õ–æ–≥—É—î–º–æ –ª–∏—à–µ —á–∞—Å—Ç–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                            else:
                                logger.info(f"  –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—É —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î–æ–≤–∂–∏–Ω–∞: {len(part.text) if part.text else 0}")
                    else:
                        logger.warning(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {i+1} –Ω–µ –º–∞—î –≤–º—ñ—Å—Ç—É (content). Finish reason: {candidate.finish_reason}")
            else:
                logger.warning(f"Response does not contain any candidates. Debug info: {response.to_dict()}")
            # --- –ö—ñ–Ω–µ—Ü—å –¥–µ–±–∞–≥ –ª–æ–≥—É–≤–∞–Ω–Ω—è ---

            final_response_text = ""
            if response.text:
                final_response_text = response.text.strip()
            elif response.candidates and response.candidates[0].finish_reason:
                final_response_text = (
                    f"–ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑ –ø—Ä–∏—á–∏–Ω–æ—é: {response.candidates[0].finish_reason}. "
                    "–ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∞–±–æ –≤–æ–Ω–∞ –Ω–µ –∑–º–æ–≥–ª–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
                )
            else:
                final_response_text = f"–í–∏–±–∞—á, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini. –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É —Ç–∞ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."


            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini –¥–ª—è {user_name}. Final response length: {len(final_response_text)}")
            return final_response_text
        except GoogleAPIError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Google API –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ Gemini –≤—ñ–¥ {user_name}: {e}")
            if "quota" in str(e).lower():
                logger.info(f"Quota exceeded. Please check your Google Cloud quotas. Error: {e}")
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ await asyncio.sleep(35) —è–∫—â–æ —Ü–µ –¥—ñ–π—Å–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è
                # –ê–ª–µ –¥–ª—è "–ø–æ—Å—Ç—ñ–π–Ω–∏—Ö" –ø–æ–º–∏–ª–æ–∫ –∫—Ä–∞—â–µ –Ω–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞—Ç–∏ —Ä–µ—Ç—Ä–∞–π
                return f"–í–∏–±–∞—á, {user_name}, —Å—Ö–æ–∂–µ, –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫–≤–æ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Gemini. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–µ—Ç–∞–ª—ñ: {e}"
            elif "permission denied" in str(e).lower() or "unauthenticated" in str(e).lower():
                 logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó/–¥–æ–∑–≤–æ–ª—ñ–≤ –¥–ª—è Gemini API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–ª—é—á —Ç–∞ –¥–æ–∑–≤–æ–ª–∏ Project ID. Error: {e}")
                 return f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –¥–æ–∑–≤–æ–ª–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–µ—Ä–≤—ñ—Å—É Gemini. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ —Ç–∞ –¥–æ–∑–≤–æ–ª–∏ —É Google Cloud."
            else:
                return f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É Google: {e}. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ."
        except Exception as e:
            logger.exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Å–µ—Ä–≤—ñ—Å—ñ Gemini –¥–ª—è {user_name}: {e}")
            return f"–í–∏–±–∞—á, {user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –∑–æ–≤—Å—ñ–º –Ω–µ —Ç–∞–∫. –ú–∏ –≤–∂–µ –¥–æ—Å–ª—ñ–¥–∂—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É."

