"""
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–µ—Ä—Å—ñ—é Gemini 2.5 –ø—ñ–¥—á–∞—Å –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω —É –∫–æ–¥—ñ –Ω–µ –∑–º—ñ–Ω—é–π –º–æ–¥–µ–ª—å AI
–°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Google Gemini API.
–¶–µ–π —Ñ–∞–π–ª —ñ–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—é –ª–æ–≥—ñ–∫—É –¥–ª—è:
- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ google-genai.
- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –º–æ–¥–µ–ª—ñ Gemini.
- –û–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ API.
- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è "–∑–∞–ª—ñ–∑–Ω–∏—Ö" –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
"""
import logging
import os
import re
from typing import Optional
import asyncio
from datetime import datetime, timezone

import google.generativeai as genai
from google.api_core.exceptions import GoogleAPIError
from google.api_core import retry_async

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä, –∞ –∫–ª—é—á –∑—á–∏—Ç—É—î–º–æ –∑ os.getenv
from config import logger

# === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø GEMINI API ===
try:
    GEMINI_API_KEY = os.getenv('API_Gemini')
    if not GEMINI_API_KEY:
        raise ValueError("–ö–ª—é—á API_Gemini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å Google Gemini —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–æ.")
except (ValueError, ImportError) as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Gemini: {e}")

class GeminiSearch:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ç—É–∂–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏.
    """
    def __init__(self):
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –±–µ–∑ tools –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        self.model = genai.GenerativeModel('gemini-2.5-pro')
        logger.info("–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: gemini-2.5-pro")

    def _convert_markdown_to_html(self, text: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç—É—î Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —É HTML –¥–ª—è Telegram.
        
        Args:
            text: –¢–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown
            
        Returns:
            –¢–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ HTML
        """
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ - —Å–ø–æ—á–∞—Ç–∫—É ### –ø–æ—Ç—ñ–º ## —ñ #
        text = re.sub(r'^###\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
        text = re.sub(r'^##\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
        text = re.sub(r'^#\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
        
        # –ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç (–æ–±—Ä–æ–±–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'__(.+?)__', r'<b>\1</b>', text)
        
        # –ö—É—Ä—Å–∏–≤ (—É–Ω–∏–∫–∞—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑ –∂–∏—Ä–Ω–∏–º)
        text = re.sub(r'(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)', r'<i>\1</i>', text)
        text = re.sub(r'(?<!_)_(?!_)(.+?)(?<!_)_(?!_)', r'<i>\1</i>', text)
        
        # –ö–æ–¥
        text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)
        
        # –°–ø–∏—Å–∫–∏ (–º–∞—Ä–∫–µ—Ä–æ–≤–∞–Ω—ñ)
        text = re.sub(r'^\*\s+(.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
        text = re.sub(r'^-\s+(.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
        text = re.sub(r'^\+\s+(.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
        
        # –ù—É–º–µ—Ä–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏
        text = re.sub(r'^\d+\.\s+(.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
        
        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è [text](url) -> text
        text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –±–ª–æ–∫–∏ –∫–æ–¥—É
        text = re.sub(r'```[\s\S]*?```', '', text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        text = re.sub(r'\n{3,}', '\n\n', text)
        
        return text.strip()

    @retry_async.AsyncRetry(predicate=retry_async.if_exception_type(GoogleAPIError), initial=1.0, maximum=10.0, multiplier=2.0)
    async def get_search_response(self, user_query: str, user_name: str) -> Optional[str]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–æ Gemini –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º "–∑–∞–ª—ñ–∑–Ω–æ–≥–æ" –ø—Ä–æ–º–ø—Ç—É.

        Args:
            user_query: –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.

        Returns:
            –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
        """
        # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        if "—è–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–∞—Ç–∞" in user_query.lower() or "—è–∫–∞ –¥–∞—Ç–∞" in user_query.lower():
            current_date = datetime.now(timezone.utc).strftime('%d.%m.%Y')
            return f"–°—å–æ–≥–æ–¥–Ω—ñ <b>{current_date}</b>, {user_name}! üòä"

        if len(user_query) > 1000:
            logger.warning(f"–ó–∞–ø–∏—Ç –≤—ñ–¥ {user_name} –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π: {len(user_query)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return f"–í–∏–±–∞—á, {user_name}, —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–∫–æ—Ä–æ—Ç–∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤."

        # –û–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –≤ HTML
        prompt = f"""
–¢–∏ ‚Äî –ø–æ—à—É–∫–æ–≤–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏ –ø—Ä–æ Mobile Legends: Bang Bang –¥–æ —Å—ñ—á–Ω—è 2025 —Ä–æ–∫—É.

**–ö–û–ù–¢–ï–ö–°–¢:**
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ó–∞–ø–∏—Ç: "{user_query}"
- –î–∞—Ç–∞: {datetime.now(timezone.utc).strftime('%d.%m.%Y')}

**–Ü–ù–°–¢–†–£–ö–¶–Ü–á:**
1. –ù–∞–¥–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—ó—Ö –∑–Ω–∞–Ω—å –¥–æ —Å—ñ—á–Ω—è 2025
2. –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –Ω–æ–≤–∏–Ω –ø—ñ—Å–ª—è —Å—ñ—á–Ω—è 2025, —á–µ—Å–Ω–æ —Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ
3. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ MLBB –∫–æ–Ω—Ç–µ–Ω—Ç—ñ: –≥–µ—Ä–æ—ó, –ø—Ä–µ–¥–º–µ—Ç–∏, –ø–∞—Ç—á—ñ, –º–µ—Ç–∞, —Ç—É—Ä–Ω—ñ—Ä–∏
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ
5. **–í–ê–ñ–õ–ò–í–û**: –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
6. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>

**–°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü:**
- –ö–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ (1-2 —Ä–µ—á–µ–Ω–Ω—è)  
- –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –ø—É–Ω–∫—Ç–∞—Ö
- –Ø–∫—â–æ –º–æ–∂–ª–∏–≤–æ, –≤–∫–∞–∂–∏ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞

–ù–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º:
"""
        
        try:
            logger.info(f"–ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –¥–æ Gemini –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}: '{user_query[:60]}...'")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = await self.model.generate_content_async(
                prompt,
                generation_config=genai.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=2048,
                    top_p=0.9,
                    top_k=40,
                )
            )
            
            if response.text:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ –≤ HTML —Ñ–æ—Ä–º–∞—Ç—ñ
                if '<b>' in response.text or '<i>' in response.text:
                    # –í–∂–µ HTML, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
                    clean_response = response.text.strip()
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Markdown –≤ HTML
                    clean_response = self._convert_markdown_to_html(response.text)
                
                logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name}. Length: {len(clean_response)}")
                return clean_response
            else:
                return f"–í–∏–±–∞—á, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
                
        except GoogleAPIError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Google API –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ Gemini –≤—ñ–¥ {user_name}: {e}")
            if "quota" in str(e).lower():
                logger.info(f"Quota exceeded, waiting 35 seconds for retry...")
                await asyncio.sleep(35)
                return await self.get_search_response(user_query, user_name)
            elif "rate_limit" in str(e).lower():
                return f"–í–∏–±–∞—á, {user_name}, –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É. ‚è≥"
            return f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."
        except Exception as e:
            logger.exception(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Å–µ—Ä–≤—ñ—Å—ñ Gemini –¥–ª—è {user_name}: {e}")
            return f"–í–∏–±–∞—á, {user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú–∏ –≤–∂–µ –¥–æ—Å–ª—ñ–¥–∂—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É."
