"""
–î–≤–∏–≥—É–Ω –ö–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–±–æ—Ä—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –ø—Ä–æ–º–ø—Ç—É.
"""
import re
from dataclasses import dataclass, field
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, List, Literal

from config import logger
from utils.cache_manager import load_user_cache

# üíé –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –¥–æ —Ç–∏–ø—É Intent
Intent = Literal[
    "technical_help", "emotional_support", "celebration", 
    "casual_chat", "ambiguous_request", "neutral"
]
TimeOfDay = Literal["morning", "afternoon", "evening", "night"]

@dataclass
class ContextVector:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–ø–∏—Ç.
    """
    user_id: int
    user_profile: Dict[str, Any] | None = None
    chat_history: List[Dict[str, str]] = field(default_factory=list)
    last_message_intent: Intent = "neutral"
    time_of_day: TimeOfDay = "afternoon"

def _analyze_user_intent(message_text: str) -> Intent:
    """
    –í–∏–∑–Ω–∞—á–∞—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —Å—Ç–∏–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
    üíé –û–ù–û–í–õ–ï–ù–û: –†–æ–∑—à–∏—Ä–µ–Ω–æ —Å–ª–æ–≤–Ω–∏–∫–∏ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫.
    """
    text_lower = message_text.lower()

    # --- 1. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ñ—Å—Ç—å ---
    AMBIGUOUS_PATTERNS = [
        r'\b(–≤–∏–±—ñ—Å–∏–≤|–±—ñ—Å–∏—Ç—å|–¥—Ä–∞—Ç—É—î|–∑–∞–¥–æ–≤–±–∞–ª–æ|—Ü–µ –∂–∞—Ö|—è –≤ —à–æ—Ü—ñ)\b',
        r'\b(—Ç–∞–∫–µ —Å–æ–±—ñ|–Ω–µ –¥—É–∂–µ|–ø–æ–≥–∞–Ω–æ –≤—Å–µ)\b'
    ]
    GAME_CONTEXT_KEYWORDS = [
        r'\b(–≥—Ä–∞|–≥—Ä—ñ|–∫–∞—Ç–∫–∞|–∫–∞—Ç–∫—É|–º–∞—Ç—á|—Ç—ñ–º–µ–π—Ç|—Ä–∞–Ω–≥|–º—ñ–¥|–±–æ—Ç|—Ç–æ–ø|–≥–µ—Ä–æ–π|–ø–µ—Ä—Å–æ–Ω–∞–∂|–º–≤–ø|savage)\b'
    ]
    is_ambiguous = any(re.search(p, text_lower) for p in AMBIGUOUS_PATTERNS)
    has_game_context = any(re.search(kw, text_lower) for kw in GAME_CONTEXT_KEYWORDS)

    if is_ambiguous and not has_game_context:
        logger.info("–í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.")
        return "ambiguous_request"

    # --- 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ñ –µ–º–æ—Ü—ñ–π–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ) ---
    EMOTIONAL_PATTERNS = [
        # –ü–æ—Ä–∞–∑–∫–∞ / –§—Ä—É—Å—Ç—Ä–∞—Ü—ñ—è
        r'\b(–∑–ª–∏–≤|–ø—Ä–æ–≥—Ä–∞–≤|—Ç—ñ–ª—Ç|–¥–Ω–æ|—Ä–∞–∫–∏|—Ñ—ñ–¥–æ–Ω—è|—Ñ—ñ–¥–∏—Ç–∏|–Ω–µ–Ω–∞–≤–∏–¥–∂—É)\b',
        # –†–æ–∑–¥—Ä–∞—Ç—É–≤–∞–Ω–Ω—è
        r'\b(–∫–∞–ø–µ—Ü—å|–±–µ–∑–¥–∞—Ä—ñ|–≤—Ç–æ–º–∏–≤—Å—è|–∑–∞–¥–æ–≤–±–∞–ª–∏)\b',
        # –ó–∞–≥–∞–ª—å–Ω—ñ –µ–º–æ—Ü—ñ–π–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏
        r'(!{2,}|\.{3,})', 
        r'\b(üò≠|üò°|ü§¨|üò§|üò©|üíÄ)\b'
    ]
    if any(re.search(p, text_lower) for p in EMOTIONAL_PATTERNS):
        return "emotional_support"

    # --- 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ñ –µ–º–æ—Ü—ñ–π–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ) ---
    CELEBRATION_PATTERNS = [
        # –ü–µ—Ä–µ–º–æ–≥–∞ / –ü–æ—Ö–≤–∞–ª–∞
        r'\b(gg|ez|—ñ–∑—ñ|–≤–∏–≥—Ä–∞–≤|–ø–µ—Ä–µ–º—ñ–≥|–∞–ø–Ω—É–≤|—Ç–∞—â—É|–∑–∞—Ç–∞—â–∏–≤|–∫—Ä–∞—Å–∞–≤–∞|—Ç–æ–ø|—ñ–º–±–∞)\b',
        # –Ü–≥—Ä–æ–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        r'\b(mvp|–º–≤–ø|savage|—Å–∞–≤–∞–∂|–º–∞–Ω—å—è–∫)\b',
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ–¥–∑—ñ
        r'\b(ü§£|üòÇ|üòé|üèÜ|üî•|üí™|ü•≥)\b'
    ]
    if any(re.search(p, text_lower) for p in CELEBRATION_PATTERNS):
        return "celebration"
    
    # --- 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ / –ø—Ä–æ—Ö–∞–Ω–Ω—è –ø—Ä–æ –¥–æ–ø–æ–º–æ–≥—É ---
    HELP_PATTERNS = [
        # –ü—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        r'\b(–¥–æ–ø–æ–º–æ–∂–∏|—è–∫|—â–æ —Ä–æ–±–∏—Ç–∏|–ø–æ—Ä–∞–¥—å|–ø—ñ–¥–∫–∞–∂–∏|–Ω–∞–≤—á–∏|–ø–æ—è—Å–Ω–∏|—Ä–æ–∑–∫–∞–∂–∏)\b',
        # –ó–∞–ø–∏—Ç–∏ –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç–∏ / –≥–µ—Ä–æ—ó–≤
        r'\b(—è–∫–∏–π|—è–∫–∞|—è–∫–µ|—è–∫—ñ|–∫–æ–≥–æ)\s+(–±—ñ–ª–¥|–ø—Ä–µ–¥–º–µ—Ç|–µ–º–±–ª–µ–º–∞|–∑–±—ñ—Ä–∫—É|–≥–µ—Ä–æ—è|–ø—ñ–∫–Ω—É—Ç–∏)',
        r'\b(—â–æ|—à–æ)\s+(–∑–±–∏—Ä–∞—Ç–∏|–∫–∞—á–∞—Ç–∏|–∫—É–ø–∏—Ç–∏)',
        # –ü—Ä—è–º–∏–π –∑–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è –≤ –∫—ñ–Ω—Ü—ñ
        r'\?$',
    ]
    if any(re.search(p, text_lower) for p in HELP_PATTERNS):
        return "technical_help"

    # --- 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∏–º—É—à–µ–Ω—É —Ä–æ–∑–º–æ–≤—É (–ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö) ---
    CASUAL_PATTERNS = [
        # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è / –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏
        r'\b(–ø—Ä–∏–≤—ñ—Ç|–π–æ—É|—Ö–∞–π|—Ä–æ—Ñ–ª|–ª–æ–ª|–∫–µ–∫|—á—ñ–ª|–±—Ä–∞—Ç–µ|–∑–¥–æ—Ä–æ–≤|–∫—É)\b',
        # –ö–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        r'^(–∞–≥–∞|–æ–∫|–Ω–æ—Ä–º|–¥–∞|–Ω—ñ|–Ω–µ–∞|–∑—Ä–æ–∑—É–º—ñ–≤|–¥—è–∫—É—é)',
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ/–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ–¥–∑—ñ
        r'\b(üòÖ|ü§°|üëç|‚úä|üòâ)\b'
    ]
    if any(re.search(p, text_lower) for p in CASUAL_PATTERNS):
        return "casual_chat"

    # --- 6. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞–º—ñ—Ä ---
    return "neutral"

def _get_time_of_day() -> TimeOfDay:
    """
    –í–∏–∑–Ω–∞—á–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–æ–±–∏ –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.
    """
    kyiv_tz = timezone(timedelta(hours=3))
    current_hour = datetime.now(kyiv_tz).hour

    if 5 <= current_hour < 12:
        return "morning"
    if 12 <= current_hour < 17:
        return "afternoon"
    if 17 <= current_hour < 22:
        return "evening"
    return "night"

async def gather_context(user_id: int, chat_history: List[Dict[str, str]]) -> ContextVector:
    """
    –ó–±–∏—Ä–∞—î –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è MVP.

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
        chat_history: –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.

    Returns:
        –ó–∞–ø–æ–≤–Ω–µ–Ω–∏–π –æ–±'—î–∫—Ç ContextVector.
    """
    logger.info(f"ContextEngine: –ó–±—ñ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")

    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_profile = await load_user_cache(user_id)
    if not user_profile:
        logger.debug(f"ContextEngine: –ü—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")

    # 2. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–º—ñ—Ä –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    last_message = ""
    if chat_history and chat_history[-1].get("role") == "user":
        last_message = str(chat_history[-1].get("content", ""))
    
    intent = _analyze_user_intent(last_message)
    logger.debug(f"ContextEngine: –í–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–º—ñ—Ä –¥–ª—è {user_id} - '{intent}'.")

    # 3. –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –¥–æ–±–∏
    time_of_day = _get_time_of_day()
    logger.debug(f"ContextEngine: –í–∏–∑–Ω–∞—á–µ–Ω–æ —á–∞—Å –¥–æ–±–∏ - '{time_of_day}'.")

    # 4. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    context_vector = ContextVector(
        user_id=user_id,
        user_profile=user_profile if user_profile else None,
        chat_history=chat_history,
        last_message_intent=intent,
        time_of_day=time_of_day
    )
    
    logger.info(f"ContextEngine: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {user_id} —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ.")
    return context_vector
