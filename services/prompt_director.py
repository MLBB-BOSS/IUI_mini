"""
–î–∏—Ä–µ–∫—Ç–æ—Ä –ü—Ä–æ–º–ø—Ç—ñ–≤: "–º–æ–∑–æ–∫" —Å–∏—Å—Ç–µ–º–∏, —â–æ –∫–æ–Ω—Å—Ç—Ä—É—é—î —Å–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
–Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
"""
from typing import Any, Dict, List

from config import logger
from prompts.loader import PROMPT_LIBRARY
from services.context_engine import ContextVector, Intent

class PromptDirector:
    """
    –ö–ª–∞—Å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–∏–Ω–∞–º—ñ—á–Ω—É –∑–±—ñ—Ä–∫—É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
    –∑ –º–æ–¥—É–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """
    def __init__(self, prompt_library: Dict[str, Any]):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç—ñ–≤.
        """
        if not prompt_library:
            logger.error("PromptDirector —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é –ø—Ä–æ–º–ø—Ç—ñ–≤!")
        self.library = prompt_library
        logger.info("‚úÖ PromptDirector —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é –ø—Ä–æ–º–ø—Ç—ñ–≤.")

    def _select_format_instruction(self, intent: Intent) -> str | None:
        """–û–±–∏—Ä–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–º—ñ—Ä—É."""
        if intent == "casual_chat":
            return self.library.get("formats", {}).get("brief")
        # –î–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if intent == "technical_help":
            return self.library.get("formats", {}).get("detailed")
        return None

    def build_prompt(self, context: ContextVector) -> str:
        """
        –ó–±–∏—Ä–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–µ–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

        Args:
            context: –û–±'—î–∫—Ç ContextVector –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–ø–∏—Ç.

        Returns:
            –ì–æ—Ç–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —É –≤–∏–≥–ª—è–¥—ñ –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.
        """
        logger.info(f"PromptDirector: –ü–æ—á–∞—Ç–æ–∫ –∑–±—ñ—Ä–∫–∏ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {context.user_id}...")
        prompt_parts: List[str] = []

        # 1. –í–∏–±—ñ—Ä –±–∞–∑–æ–≤–æ—ó –ø–µ—Ä—Å–æ–Ω–∏
        persona_key = "analyst" if context.last_message_intent == "technical_help" else "buddy"
        persona_prompt = self.library.get("personas", {}).get(persona_key)
        if persona_prompt:
            prompt_parts.append(persona_prompt)
            logger.debug(f"  [1] –û–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω—É: '{persona_key}'")

        # 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–º—ñ—Ä—É
        intent_prompt = self.library.get("intents", {}).get(context.last_message_intent)
        if intent_prompt:
            prompt_parts.append(intent_prompt)
            logger.debug(f"  [2] –î–æ–¥–∞–Ω–æ –Ω–∞–º—ñ—Ä: '{context.last_message_intent}'")

        # 3. üíé –ù–û–í–ï: –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ —Ñ–æ—Ä–º–∞—Ç—É/–¥–æ–≤–∂–∏–Ω—ñ
        format_instruction = self._select_format_instruction(context.last_message_intent)
        if format_instruction:
            prompt_parts.append(format_instruction)
            logger.debug(f"  [3] –î–æ–¥–∞–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–æ —Ñ–æ—Ä–º–∞—Ç—É.")

        # 4. –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if context.user_profile:
            profile_parts = []
            nickname = context.user_profile.get('nickname')
            rank = context.user_profile.get('current_rank')
            if nickname: profile_parts.append(f"–ô–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º: {nickname}.")
            if rank: profile_parts.append(f"–ô–æ–≥–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥: {rank}.")
            
            if profile_parts:
                prompt_parts.append("–¶–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + " ".join(profile_parts))
                logger.debug(f"  [4] –î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é.")
            
            status_modifier = self.library.get("modifiers", {}).get("user_status", {}).get("is_registered")
            if status_modifier: prompt_parts.append(status_modifier)
        else:
            status_modifier = self.library.get("modifiers", {}).get("user_status", {}).get("is_new")
            if status_modifier: prompt_parts.append(status_modifier)

        # 5. –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —á–∞—Å—É –¥–æ–±–∏
        time_modifier = self.library.get("modifiers", {}).get("time_of_day", {}).get(context.time_of_day)
        if time_modifier:
            prompt_parts.append(time_modifier)
            logger.debug(f"  [5] –î–æ–¥–∞–Ω–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Å—É –¥–æ–±–∏: '{context.time_of_day}'")
        
        final_prompt = "\n\n".join(prompt_parts)
        logger.info(f"PromptDirector: –ü—Ä–æ–º–ø—Ç –¥–ª—è {context.user_id} —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ. –î–æ–≤–∂–∏–Ω–∞: {len(final_prompt)} —Å–∏–º–≤–æ–ª—ñ–≤.")
        
        return final_prompt

prompt_director = PromptDirector(PROMPT_LIBRARY)
