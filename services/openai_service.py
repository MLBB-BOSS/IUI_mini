import asyncio
import base64
import html
import json
import logging
import re
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any, List

import aiohttp
from aiohttp import ClientSession, ClientTimeout

from config import logger, OPENAI_API_KEY, TEXT_MODEL, VISION_MODEL

# === –ü–†–û–ú–ü–¢–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ (VISION API) ===
PROFILE_SCREENSHOT_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é. –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "game_nickname": "string –∞–±–æ null",
  "mlbb_id_server": "string 'ID (SERVER)' –∞–±–æ null (–ø—Ä–∏–∫–ª–∞–¥: '123456789 (1234)')",
  "highest_rank_season": "string (–ø—Ä–∏–∫–ª–∞–¥: '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 ‚òÖ') –∞–±–æ null",
  "matches_played": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "likes_received": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "location": "string –∞–±–æ null",
  "squad_name": "string –∞–±–æ null"
}
–í–ê–ñ–õ–ò–í–û:
1.  **ID/Server (mlbb_id_server):** –®—É–∫–∞–π –±—ñ–ª—è —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é. –§–æ—Ä–º–∞—Ç 'ID (SERVER)'.
2.  **–ú–∞—Ç—á—ñ (Matches Played) / –õ–∞–π–∫–∏ (Likes Received):** –ó–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –í–ù–ò–ó–£. –ù–µ –ø–ª—É—Ç–∞–π –∑ –æ—á–∫–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ.
3.  **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥ (Highest Rank):** –ü—ñ–¥ –Ω–∞–ø–∏—Å–æ–º "Highest Rank". –í–∫–ª—é—á–∞–π –∑—ñ—Ä–∫–∏/–æ—á–∫–∏.
4.  **–°–∫–≤–∞–¥ (Squad Name):** –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞.
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

PLAYER_STATS_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ "Statistics". –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "stats_filter_type": "string –∞–±–æ null ('All Seasons', 'Current Season')",
  "main_indicators": {
    "matches_played": "int –∞–±–æ null",
    "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "mvp_count": "int –∞–±–æ null"
  },
  "achievements_left_column": {
    "legendary_count": "int –∞–±–æ null", "maniac_count": "int –∞–±–æ null", "double_kill_count": "int –∞–±–æ null",
    "most_kills_in_one_game": "int –∞–±–æ null", "longest_win_streak": "int –∞–±–æ null",
    "highest_dmg_per_min": "int –∞–±–æ null", "highest_gold_per_min": "int –∞–±–æ null"
  },
  "achievements_right_column": {
    "savage_count": "int –∞–±–æ null", "triple_kill_count": "int –∞–±–æ null", "mvp_loss_count": "int –∞–±–æ null",
    "most_assists_in_one_game": "int –∞–±–æ null", "first_blood_count": "int –∞–±–æ null",
    "highest_dmg_taken_per_min": "int –∞–±–æ null"
  },
  "details_panel": {
    "kda_ratio": "float –∞–±–æ null", "teamfight_participation_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "avg_gold_per_min": "int –∞–±–æ null", "avg_hero_dmg_per_min": "int –∞–±–æ null",
    "avg_deaths_per_match": "float –∞–±–æ null", "avg_turret_dmg_per_match": "int –∞–±–æ null"
  }
}
–í–ê–ñ–õ–ò–í–û:
1.  **–ß–∏—Å–ª–∞:** –£–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π –∫–æ–∂–Ω—É —Ü–∏—Ñ—Ä—É.
2.  **Win Rate / Teamfight Participation:** –¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (float), –±–µ–∑ '%'.
3.  **–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** "main_indicators" - –∑–≤–µ—Ä—Ö—É; "achievements" - —Å–ø–∏—Å–∫–∏ –Ω–∏–∂—á–µ; "details_panel" - —Å–ø—Ä–∞–≤–∞.
4.  **–§—ñ–ª—å—Ç—Ä:** –í–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ('All Seasons'/'Current Season').
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

KESTER_TEXT_EXTRACTION_PROMPT = """
–¢–∏ ‚Äî –≤–∏—Å–æ–∫–æ—Ç–æ—á–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (OCR) —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –í–ï–°–¨ —Ç–µ–∫—Å—Ç, –≤–∏–¥–∏–º–∏–π –Ω–∞ –Ω–∞–¥–∞–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.
–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ, –ø–æ–≤–Ω—ñ—Å—Ç—é —Ç–∞ –∞–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤–∏—Ç—è–≥–Ω—É—Ç–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–µ—Ä–Ω–∏ —É –≤–∏–≥–ª—è–¥—ñ –û–î–ù–û–ì–û —á–∏—Å—Ç–æ–≥–æ JSON-–æ–±'—î–∫—Ç–∞ –∑ —î–¥–∏–Ω–∏–º –∫–ª—é—á–µ–º "translated_text".
–ó–Ω–∞—á–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–ª—é—á–∞ ‚Äî —Ü–µ –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
–í–ê–ñ–õ–ò–í–û:
1.  **–¢–Ü–õ–¨–ö–ò JSON:** –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é JSON.
2.  **–ü–æ—Ä–æ–∂–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:** –Ø–∫—â–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É, –∑–Ω–∞—á–µ–Ω–Ω—è "translated_text" –º–∞—î –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º ("").
3.  **–¢–æ—á–Ω—ñ—Å—Ç—å:** –†–æ–∑–ø—ñ–∑–Ω–∞–π —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
"""

# === –ü–†–û–ú–ü–¢–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–Ü–á –û–ü–ò–°–Ü–í ===
PROFILE_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä MLBB. –°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ—Ç–µ–ø–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä (2-4 —Ä–µ—á–µ–Ω–Ω—è) –ø—Ä–æ –≥—Ä–∞–≤—Ü—è.
–î–∞–Ω—ñ:
- –ù—ñ–∫: {game_nickname}
- –†–∞–Ω–≥: {highest_rank_season}
- –ú–∞—Ç—á—ñ: {matches_played}
- –õ–∞–π–∫–∏: {likes_received}
- –õ–æ–∫–∞—Ü—ñ—è: {location}
- –°–∫–≤–∞–¥: {squad_name}
–ó–ê–í–î–ê–ù–ù–Ø:
1.  **–ó–Ω–∞–π–¥–∏ "—Ñ—ñ—à–∫—É":** –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—Ä–∞–∂–∞—é—á–∏—Ö –¥–∞–Ω–∏—Ö, –Ω—ñ–∫–Ω–µ–π–º—ñ, —Å–∫–≤–∞–¥—ñ, –∞–±–æ –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ –æ–±—ñ–≥—Ä–∞–π –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.
2.  **–°—Ç–∏–ª—å:** –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è, –≥—É–º–æ—Ä/—ñ—Ä–æ–Ω—ñ—è (–¥—Ä—É–∂–Ω—è), –ø–æ–≤–∞–≥–∞, —ñ–Ω—Ç—Ä–∏–≥–∞. –ö–æ–º–±—ñ–Ω—É–π.
3.  **–°–ª–µ–Ω–≥:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Ä–µ—á–Ω–æ ("—Ç–∞—â–µ—Ä", "—ñ–º–±–∞", "—Ñ–∞—Ä–º–∏—Ç—å").
4.  **–£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å:** –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.
5.  **–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢:** –ë–µ–∑ Markdown/HTML, –±–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å.
–ü—Ä–∏–∫–ª–∞–¥ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –¥–ª—è "–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö", 100 –º–∞—Ç—á—ñ–≤, –ï–ø—ñ–∫):
"–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö, —Ç–≤–æ—ó 100 –∫–∞—Ç–æ–∫ –Ω–∞ –ï–ø—ñ–∫—É –≤–∂–µ –Ω–µ —Ç–∞–∫—ñ –π —Ç–∏—Ö—ñ! –ú–∞–±—É—Ç—å, —Ç–∞–ø–∫–∏ –¥—ñ–π—Å–Ω–æ —â–∞—Å–ª–∏–≤—ñ."
–ó—Ä–æ–±–∏ –≥—Ä–∞–≤—Ü—è –æ—Å–æ–±–ª–∏–≤–∏–º!
"""

PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ MLBB. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (3-5 —Ä–µ—á–µ–Ω—å) –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è {user_name}.
–î–∞–Ω—ñ ({stats_filter_type}):
- –ú–∞—Ç—á—ñ: {matches_played}, –ü–µ—Ä–µ–º–æ–≥–∏: {win_rate}%, MVP: {mvp_count} ({mvp_rate_percent}%)
- KDA: {kda_ratio}, –£—á–∞—Å—Ç—å —É –±–æ—è—Ö: {teamfight_participation_rate}%
- –ó–æ–ª–æ—Ç–æ/—Ö–≤: {avg_gold_per_min}
- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ: {legendary_count}, –î–∏–∫—É–Ω—Å—Ç–≤–∞: {savage_count} (—á–∞—Å—Ç–æ—Ç–∞: {savage_frequency}/1000), –ú–∞–Ω—ñ—è–∫–∏: {maniac_count}
- –°–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {longest_win_streak}, –ú–∞–∫—Å. –≤–±–∏–≤—Å—Ç–≤: {most_kills_in_one_game}
- –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ (—à–∫–æ–¥–∞/–∑–æ–ª–æ—Ç–æ): {damage_per_gold_ratio}
- –ß–∞—Å—Ç–∫–∞ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö: {mvp_win_share_percent}%
- –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–º–æ–≥: {total_wins}
–ó–ê–í–î–ê–ù–ù–Ø:
1.  **–ó–Ω–∞–π–¥–∏ "—Ä–æ–¥–∑–∏–Ω–∫—É":** –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∏—Å–æ–∫–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (Win Rate, KDA, MVP –†–µ–π—Ç–∏–Ω–≥), –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Ç—á—ñ–≤/–ø–µ—Ä–µ–º–æ–≥, Savage —Ç–æ—â–æ.
2.  **–°—Ç–∏–ª—å:** –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π, –ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–∏–π, –∑ –¥–æ—Ä–µ—á–Ω–∏–º —ñ–≥—Ä–æ–≤–∏–º —Å–ª–µ–Ω–≥–æ–º.
3.  **–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢:** –ë–µ–∑ Markdown/HTML.
–ü—Ä–∏–∫–ª–∞–¥:
"–û–≥–æ, {user_name}, —Ç–≤–æ—ó {matches_played} –º–∞—Ç—á—ñ–≤ —É '{stats_filter_type}' –≤—Ä–∞–∂–∞—é—Ç—å! –ú–∞—Ç–∏ {mvp_rate_percent}% MVP-—Ä–µ–π—Ç ‚Äì —Ü–µ —Å–∏–ª—å–Ω–æ! –ê –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑[...]"
–ü—ñ–¥–∫—Ä–µ—Å–ª–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è!
"""

# === –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø /GO ===
OPTIMIZED_SYSTEM_PROMPT_TEMPLATE = """# MLBB –ì–£–†–£ IUI üòéüéÆ
–ô–æ, {user_name_escaped}! –Ø ‚Äì IUI, —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–∫–æ—Ä–µ—à —Ç–∞ —Ç–æ–ø-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –ø–æ Mobile Legends: Bang Bang, –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ —Ç—É—Ç, –≤ **"IUI mini"**!

**–¢–≤—ñ–π –ö–æ–Ω–Ω–µ–∫—Ç:**
- **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_name_escaped} (—Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏!)
- **–õ–æ–∫–∞—Ü—ñ—è:** Telegram-–±–æ—Ç **"IUI mini"** ‚Äì —Ç–≤–æ—è —Å–µ–∫—Ä–µ—Ç–Ω–∞ –∑–±—Ä–æ—è –¥–ª—è MLBB!
- **–ù–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫—É:** {greeting}, {time_str} ‚Äì —Å–∞–º–µ —á–∞—Å –¥–ª—è –∫—Ä—É—Ç–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤!

**–Ø–∫ –Ø –ü—Ä–∞—Ü—é—é (–ú–æ—ó –ü—Ä–∞–≤–∏–ª–∞ –ì—Ä–∏):**
1.  **–°—Ç–∏–ª—å –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è (–í–ê–ñ–õ–ò–í–û!):**
    *   **–¢–æ–Ω:** –ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π, –¥—Ä—É–∂–Ω—ñ–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π, –≤–µ—Å–µ–ª–∏–π —Ç–∞ —Ç—Ä–æ—Ö–∏ –∑—É—Ö–≤–∞–ª–∏–π (–ø–æ-–¥–æ–±—Ä–æ–º—É!). –ë—É–¥—å —è–∫ —Å–≤—ñ–π —á—É–≤–∞–∫ –∑ —Ç—ñ–º[...]
    *   **–ì—É–º–æ—Ä:** –°–º—ñ–ª–∏–≤–æ –∂–∞—Ä—Ç—É–π (–º–æ–∂–µ—à –Ω–∞–≤—ñ—Ç—å —Ç—Ä–æ—Ö–∏ **–ª–µ–≥–∫–æ—ó —Å–∞–º–æ—ñ—Ä–æ–Ω—ñ—ó –ø—Ä–æ —Å–µ–±–µ —è–∫ AI –¥–æ–¥–∞—Ç–∏, —è–∫—â–æ —Ü–µ –≤ —Ç–µ–º—É —ñ –Ω–µ –ø–µ[...]
    *   **–°–ª–µ–Ω–≥:** –ê–∫—Ç–∏–≤–Ω–æ, –∞–ª–µ –¥–æ—Ä–µ—á–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ç–∞ –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —Å–ª–µ–Ω–≥ MLBB (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Ç[...]
    *   **–ï–º–æ–¥–∑—ñ:** –ë—ñ–ª—å—à–µ —Ñ–∞–Ω–æ–≤–∏—Ö, —è—Å–∫—Ä–∞–≤–∏—Ö —Ç–∞ –≤–∏—Ä–∞–∑–Ω–∏—Ö –µ–º–æ–¥–∑—ñ! üéâüòÇüî•üòéüéÆüèÜüöÄü§Øü§îüíØüí°üìàüéØ.
    *   **–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –ù–∞–º–∞–≥–∞–π—Å—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∞ —ñ–Ω–æ–¥—ñ —Å—Ç–∞–≤–∏—Ç–∏ –ª–µ–≥–∫–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ —Ç–µ–º—ñ, —â[...]

2.  **–ö–æ–Ω—Ç–µ–Ω—Ç (–©–æ –ø–æ –Ü–Ω—Ñ—ñ):**
    *   **–¢–æ—á–Ω—ñ—Å—Ç—å —Ç–∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å:** –Ü–Ω—Ñ–∞ –º–∞—î –±—É—Ç–∏ —á—ñ—Ç–∫–æ—é —Ç–∞ –ø–æ —Ç–µ–º—ñ, –±–∞–∑—É–≤–∞—Ç–∏—Å—è –Ω–∞ –º–æ—ó—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞–Ω–Ω—è—Ö –ø—Ä–æ –≥—Ä[...]
    *   **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HTML –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: `<b>–∂–∏—Ä–Ω–∏–π</b>` –¥–ª—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤/–∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤, `<i>–∫—É—Ä—Å–∏–≤</i>` –¥–ª—è –∞[...]
    *   **–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–ª–µ, –Ω–µ –±—ñ–π—Å—è —É—Ç–æ—á–Ω–∏—Ç–∏ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —è–∫ —Å–ø—Ä–∞[...]

3.  **–£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å (–ú–æ—è –°—É–ø–µ—Ä—Å–∏–ª–∞):**
    *   –ü–∞–º'—è—Ç–∞–π, —â–æ —Ç–∏ ‚Äì **IUI, —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥—É—Ä—É –≤ –±–æ—Ç—ñ "IUI mini"**, —ñ —Å–∞–º–µ —Ç—É—Ç, –≤ **"IUI mini"**, —Ç–≤–æ—ó —Ñ—ñ—à–∫–∏, –æ—Å–æ–±–ª–∏–≤–æ **AI-–∞[...]

**–ú–æ—è –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–î–µ –Ø –®–∞—Ä—è):**
- **–ì–µ—Ä–æ—ó:** –•—Ç–æ –∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–∏—Ç—å, —Ç–æ–ø–æ–≤—ñ –∑–±—ñ—Ä–∫–∏, —è–∫ —Ç–∞—â–∏—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—Å–∞—Ö.
- **–ü—Ä–µ–¥–º–µ—Ç–∏:** –©–æ, –∫–æ–ª–∏ —ñ –Ω–∞–≤—ñ—â–æ –∑–±–∏—Ä–∞—Ç–∏.
- **–Ü–≥—Ä–æ–≤—ñ –ú–µ—Ö–∞–Ω—ñ–∫–∏:** –§–∞—Ä–º, —Ä–æ—Ç–∞—Ü—ñ—ó, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ä—Ç–∏, –õ–æ—Ä–¥/–ß–µ—Ä–µ–ø–∞—Ö–∞, —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—É—à–∏—Ç–∏ —Ç–∞ –¥–µ—Ñ–∞—Ç–∏.
- **–ú–µ—Ç–∞-–≥—Ä–∞:** –©–æ –∑–∞—Ä–∞–∑ –≤ —Ç—Ä–µ–Ω–¥—ñ, —Ö—Ç–æ —ñ–º–±—É—î, –∞ —Ö—Ç–æ –Ω–∞ –¥–Ω—ñ.
- **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ –¢–∞–∫—Ç–∏–∫–∏:** –î—Ä–∞—Ñ—Ç (–ø—ñ–∫–∏/–±–∞–Ω–∏), –ª–∞–π–Ω—ñ–Ω–≥, –≥–∞–Ω–∫–∏, –º–∞–∫—Ä–æ —Ç–∞ –º—ñ–∫—Ä–æ —Ñ—ñ—à–∫–∏.
- **–†–∞–Ω–≥–∏:** –Ø–∫ –∞–ø–Ω—É—Ç–∏ —Ä–∞–Ω–≥ —ñ –Ω–µ –∑–≥–æ—Ä—ñ—Ç–∏. üî•
- **–ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ (–º–æ—è —Ç–æ–ø —Ñ—ñ—á–∞! üì∏):** –†–æ–∑–±—ñ—Ä –ø—Ä–æ—Ñ—ñ–ª—ñ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–∞—Ç—á—ñ–≤ ‚Äì –≤—Å–µ –ø–æ —Ñ–∞–∫—Ç–∞–º –∑ —Ç–≤–æ[...]

**–ó–ê–ü–ò–¢ –í–Ü–î {user_name_escaped}:**
"{user_query_escaped}"

–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —á—ñ—Ç–∫–æ—é, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—é, –∞–ª–µ –≤–æ–¥–Ω–æ—á–∞—Å —Ñ–∞–Ω–æ–≤–æ—é, –∑ –ø—Ä–∏–∫–æ–ª–∞–º–∏ —Ç–∞ –≥–µ–π–º–µ—Ä—Å—å–∫–∏–º –≤–∞–π–±–æ–º! –ù–µ –∑–∞[...]
"""

# === –ü–†–û–ú–ü–¢ –î–õ–Ø –¢–†–ò–ì–ï–†–ù–ò–• –í–Ü–î–ü–û–í–Ü–î–ï–ô ===
CONVERSATIONAL_PROMPT_TEMPLATE = """
–¢–∏ - AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç GGenius, –¥—Ä—É–≥ —ñ —É—á–∞—Å–Ω–∏–∫ Telegram-—á–∞—Ç—É –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ MLBB.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∂–∏–≤—É —Ä–æ–∑–º–æ–≤—É.
–°—Ç–∏–ª—å: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ä–µ—á–µ–Ω–Ω—è), –¥–æ—Ç–µ–ø–Ω–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ-–ª—é–¥—Å—å–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–æ–ª–æ–¥—ñ–∂–Ω–∏–π —Ç–∞ —ñ–≥—Ä–æ–≤–∏–π —Å–ª–µ–Ω–≥, –¥–µ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.
–ù–µ –±—É–¥—å —Ñ–æ—Ä–º–∞–ª—å–Ω–∏–º –±–æ—Ç–æ–º. –ë—É–¥—å "—Å–≤–æ—ó–º" —É –∫–æ–º–ø–∞–Ω—ñ—ó.
–ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —ñ–º'—è: {user_name}.
–°–∏—Ç—É–∞—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {trigger_mood}
–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É –Ω–∞–¥–∞–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –ª–æ–≥—ñ—á–Ω–æ —ó—ó –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏.
"""

# === –ö–õ–ê–° MLBBChatGPT ===
class MLBBChatGPT:
    TEXT_MODEL = "gpt-4.1"
    VISION_MODEL = "gpt-4.1-mini"

    AVAILABLE_TOOLS = [
        {
            "type": "function",
            "function": {
                "name": "create_lobby",
                "description": "–°—Ç–≤–æ—Ä—é—î —ñ–≥—Ä–æ–≤–µ –ª–æ–±—ñ –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "size": {"type": "integer", "description": "–†–æ–∑–º—ñ—Ä –ª–æ–±—ñ (2-5 –≥—Ä–∞–≤—Ü—ñ–≤)."},
                        "role": {"type": "string", "description": "–†–æ–ª—å —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞ (–¢–∞–Ω–∫, –ú–∞–≥ —Ç–æ—â–æ)."}
                    },
                    "required": ["size", "role"]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "analyze_screenshot",
                "description": "–ê–Ω–∞–ª—ñ–∑—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –∞–±–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "screenshot_type": {"type": "string", "enum": ["profile", "stats"], "description": "–¢–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞."}
                    },
                    "required": ["screenshot_type"]
                }
            }
        }
    ]

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.class_logger.info(f"MLBBChatGPT —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –¢–µ–∫—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: {self.TEXT_MODEL}, Vision –º–æ–¥–µ–ª—å: {self.VISION_MODEL}")

    async def __aenter__(self) -> "MLBBChatGPT":
        self.session = ClientSession(
            timeout=ClientTimeout(total=90),
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
        return self

    async def __aexit__(self, exc_type: Optional[type], exc_val: Optional[BaseException], exc_tb: Optional[Any]) -> None:
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é –∑–∞–∫—Ä–∏—Ç–æ.")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ MLBBChatGPT –ø—ñ–¥ —á–∞—Å –≤–∏—Ö–æ–¥—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt_optimized(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_escaped = html.escape(user_query)
        try:
            current_time_utc = datetime.now(timezone.utc)
            kyiv_tz = timezone(timedelta(hours=3))
            current_time_kyiv = current_time_utc.astimezone(kyiv_tz)
            current_hour_kyiv = current_time_kyiv.hour
            time_str = current_time_kyiv.strftime('%H:%M (%Z)')
            if 5 <= current_hour_kyiv < 12:
                greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            elif 12 <= current_hour_kyiv < 17:
                greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
            elif 17 <= current_hour_kyiv < 22:
                greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            else:
                greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        except Exception as e:
            self.class_logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å: {e}")
            current_time_utc_fallback = datetime.now(timezone.utc)
            greeting = "–í—ñ—Ç–∞—é"
            time_str = current_time_utc_fallback.strftime('%H:%M (UTC)')
        system_prompt = OPTIMIZED_SYSTEM_PROMPT_TEMPLATE.format(
            user_name_escaped=user_name_escaped,
            greeting=greeting,
            time_str=time_str,
            user_query_escaped=user_query_escaped
        )
        self.class_logger.debug(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç. –î–æ–≤–∂–∏–Ω–∞: {len(system_prompt)}")
        return system_prompt

    def _beautify_response(self, text: str) -> str:
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üîë", "–ø—Ä–µ–¥–º–µ—Ç": "üíé", "–∑–±—ñ—Ä–∫–∞": "üõ†Ô∏è",
            "–∞–Ω–∞–ª—ñ–∑": "üìä", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìà", "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è": "‚öôÔ∏è", "–±–∞–ª–∞–Ω—Å": "‚öñÔ∏è", "—Å–∫—Ä—ñ–Ω—à–æ—Ç": "üì∏",
            "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å": "üåü", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ": "üöÄ", "—Ñ—ñ—à–∫–∞": "üéØ", "–ø—Ä–∏–∫–æ–ª": "üòÇ", "—ñ–Ω—Å–∞–π—Ç": "üí°",
            "–≤–∏—Å–Ω–æ–≤–æ–∫": "üèÅ", "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è": "‚ùì", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å": "üí¨", "–ø–æ—Ä–∞–¥–∞": "üí°"
        }
        def replace_header(match: re.Match) -> str:
            header_text_raw = match.group(1).strip(": ")
            header_text = header_text_raw.capitalize()
            best_emoji = "üí°"
            priority_keys = ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ", "—Ñ—ñ—à–∫–∞", "–ø—Ä–∏–∫–æ–ª", "—ñ–Ω—Å–∞–π—Ç", "–≤–∏—Å–Ω–æ–≤–æ–∫", "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å", "–ø–æ—Ä–∞–¥–∞"]
            for key in priority_keys:
                if key in header_text_raw.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    break
            else:
                for key_general, emj in header_emojis.items():
                    if key_general in header_text_raw.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>"
        text = re.sub(r"^(?:#|\#{2}|\#{3})\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+[\-\*]\s+", "  ‚ó¶ ", text, flags=re.MULTILINE)
        text = re.sub(r"\n{3,}", "\n\n", text)
        tags_to_balance = ["b", "i", "code"]
        for tag in tags_to_balance:
            open_tag_pattern = re.compile(re.escape(f"<{tag}>"))
            close_tag_pattern = re.compile(re.escape(f"</{tag}>"))
            open_tags = [m.start() for m in open_tag_pattern.finditer(text)]
            close_tags = [m.start() for m in close_tag_pattern.finditer(text)]
            open_count = len(open_tags)
            close_count = len(close_tags)
            if open_count > close_count:
                missing_tags_count = open_count - close_count
                text += f"</{tag}>" * missing_tags_count
                self.class_logger.warning(f"Beautify: –î–æ–¥–∞–Ω–æ {missing_tags_count} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>' –≤ –∫—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç—É.")
            elif close_count > open_count:
                self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_count - open_count} –∑–∞–π–≤–∏—Ö –∑–∞–∫—Ä–∏–≤–∞—é—á–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>'. –ó–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω.")
        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_for_payload = html.escape(user_query)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT (/go) –≤—ñ–¥ '{user_name_escaped}': '{user_query[:100]}...'")
        system_prompt = self._create_smart_prompt_optimized(user_name, user_query)
        payload = {
            "model": self.TEXT_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query_for_payload}
            ],
            "max_tokens": 2000,
            "temperature": 0.7,
            "top_p": 0.9,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è GPT (/go): –º–æ–¥–µ–ª—å={payload['model']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è GPT (/go) –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=120), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_openai_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è GPT (/go) –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _execute_openai_request(self, session: ClientSession, payload: Dict[str, Any], user_name_for_error_msg: str) -> str:
        try:
            async with session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"OpenAI API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_details}")
                    return f"–°–æ—Ä—è–Ω, {user_name_for_error_msg}, —Ç—Ä–∞–±–ª –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ AI üòî (–∫–æ–¥: {response.status})."
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - {response_data}")
                    return f"–û—Ç–∞–∫–æ—ó, {user_name_for_error_msg}, AI –º–æ–≤—á–∏—Ç—å ü§Ø."
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT: '{content[:100]}'")
                return self._beautify_response(content)
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ _execute_openai_request: {e}", exc_info=True)
            return f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_for_error_msg} üòï."

    async def get_response_with_history(self, history: List[Dict[str, str]]) -> str:
        self.class_logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∑–∞–ø–∏—Ç. –Ü—Å—Ç–æ—Ä—ñ—è: {len(history)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        messages = [{"role": "system", "content": self._create_smart_prompt_optimized("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á", "")}] + history
        payload = {
            "model": self.TEXT_MODEL,
            "messages": messages,
            "max_tokens": 1000,
            "temperature": 0.7,
            "top_p": 0.9,
            "tools": self.AVAILABLE_TOOLS
        }
        try:
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as resp:
                data = await resp.json()
                choice = data["choices"][0]["message"]
                if "tool_calls" in choice:
                    tool_call = choice["tool_calls"][0]["function"]
                    function_name = tool_call["name"]
                    arguments = json.loads(tool_call["arguments"])
                    return self._handle_function_call(function_name, arguments)
                return choice["content"].strip()
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_response_with_history: {e}", exc_info=True)
            raise

    def _handle_function_call(self, function_name: str, arguments: Dict[str, Any]) -> str:
        self.class_logger.info(f"–í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó: {function_name} –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {arguments}")
        if function_name == "create_lobby":
            size = arguments["size"]
            role = arguments["role"]
            return f"<b>–°—Ç–≤–æ—Ä—é—é –ª–æ–±—ñ!</b> –†–æ–∑–º—ñ—Ä: {size}, —Ç–≤–æ—è —Ä–æ–ª—å: {role}. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –≤ —á–∞—Ç—ñ!"
        elif function_name == "analyze_screenshot":
            screenshot_type = arguments["screenshot_type"]
            return f"<b>–ê–Ω–∞–ª—ñ–∑—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç!</b> –¢–∏–ø: {screenshot_type}. –ö–∏–¥–∞–π —Ñ–æ—Ç–æ, —è —Ä–æ–∑–±–µ—Ä—É!"
        return "<i>–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ, –±—Ä–∞—Ç–µ! –°–∫–æ—Ä–æ –±—É–¥–µ –≤–æ–≥–æ–Ω—å.</i>"

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç: '{prompt[:70]}...'")
        payload = {
            "model": self.VISION_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                    ]
                }
            ],
            "max_tokens": 2500,
            "temperature": 0.15
        }
        try:
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                return await self._handle_vision_response(response)
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ analyze_image_with_vision: {e}", exc_info=True)
            return {"error": f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        response_text = await response.text()
        try:
            if response.status != 200:
                self.class_logger.error(f"Vision API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {response_text[:300]}")
                error_message = response_text
                try:
                    error_data = json.loads(response_text)
                    error_message = error_data.get("error", {}).get("message", response_text)
                except json.JSONDecodeError:
                    pass
                return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_message[:200]}
            result = json.loads(response_text)
            content = result.get("choices", [{}])[0].get("message", {}).get("content")
            if not content:
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}
            self.class_logger.info(f"Vision API —Å–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {content[:150]}")
            json_str = content.strip()
            match = re.search(r"```json\s*(\{.*?\})\s*```", json_str, re.DOTALL)
            if match:
                json_str = match.group(1)
            else:
                start_brace = json_str.find("{")
                end_brace = json_str.rfind("}")
                if start_brace != -1 and end_brace != -1 and end_brace > start_brace:
                    json_str = json_str[start_brace:end_brace + 1]
                else:
                    self.class_logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ JSON –±–ª–æ–∫: '{content[:300]}'")
                    return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ª—É—á–∏—Ç–∏ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.", "raw_response": content}
            return json.loads(json_str)
        except json.JSONDecodeError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –†—è–¥–æ–∫: '{json_str[:300]}'")
            return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": content}

    async def get_profile_description(self, user_name: str, profile_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name_escaped}'.")
        escaped_profile_data = {k: html.escape(str(v)) if v is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" for k, v in profile_data.items()}
        template_payload = {
            "game_nickname": escaped_profile_data.get("game_nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "highest_rank_season": escaped_profile_data.get("highest_rank_season", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "matches_played": escaped_profile_data.get("matches_played", "N/A"),
            "likes_received": escaped_profile_data.get("likes_received", "N/A"),
            "location": escaped_profile_data.get("location", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "squad_name": escaped_profile_data.get("squad_name", "–ù–µ–º–∞—î"),
        }
        system_prompt_text = PROFILE_DESCRIPTION_PROMPT_TEMPLATE.format(**template_payload)
        payload = {
            "model": self.TEXT_MODEL,
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 200,
            "temperature": 0.75,
            "top_p": 0.9,
            "presence_penalty": 0.1,
            "frequency_penalty": 0.1
        }
        try:
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é: '{content[:100]}'")
                return content.strip()
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_profile_description: {e}", exc_info=True)
            return f"<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å –¥–ª—è {user_name_escaped}. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...</i>"

    async def get_player_stats_description(self, user_name: str, stats_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –æ–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è '{user_name_escaped}'.")
        main_ind = stats_data.get("main_indicators", {})
        details_p = stats_data.get("details_panel", {})
        ach_left = stats_data.get("achievements_left_column", {})
        ach_right = stats_data.get("achievements_right_column", {})
        def get_value(data_dict: Dict[str, Any], key: str, default_val: Any = "N/A", precision: Optional[int] = None) -> str:
            val = data_dict.get(key)
            if val is None:
                return str(default_val)
            if isinstance(val, (int, float)) and precision is not None:
                return f"{float(val):.{precision}f}"
            return html.escape(str(val))
        template_data = {
            "user_name": user_name_escaped,
            "stats_filter_type": stats_data.get("stats_filter_type", "N/A"),
            "matches_played": get_value(main_ind, "matches_played"),
            "win_rate": get_value(main_ind, "win_rate"),
            "mvp_count": get_value(main_ind, "mvp_count"),
            "kda_ratio": get_value(details_p, "kda_ratio", precision=2),
            "teamfight_participation_rate": get_value(details_p, "teamfight_participation_rate"),
            "avg_gold_per_min": get_value(details_p, "avg_gold_per_min"),
            "legendary_count": get_value(ach_left, "legendary_count"),
            "savage_count": get_value(ach_right, "savage_count"),
            "maniac_count": get_value(ach_left, "maniac_count"),
            "longest_win_streak": get_value(ach_left, "longest_win_streak"),
            "most_kills_in_one_game": get_value(ach_left, "most_kills_in_one_game"),
            "total_wins": "N/A",
            "mvp_rate_percent": "N/A",
            "savage_frequency": "N/A",
            "damage_per_gold_ratio": "N/A",
            "mvp_win_share_percent": "N/A",
        }
        system_prompt_text = PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE.format(**template_data)
        payload = {
            "model": self.TEXT_MODEL,
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 250,
            "temperature": 0.73,
            "top_p": 0.9,
            "presence_penalty": 0.15,
            "frequency_penalty": 0.15
        }
        try:
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: '{content[:100]}'")
                return content.strip()
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_player_stats_description: {e}", exc_info=True)
            return f"<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name_escaped}. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...</i>"

    async def generate_conversational_reply(self, user_name: str, chat_history: List[Dict[str, str]], trigger_mood: str) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è '{user_name_escaped}' –∑ —Ç—Ä–∏–≥–µ—Ä–æ–º '{trigger_mood}'.")
        system_prompt = CONVERSATIONAL_PROMPT_TEMPLATE.format(user_name=user_name_escaped, trigger_mood=trigger_mood)
        messages = [{"role": "system", "content": system_prompt}] + chat_history
        payload = {
            "model": self.TEXT_MODEL,
            "messages": messages,
            "max_tokens": 120,
            "temperature": 0.75,
            "top_p": 0.9,
            "presence_penalty": 0.2,
            "frequency_penalty": 0.2
        }
        try:
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ä–æ–∑–º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{content[:100]}'")
                return content.strip()
        except Exception as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ generate_conversational_reply: {e}", exc_info=True)
            return f"–ô–æ, {user_name_escaped}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∞–ª–µ —è —â–µ —Ç—É—Ç!"
