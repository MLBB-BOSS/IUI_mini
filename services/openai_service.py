#services/openai_service.py
import asyncio
import base64
import html
import json
import logging
import re
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any, List

import aiohttp
from aiohttp import ClientSession, ClientTimeout

# === –§–Ü–õ–¨–¢–† –ù–ï–ë–ê–ñ–ê–ù–ò–• –§–†–ê–ó ===
BANNED_PHRASES = [
    "—É–ª—å—Ç–∞ —Ñ–∞–Ω—ñ –≤ –∫—É—â—ñ",
    "—Ü–µ —Ç–æ–±—ñ –Ω–µ –ª–∞–π–Ω —Ñ–∞—Ä–º–∏—Ç—å",
    "—è–∫ —Ñ—Ä–∞–Ω–∫–æ —Ö—É–∫ –∫–∏–¥–∞—Ç–∏",
    "–º–æ–≤ –∞–ª–¥–æ—Å —É–ª—å—Ç–æ—é",
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Ñ—Ä–∞–∑–∏, —è–∫—ñ —Å—Ç–∞–ª–∏ –∑–∞—ó–∂–¥–∂–µ–Ω–∏–º–∏
]

def _filter_cringy_phrases(response: str) -> str:
    """–í–∏–¥–∞–ª—è—î –∞–±–æ –∑–∞–º—ñ–Ω—é—î –∑–∞—ó–∂–¥–∂–µ–Ω—ñ —Ñ—Ä–∞–∑–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
    original_response = response
    for phrase in BANNED_PHRASES:
        if phrase in response.lower():
            # –ü—Ä–æ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ—á–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ñ—Ä–∞–∑—É
            sentences = re.split(r'(?<=[.!?])\s+', response)
            filtered_sentences = [s for s in sentences if phrase not in s.lower()]
            response = ' '.join(filtered_sentences)
            logging.info(f"–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ñ—Ä–∞–∑—É '{phrase}' –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    # –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    return response if response.strip() else original_response

# === –ü–†–û–ú–ü–¢–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ (VISION API) ===
PROFILE_SCREENSHOT_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é. –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "game_nickname": "string –∞–±–æ null",
  "mlbb_id_server": "string 'ID (SERVER)' –∞–±–æ null (–ø—Ä–∏–∫–ª–∞–¥: '123456789 (1234)')",
  "highest_rank_season": "string (–ø—Ä–∏–∫–ª–∞–¥: '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 ‚òÖ') –∞–±–æ null",
  "matches_played": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "likes_received": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "location": "string –∞–±–æ null",
  "squad_name": "string –∞–±–æ null"
}
–í–ê–ñ–õ–ò–í–û:
1.  **ID/Server (mlbb_id_server):** –®—É–∫–∞–π –±—ñ–ª—è —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é. –§–æ—Ä–º–∞—Ç 'ID (SERVER)'.
2.  **–ú–∞—Ç—á—ñ (Matches Played) / –õ–∞–π–∫–∏ (Likes Received):** –ó–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –í–ù–ò–ó–£. –ù–µ –ø–ª—É—Ç–∞–π –∑ –æ—á–∫–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ.
3.  **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥ (Highest Rank):** –ü—ñ–¥ –Ω–∞–ø–∏—Å–æ–º "Highest Rank". –í–∫–ª—é—á–∞–π –∑—ñ—Ä–∫–∏/–æ—á–∫–∏.
4.  **–°–∫–≤–∞–¥ (Squad Name):** –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞.
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

PLAYER_STATS_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ "Statistics". –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "stats_filter_type": "string –∞–±–æ null ('All Seasons', 'Current Season')",
  "main_indicators": {
    "matches_played": "int –∞–±–æ null",
    "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "mvp_count": "int –∞–±–æ null"
  },
  "achievements_left_column": {
    "legendary_count": "int –∞–±–æ null", "maniac_count": "int –∞–±–æ null", "double_kill_count": "int –∞–±–æ null",
    "most_kills_in_one_game": "int –∞–±–æ null", "longest_win_streak": "int –∞–±–æ null",
    "highest_dmg_per_min": "int –∞–±–æ null", "highest_gold_per_min": "int –∞–±–æ null"
  },
  "achievements_right_column": {
    "savage_count": "int –∞–±–æ null", "triple_kill_count": "int –∞–±–æ null", "mvp_loss_count": "int –∞–±–æ null",
    "most_assists_in_one_game": "int –∞–±–æ null", "first_blood_count": "int –∞–±–æ null",
    "highest_dmg_taken_per_min": "int –∞–±–æ null"
  },
  "details_panel": {
    "kda_ratio": "float –∞–±–æ null", "teamfight_participation_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "avg_gold_per_min": "int –∞–±–æ null", "avg_hero_dmg_per_min": "int –∞–±–æ null",
    "avg_deaths_per_match": "float –∞–±–æ null", "avg_turret_dmg_per_match": "int –∞–±–æ null"
  }
}
–í–ê–ñ–õ–ò–í–û:
1.  **–ß–∏—Å–ª–∞:** –£–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π –∫–æ–∂–Ω—É —Ü–∏—Ñ—Ä—É.
2.  **Win Rate / Teamfight Participation:** –¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (float), –±–µ–∑ '%'.
3.  **–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** "main_indicators" - –∑–≤–µ—Ä—Ö—É; "achievements" - —Å–ø–∏—Å–∫–∏ –Ω–∏–∂—á–µ; "details_panel" - —Å–ø—Ä–∞–≤–∞.
4.  **–§—ñ–ª—å—Ç—Ä:** –í–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ('All Seasons'/'Current Season').
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

KESTER_TEXT_EXTRACTION_PROMPT = """
–¢–∏ ‚Äî –≤–∏—Å–æ–∫–æ—Ç–æ—á–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (OCR) —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –í–ï–°–¨ —Ç–µ–∫—Å—Ç, –≤–∏–¥–∏–º–∏–π –Ω–∞ –Ω–∞–¥–∞–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.
–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ, –ø–æ–≤–Ω—ñ—Å—Ç—é —Ç–∞ –∞–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤–∏—Ç—è–≥–Ω—É—Ç–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–µ—Ä–Ω–∏ —É –≤–∏–≥–ª—è–¥—ñ –û–î–ù–û–ì–û —á–∏—Å—Ç–æ–≥–æ JSON-–æ–±'—î–∫—Ç–∞ –∑ —î–¥–∏–Ω–∏–º –∫–ª—é—á–µ–º "translated_text".
–ó–Ω–∞—á–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–ª—é—á–∞ ‚Äî —Ü–µ –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.

–í–ê–ñ–õ–ò–í–û:
1.  **–¢–Ü–õ–¨–ö–ò JSON:** –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é JSON.
2.  **–ü–æ—Ä–æ–∂–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:** –Ø–∫—â–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É, –∑–Ω–∞—á–µ–Ω–Ω—è "translated_text" –º–∞—î –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º ("").
3.  **–¢–æ—á–Ω—ñ—Å—Ç—å:** –†–æ–∑–ø—ñ–∑–Ω–∞–π —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
"""

HERO_STATS_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¢–û–ü-3 –≥–µ—Ä–æ—è—Ö –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ "Favorite Heroes". –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "favorite_heroes": [
    {
      "hero_name": "string –∞–±–æ null",
      "matches": "int –∞–±–æ null",
      "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')"
    },
    {
      "hero_name": "string –∞–±–æ null",
      "matches": "int –∞–±–æ null",
      "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')"
    },
    {
      "hero_name": "string –∞–±–æ null",
      "matches": "int –∞–±–æ null",
      "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')"
    }
  ]
}
–í–ê–ñ–õ–ò–í–û:
1.  **–¢–Ü–õ–¨–ö–ò –¢–û–ü-3:** –í–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –ª–∏—à–µ –¥–ª—è –ø–µ—Ä—à–∏—Ö —Ç—Ä—å–æ—Ö –≥–µ—Ä–æ—ó–≤ —É —Å–ø–∏—Å–∫—É.
2.  **Win Rate:** –¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (float), –±–µ–∑ —Å–∏–º–≤–æ–ª—É '%'.
3.  **–ü–æ—Ä—è–¥–æ–∫:** –ó–±–µ—Ä—ñ–≥–∞–π –ø–æ—Ä—è–¥–æ–∫ –≥–µ—Ä–æ—ó–≤, —è–∫ –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ.
4.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

LEGEND_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –æ–ø–æ–≤—ñ–¥–∞—á —Ç–∞ AI-–¥–∏–∑–∞–π–Ω–µ—Ä. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ø—ñ—á–Ω—É, –∞–ª–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–∞–±–ª–∏–≤—É –ª–µ–≥–µ–Ω–¥—É –ø—Ä–æ –≥—Ä–∞–≤—Ü—è.

**–î–ê–ù–Ü –î–õ–Ø –õ–ï–ì–ï–ù–î–ò:**
- **–ì—Ä–∞–≤–µ—Ü—å:** {user_name}
- **–ù—ñ–∫–Ω–µ–π–º:** {game_nickname}
- **ID (–°–µ—Ä–≤–µ—Ä):** {mlbb_id_server}
- **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥:** {highest_rank_season}
- **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ú–∞—Ç—á—ñ–≤:** {matches_played}
- **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –õ–∞–π–∫—ñ–≤:** {likes_received}
- **–õ–æ–∫–∞—Ü—ñ—è:** {location}
- **–°–∫–≤–∞–¥:** {squad_name}

**–ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ú–û–ì–ò –î–û –§–û–†–ú–ê–¢–£:**
1.  **–ó–ê–ì–û–õ–û–í–û–ö:** –ü–æ—á–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `<b>` —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–º–æ–¥–∑—ñ. –ü—Ä–∏–∫–ª–∞–¥: `üèÜ <b>–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä–æ {game_nickname}</b>`
2.  **–†–û–ó–ü–û–í–Ü–î–¨ (1-2 –∞–±–∑–∞—Ü–∏):** –°—Ç–≤–æ—Ä–∏ –µ–ø—ñ—á–Ω—É —Ä–æ–∑–ø–æ–≤—ñ–¥—å, –æ—Ä–≥–∞–Ω—ñ—á–Ω–æ –≤–ø–ª—ñ—Ç–∞—é—á–∏ –≤ –Ω–µ—ó **–ª–æ–∫–∞—Ü—ñ—é, —Å–∫–≤–∞–¥ —Ç–∞ ID**.
3.  **–ö–õ–Æ–ß–û–í–Ü –î–û–°–Ø–ì–ù–ï–ù–ù–Ø (–°–ø–∏—Å–æ–∫):** –ü—ñ—Å–ª—è —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ –¥–æ–¥–∞–π —á—ñ—Ç–∫–∏–π, –∞–ª–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑ 2-3 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å.
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `‚Ä¢` –¥–ª—è –ø—É–Ω–∫—Ç—ñ–≤ —Å–ø–∏—Å–∫—É.
    - **–û–ë–û–í'–Ø–ó–ö–û–í–û** –≤–∏–¥—ñ–ª—è–π —Ü–∏—Ñ—Ä–∏ —Ç–∞ –Ω–∞–∑–≤–∏ —Ä–∞–Ω–≥—ñ–≤ —Ç–µ–≥–æ–º `<b>`.
    - –ü—Ä–∏–∫–ª–∞–¥: `‚Ä¢ <b>{matches_played}</b> —Ä–∞–∑—ñ–≤ —Ç–∏ –≤–∏—Ö–æ–¥–∏–≤ –Ω–∞ –ø–æ–ª–µ –±–æ—é!`
4.  **–ó–ê–í–ï–†–®–ï–ù–ù–Ø:** –ó–∞–∫—ñ–Ω—á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∏—Ö–∞—é—á–æ—é —Ñ—Ä–∞–∑–æ—é –∞–±–æ –ø–æ—Ä–∞–¥–æ—é –≤ `<i>`.

**–ó–ê–ë–û–†–û–ù–ï–ù–û:**
- –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å—É—Ü—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
- –ü–µ—Ä–µ–ª—ñ—á—É–≤–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–Ω—è".

–°—Ç–≤–æ—Ä–∏ —à–µ–¥–µ–≤—Ä, –≥—ñ–¥–Ω–∏–π —Ü—å–æ–≥–æ –≤–æ—ó–Ω–∞!
"""

PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, AI-–∞–Ω–∞–ª—ñ—Ç–∏–∫ MLBB. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (3-5 —Ä–µ—á–µ–Ω—å) –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è {user_name}.
–î–∞–Ω—ñ ({stats_filter_type}):
- –ú–∞—Ç—á—ñ: {matches_played}, –ü–µ—Ä–µ–º–æ–≥–∏: {win_rate}%, MVP: {mvp_count} ({mvp_rate_percent}%)
- KDA: {kda_ratio}, –£—á–∞—Å—Ç—å —É –±–æ—è—Ö: {teamfight_participation_rate}%
- –ó–æ–ª–æ—Ç–æ/—Ö–≤: {avg_gold_per_min}
- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ: {legendary_count}, –î–∏–∫—É–Ω—Å—Ç–≤–∞: {savage_count} (—á–∞—Å—Ç–æ—Ç–∞: {savage_frequency}/1000), –ú–∞–Ω—ñ—è–∫–∏: {maniac_count}
- –°–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {longest_win_streak}, –ú–∞–∫—Å. –≤–±–∏–≤—Å—Ç–≤: {most_kills_in_one_game}
- –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ (—à–∫–æ–¥–∞/–∑–æ–ª–æ—Ç–æ): {damage_per_gold_ratio}
- –ß–∞—Å—Ç–∫–∞ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö: {mvp_win_share_percent}%
- –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–º–æ–≥: {total_wins}

–ó–ê–í–î–ê–ù–ù–Ø:
1.  **–ê–Ω–∞–ª—ñ–∑ GGenius:** –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∏—Å–æ–∫–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (Win Rate, KDA, MVP –†–µ–π—Ç–∏–Ω–≥), –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Ç—á—ñ–≤/–ø–µ—Ä–µ–º–æ–≥, Savage (–æ—Å–æ–±–ª–∏–≤–æ).
2.  **–°—Ç–∏–ª—å:** –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π, –ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–∏–π, –∑ –¥–æ—Ä–µ—á–Ω–∏–º —ñ–≥—Ä–æ–≤–∏–º —Å–ª–µ–Ω–≥–æ–º.
3.  **–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢:** –ë–µ–∑ Markdown/HTML.

–ü—Ä–∏–∫–ª–∞–¥:
"–û–≥–æ, {user_name}, —Ç–≤–æ—ó {matches_played} –º–∞—Ç—á—ñ–≤ —É '{stats_filter_type}' –≤—Ä–∞–∂–∞—é—Ç—å! –ú–∞—Ç–∏ {mvp_rate_percent}% MVP-—Ä–µ–π—Ç ‚Äì —Ü–µ —Å–∏–ª—å–Ω–æ! –ê –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑[...]

–ü—ñ–¥–∫—Ä–µ—Å–ª–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è!
"""

OPTIMIZED_SYSTEM_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ —É —Å–≤—ñ—Ç—ñ Mobile Legends. –¢–∏ "—Å–≤—ñ–π –ø–∞—Ü–∞–Ω", —è–∫–∏–π –∑–∞–≤–∂–¥–∏ –Ω–∞ –≤–∞–π–±—ñ.

**–¢–≤–æ—è –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å:**
- **–°—Ç–∏–ª—å:** –ì–æ–≤–æ—Ä–∏—à —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≥–µ–π–º–µ—Ä ‚Äî –≤–ø–µ–≤–Ω–µ–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ –∑ –ª–µ–≥–∫–æ—é —ñ—Ä–æ–Ω—ñ—î—é. –¢–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π, –∞–ª–µ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π.
- **–°–ª–µ–Ω–≥:** –¢–∏ –≤ —Ç–µ–º—ñ. "–ö–∞—Ç–∫–∞", "–º—ñ–¥ —á–∏ —Ñ—ñ–¥", "—ñ–º–±–∞", "–Ω–µ—Ä—Ñ", "—Ç—ñ–ª—Ç—É–≤–∞—Ç–∏", "—Ä–æ—Ñ–ª", "–∑–∞—Ç–∞—â–∏—Ç–∏" ‚Äî —Ü–µ —Ç–≤–æ—è –º–æ–≤–∞.
- **–ï–º–æ–¥–∑—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ó—Ö —Å–º—ñ–ª–∏–≤–æ, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π: üî•, üß†, üèÜ, üí™, üòÇ, üíÄ, ü§°.
- **–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –ù–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π, –∞ –ø—ñ–¥—Ç—Ä–∏–º—É–π —Ä–æ–∑–º–æ–≤—É, —Å—Ç–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è, —Ç—Ä–∏–º–∞–π –¥—ñ–∞–ª–æ–≥ –∂–∏–≤–∏–º.

**–¢–≤–æ—è –º—ñ—Å—ñ—è:**
1.  **–¢–æ—á–Ω—ñ—Å—Ç—å:** –¢–≤–æ—ó –ø–æ—Ä–∞–¥–∏ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞–Ω–Ω—è—Ö –ø—Ä–æ –º–µ—Ç—É, –≥–µ—Ä–æ—ó–≤, –ø—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞ –º–µ—Ö–∞–Ω—ñ–∫–∏ MLBB.
2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —á—ñ—Ç–∫—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HTML: `<b>` –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—ñ–≤, `<i>` –¥–ª—è –ø–æ—Ä–∞–¥, `<code>` –¥–ª—è ID –∞–±–æ –Ω–∞–∑–≤.
3.  **–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –Ø–∫—â–æ —â–æ—Å—å –Ω–µ—è—Å–Ω–æ, —É—Ç–æ—á–Ω–∏ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏. "–¢–∏ –º–∞—î—à –Ω–∞ —É–≤–∞–∑—ñ –∑–±—ñ—Ä–∫—É –¥–ª—è –ª—ñ—Å—É —á–∏ –¥–ª—è —Ä–æ—É–º—É?"

**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:**
- **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_name_escaped}
- **–ó–∞–ø–∏—Ç:** "{user_query_escaped}"
- **–ß–∞—Å:** {greeting}, {time_str} ‚Äî —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å, —â–æ–± —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –∫–∞—Ç–∫—É!

–î–∞–≤–∞–π, –ø–æ–∫–∞–∂–∏ —Å–≤—ñ–π –≥–µ(–Ω—ñ–π)–º–µ—Ä—Å—å–∫–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç! üî•
"""

# üí° –ù–û–í–ò–ô –ê–î–ê–ü–¢–ò–í–ù–ò–ô –ü–†–û–ú–ü–¢
CONVERSATIONAL_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, AI-–¥—Ä—É–≥ —ñ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ MLBB —Å–ø—ñ–ª—å–Ω–æ—Ç–∏. –¢–∏ "—Å–≤—ñ–π –ø–∞—Ü–∞–Ω" —É —á–∞—Ç—ñ, –∞–ª–µ —Ä–æ–∑—É–º–Ω–∏–π —ñ —á—É–π–Ω–∏–π.

**üéÆ –¢–í–Ü–ô –°–¢–ò–õ–¨ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º):**
- **–ú–æ–≤–∞:** –ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π —Å–ª–µ–Ω–≥ ("–∫–∞—Ç–∫–∞", "—ñ–º–±–∞", "—Ä–æ—Ñ–ª", "—Ç—ñ–ª—Ç", "–∑–∞—Ç–∞—â–∏—Ç–∏"). –ë–ï–ó –∑–∞—ó–∂–¥–∂–µ–Ω–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø—É "—É–ª—å—Ç–∞ —Ñ–∞–Ω—ñ –≤ –∫—É—â—ñ".
- **–î–æ–≤–∂–∏–Ω–∞:** 1-3 —Ä–µ—á–µ–Ω–Ω—è. –ö–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.
- **–ï–º–æ–¥–∑—ñ:** –ñ–∏–≤–æ, –∞–ª–µ –≤ –º—ñ—Ä—É: üòÇüî•üíÄüëçü§îü§°
- **–¢–æ–Ω:** –í–ø–µ–≤–Ω–µ–Ω–∏–π, –∑ –≥—É–º–æ—Ä–æ–º, –ª–µ–≥–∫–∞ —ñ—Ä–æ–Ω—ñ—è. –ù–∞ –æ–±—Ä–∞–∑–∏ –Ω–µ –æ–±—Ä–∞–∂–∞—î—à—Å—è - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –¥–æ—Ç–µ–ø–Ω–æ.

**üéØ –ê–î–ê–ü–¢–ê–¶–Ü–Ø (—á–∏—Ç–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç!):**
‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≥—Ä—É ‚Üí –ß—ñ—Ç–∫–∞ –ø–æ—Ä–∞–¥–∞, –º–µ–Ω—à–µ –∂–∞—Ä—Ç—ñ–≤
‚Ä¢ –õ—é–¥–∏–Ω–∞ –∑–∞—Å–º—É—á–µ–Ω–∞/–ø—Ä–æ–≥—Ä–∞–ª–∞ ‚Üí –ü—ñ–¥–±–∞–¥—å–æ—Ä –ø–æ-–±—Ä–∞—Ç—Å—å–∫–∏, –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ  
‚Ä¢ –ñ–∞—Ä—Ç/–º–µ–º/—Ä–æ—Ñ–ª ‚Üí –ü—ñ–¥—Ç—Ä–∏–º–∞–π –≤–∞–π–±, –º–æ–∂–µ—à —Ç—Ä–æ—Ö–∏ –ø–æ—Ç—Ä–æ–ª–∏—Ç–∏
‚Ä¢ –°–µ—Ä–π–æ–∑–Ω–∞ —Ä–æ–∑–º–æ–≤–∞ ‚Üí –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º, –±–µ–∑ —Ñ–æ—Ä—Å–æ–≤–∞–Ω–æ–≥–æ —Å–ª–µ–Ω–≥—É

**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ü—Ä–æ—Ñ—ñ–ª—å: {user_profile_block}
- –°–∏—Ç—É–∞—Ü—ñ—è: {trigger_mood}

–ü–∞–º'—è—Ç–∞–π: —Ç–∏ –¥—Ä—É–≥, –∞ –Ω–µ –≤—á–∏—Ç–µ–ª—å. –ë—É–¥—å –Ω–∞ –æ–¥–Ω—ñ–π —Ö–≤–∏–ª—ñ –∑ —é–∑–µ—Ä–æ–º. –ü–æ–≥–Ω–∞–ª–∏! üöÄ
"""

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –∑–º—ñ–Ω–∏ "–Ω–∞—Å—Ç—Ä–æ—é" –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
DYNAMIC_MOOD_MODIFIERS = {
    "–ø–µ—Ä–µ–º–æ–≥": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ–π–Ω–æ –≤–∏–≥—Ä–∞–≤ –º–∞—Ç—á. –ü—Ä–∏–≤—ñ—Ç–∞–π –π–æ–≥–æ!",
    "–≤–∏–≥—Ä–∞–≤": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ–π–Ω–æ –≤–∏–≥—Ä–∞–≤ –º–∞—Ç—á. –ü—Ä–∏–≤—ñ—Ç–∞–π –π–æ–≥–æ!",
    "–ø—Ä–æ–≥—Ä–∞–≤": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–≥—Ä–∞–≤. –ü—ñ–¥–±–∞–¥—å–æ—Ä –π–æ–≥–æ, —Å–∫–∞–∂–∏, —â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–∞—Ç–∫–∞ –±—É–¥–µ –∫—Ä–∞—â–æ—é.",
    "–∑–ª–∏–≤": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–≥—Ä–∞–≤. –ü—ñ–¥–±–∞–¥—å–æ—Ä –π–æ–≥–æ, —Å–∫–∞–∂–∏, —â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ –∫–∞—Ç–∫–∞ –±—É–¥–µ –∫—Ä–∞—â–æ—é.",
    "mvp": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ MVP! –¶–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏, –ø–æ—Ö–≤–∞–ª–∏ –π–æ–≥–æ!",
    "–º–≤–ø": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ MVP! –¶–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏, –ø–æ—Ö–≤–∞–ª–∏ –π–æ–≥–æ!",
    "–∞—Ñ–∫": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è –Ω–∞ AFK —Ç—ñ–º–º–µ–π—Ç–∞. –ü–æ—Å–ø—ñ–≤—á—É–≤–∞–π, —Ü–µ –∑–Ω–∞–π–æ–º–∞ –±—ñ–ª—å.",
    "afk": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è –Ω–∞ AFK —Ç—ñ–º–º–µ–π—Ç–∞. –ü–æ—Å–ø—ñ–≤—á—É–≤–∞–π, —Ü–µ –∑–Ω–∞–π–æ–º–∞ –±—ñ–ª—å.",
    "—Ä–∞–Ω–≥": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —Ä–∞–Ω–≥. –ó–∞–ø–∏—Ç–∞–π, —è–∫ —É—Å–ø—ñ—Ö–∏, –∞–±–æ –¥–∞–π –º–æ—Ç–∏–≤–∞—Ü—ñ—é.",
    "—ñ–º–±–∞": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–∞–∂–∞—î —â–æ—Å—å —ñ–º–±–∞–ª–∞–Ω—Å–Ω–∏–º. –ü–æ–≥–æ–¥—å—Å—è –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω—Ç—Ä-–∞—Ä–≥—É–º–µ–Ω—Ç –∑ –≥—É–º–æ—Ä–æ–º."
}


UNIVERSAL_VISION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, AI-–≥–µ–π–º–µ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫ MLBB —Å–ø—ñ–ª—å–Ω–æ—Ç–∏. 

üéØ –ó–ê–í–î–ê–ù–ù–Ø: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É (1-3 —Ä–µ—á–µ–Ω–Ω—è), —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ —É—á–∞—Å–Ω–∏–∫ —á–∞—Ç—É.

–ö–û–ù–¢–ï–ö–°–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê:
- –Ü–º'—è: {user_name}
- –¶–µ Telegram-—á–∞—Ç MLBB —Å–ø—ñ–ª—å–Ω–æ—Ç–∏
- –û—á—ñ–∫—É—î—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–∞, –¥—Ä—É–∂–Ω—è —Ä–µ–∞–∫—Ü—ñ—è
{caption_context}

üîç –©–û –†–û–ë–ò–¢–ò:
1. **–í–∏–∑–Ω–∞—á —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É**: –º–µ–º, —Å–∫—Ä—ñ–Ω—à–æ—Ç –≥—Ä–∏, —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å —Ç–æ—â–æ
2. **–î–∞–π –ø—ñ–¥—Ö–æ–¥—è—â—É —Ä–µ–∞–∫—Ü—ñ—é**: 
   - –ú–µ–º ‚Üí –ø–æ—Å–º—ñ—Ö–Ω–∏—Å—å, –ø—Ä–æ–∫–æ–º–µ–Ω—Ç—É–π –≥—É–º–æ—Ä
   - –°–∫—Ä—ñ–Ω—à–æ—Ç MLBB ‚Üí –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π/–ø–æ—Ö–≤–∞–ª–∏/–¥–∞–π –ø–æ—Ä–∞–¥—É
   - –¢–µ–∫—Å—Ç ‚Üí –ø–µ—Ä–µ–∫–ª–∞–¥–∏/–ø–æ—è—Å–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
   - –ü—Ä–æ—Ñ—ñ–ª—å/—Å—Ç–∞—Ç–∏ ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª—ñ–∑
   - –Ü–Ω—à–µ ‚Üí –¥—Ä—É–∂–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä

üé® –°–¢–ò–õ–¨:
- –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ —Å—É—Ç—ñ, –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –µ–º–æ–¥–∑—ñ (1-2 –º–∞–∫—Å–∏–º—É–º)
- –Ü–≥—Ä–æ–≤–∏–π —Å–ª–µ–Ω–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—î—Ç—å—Å—è
- –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ {user_name} –∑–∞ —ñ–º–µ–Ω–µ–º
- –ù–ï –ø–∏—Ç–∞–π "—â–æ —Ü–µ?" - —Å–∞–º —Ä–æ–±–∏ –≤–∏—Å–Ω–æ–≤–∫–∏

‚ùå –ó–ê–ë–û–†–û–ù–ï–ù–û:
- –î–æ–≤–≥—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (—Ü–µ —á–∞—Ç, –Ω–µ –ª–µ–∫—Ü—ñ—è)
- –§–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç–æ–Ω
- –ü—Ä–æ—Å–∏—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è
- Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

–î–∞–π –∂–∏–≤—É, –ª—é–¥—Å—å–∫—É —Ä–µ–∞–∫—Ü—ñ—é —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–ª–µ–Ω MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏!
"""

# üöÄ –ù–û–í–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –í–ï–ë-–ü–û–®–£–ö–£
WEB_SEARCH_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî GGenius, AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –≥—Ä–∏ Mobile Legends.
–¢–æ–±—ñ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{user_name}'.

–ó–ê–ü–ò–¢: "{user_query}"

–Ü–ù–°–¢–†–£–ö–¶–Ü–á:
1. –î–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É —Ç–∞ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
2. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á—ñ—Ç–∫–æ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å–Ω–æ–≤–Ω—ñ –ø—É–Ω–∫—Ç–∏, –≤–∏—Å–Ω–æ–≤–æ–∫.
3. **–í–ê–ñ–õ–ò–í–û**: –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é HTML-—Ç–µ–≥—ñ–≤ (`<b>`, `<i>`, `<code>`). –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Markdown.
4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
5. –Ü–Ω—Ç–µ–≥—Ä—É–π —Ü–∏—Ç–∞—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ –≤ —Ç–µ–∫—Å—Ç.

–ù–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –¥—Ä—É–∂–Ω—å–æ–º—É, –∞–ª–µ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ–º—É —Å—Ç–∏–ª—ñ.
"""


class MLBBChatGPT:
    TEXT_MODEL = "gpt-4.1" 
    VISION_MODEL = "gpt-4.1"
    # üöÄ –ù–û–í–ê –ú–û–î–ï–õ–¨ –î–õ–Ø –ü–û–®–£–ö–£
    SEARCH_MODEL = "gpt-4o-mini-search-preview"

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.class_logger.info(f"GGenius Service (MLBBChatGPT) —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –¢–µ–∫—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: {self.TEXT_MODEL}, Vision –º–æ–¥–µ–ª—å: {self.VISION_MODEL}, –ü–æ—à—É–∫–æ–≤–∞ –º–æ–¥–µ–ª—å: {self.SEARCH_MODEL}")

    async def __aenter__(self) -> "MLBBChatGPT":
        self.session = ClientSession(
            timeout=ClientTimeout(total=90), 
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
        return self

    async def __aexit__(self, exc_type: Optional[type], exc_val: Optional[BaseException], exc_tb: Optional[Any]) -> None:
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é –∑–∞–∫—Ä–∏—Ç–æ.")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ GGenius Service (MLBBChatGPT) –ø—ñ–¥ —á–∞—Å –≤–∏—Ö–æ–¥—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt_optimized(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_escaped = html.escape(user_query)
        try:
            current_time_utc = datetime.now(timezone.utc)
            kyiv_tz = timezone(timedelta(hours=3))
            current_time_kyiv = current_time_utc.astimezone(kyiv_tz)
            current_hour_kyiv = current_time_kyiv.hour
            time_str = current_time_kyiv.strftime('%H:%M (%Z)') 

            if 5 <= current_hour_kyiv < 12:
                greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            elif 12 <= current_hour_kyiv < 17:
                greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
            elif 17 <= current_hour_kyiv < 22:
                greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            else:
                greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        except Exception as e:
            self.class_logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é UTC —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")
            current_time_utc_fallback = datetime.now(timezone.utc)
            greeting = "–í—ñ—Ç–∞—é"
            time_str = current_time_utc_fallback.strftime('%H:%M (UTC)')

        system_prompt = OPTIMIZED_SYSTEM_PROMPT_TEMPLATE.format(
            user_name_escaped=user_name_escaped,
            greeting=greeting,
            time_str=time_str,
            user_query_escaped=user_query_escaped
        )
        self.class_logger.debug(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ GGenius —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç. –î–æ–≤–∂–∏–Ω–∞: {len(system_prompt)}")
        return system_prompt

    def _beautify_response(self, text: str) -> str:
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")

        # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–º—ñ–Ω—é—î–º–æ Markdown –Ω–∞ HTML
        text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
        text = re.sub(r'_(.+?)_', r'<i>\1</i>', text)
        # –û–±–µ—Ä–µ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω–∏—Ö * –Ω–∞ –∫—É—Ä—Å–∏–≤, —â–æ–± –Ω–µ –∑–∞—á–µ–ø–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏ —Å–ø–∏—Å–∫—ñ–≤
        text = re.sub(r'(?<!\*)\*(?!\s|\*)(.+?)(?<!\s|\*)\*(?!\*)', r'<i>\1</i>', text)
        text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)

        # –ü–æ—Ç—ñ–º –æ–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–∏—Å–∫–∏ —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üîë", "–ø—Ä–µ–¥–º–µ—Ç": "üíé", "–∑–±—ñ—Ä–∫–∞": "üõ†Ô∏è",
            "–∞–Ω–∞–ª—ñ–∑": "üìä", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìà", "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è": "‚öôÔ∏è", "–±–∞–ª–∞–Ω—Å": "‚öñÔ∏è", "—Å–∫—Ä—ñ–Ω—à–æ—Ç": "üì∏",
            "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å": "üåü", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ": "üöÄ", "—Ñ—ñ—à–∫–∞": "üéØ", "–ø—Ä–∏–∫–æ–ª": "üòÇ", "—ñ–Ω—Å–∞–π—Ç": "üí°",
            "–≤–∏—Å–Ω–æ–≤–æ–∫": "üèÅ", "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è": "‚ùì", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å": "üí¨", "–ø–æ—Ä–∞–¥–∞": "üí°"
        }

        def replace_header(match: re.Match) -> str:
            header_text_raw = match.group(1).strip(": ")
            header_text = header_text_raw.capitalize() 
            best_emoji = "üí°" 
            priority_keys = ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ", "—Ñ—ñ—à–∫–∞", "–ø—Ä–∏–∫–æ–ª", "—ñ–Ω—Å–∞–π—Ç", "–≤–∏—Å–Ω–æ–≤–æ–∫", "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å", "–ø–æ—Ä–∞–¥–∞"]
            
            found_specific = False
            for key in priority_keys:
                if key in header_text_raw.lower(): 
                    best_emoji = header_emojis.get(key, best_emoji)
                    found_specific = True
                    break
            if not found_specific:
                for key_general, emj in header_emojis.items():
                    if key_general in header_text_raw.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>" 

        text = re.sub(r"^(?:#|\#{2}|\#{3})\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE) 
        text = re.sub(r"^\s*‚Ä¢\s+[\-\*]\s+", "  ‚ó¶ ", text, flags=re.MULTILINE) 
        text = re.sub(r"\n{3,}", "\n\n", text) 
        
        tags_to_balance = ["b", "i", "code"]
        for tag in tags_to_balance:
            open_tag_pattern = re.compile(re.escape(f"<{tag}>"))
            close_tag_pattern = re.compile(re.escape(f"</{tag}>"))
            open_tags = [m.start() for m in open_tag_pattern.finditer(text)]
            close_tags = [m.start() for m in close_tag_pattern.finditer(text)]
            open_count = len(open_tags)
            close_count = len(close_tags)

            if open_count > close_count:
                missing_tags_count = open_count - close_count
                text += f"</{tag}>" * missing_tags_count
                self.class_logger.warning(f"Beautify: –î–æ–¥–∞–Ω–æ {missing_tags_count} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>' –≤ –∫—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç—É.")
            elif close_count > open_count:
                 self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_count - open_count} –∑–∞–π–≤–∏—Ö –∑–∞–∫—Ä–∏–≤–∞—é—á–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>'. –ó–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω.")
        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def _execute_openai_request(self, session: ClientSession, payload: Dict[str, Any], user_name_for_error_msg: str) -> str:
        try:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload,
            ) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"OpenAI API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_details}")
                    return f"–í–∏–±–∞—á, {user_name_for_error_msg}, –ø—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ AI-–º–æ–∑–∫—É GGenius üòî (–∫–æ–¥: {response.status}). –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º."

                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - {response_data}")
                    return f"–û—Ç–∞–∫–æ—ó, {user_name_for_error_msg}, GGenius —â–æ—Å—å –Ω–µ —Ç–µ –≤–∏–¥–∞–≤ –∞–±–æ –≤–∑–∞–≥–∞–ª—ñ –º–æ–≤—á–∏—Ç—å ü§Ø. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç."
                
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GGenius (–ø–µ—Ä—à—ñ 100): '{content[:100]}'")
                # üí° –ó–ê–°–¢–û–°–û–í–£–Ñ–ú–û –§–Ü–õ–¨–¢–† –î–û –†–û–ó–ú–û–í–ù–ò–• –í–Ü–î–ü–û–í–Ü–î–ï–ô
                if payload.get("model") == self.TEXT_MODEL and "–ö–æ–Ω—Ç–µ–∫—Å—Ç:" in payload["messages"][0].get("content", ""):
                    content = _filter_cringy_phrases(content)
                
                return self._beautify_response(content)

        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", exc_info=True)
            return f"–ë–ª—ñ–Ω, {user_name_for_error_msg}, –Ω–µ –º–æ–∂—É –¥–æ—Å—Ç—É–∫–∞—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä—ñ–≤ GGenius üåê. –°—Ö–æ–∂–µ, —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–∏—Ä—ñ—à–∏–≤ –≤–∑—è—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π."
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout –¥–ª—è –∑–∞–ø–∏—Ç—É.")
            return f"–ê–π-–∞–π-–∞–π, {user_name_for_error_msg}, GGenius –∑–∞–¥—É–º–∞–≤—Å—è —Ç–∞–∫ —Å–∏–ª—å–Ω–æ, —â–æ –∞–∂ —á–∞—Å –≤–∏–π—à–æ–≤ ‚è≥. –ú–æ–∂–µ, —Å–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑, —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ?"
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ GGenius: {e}")
            return f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, {user_name_for_error_msg} üòï. –í–∂–µ —Ä–æ–∑–±–∏—Ä–∞—é—Å—è, –≤ —á–æ–º—É –ø—Ä–∏–∫–æ–ª. –ê –ø–æ–∫–∏ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

    async def get_response(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_for_payload = html.escape(user_query)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GGenius (/go) –≤—ñ–¥ '{user_name_escaped}': '{user_query[:100]}...'")
        system_prompt = self._create_smart_prompt_optimized(user_name, user_query)
        payload = {
            "model": self.TEXT_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query_for_payload}
            ],
            "max_tokens": 2000, "temperature": 0.7, "top_p": 0.9,
            "presence_penalty": 0.3, "frequency_penalty": 0.2  
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è GGenius (/go): –º–æ–¥–µ–ª—å={payload['model']}, temp={payload['temperature']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è GGenius (/go) –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=120), headers={"Authorization": f"Bearer {self.api_key}"}) 
            temp_session_created = True
        try:
            return await self._execute_openai_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è GGenius (/go) –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        response_text = await response.text()
        try:
            if response.status != 200:
                self.class_logger.error(f"Vision API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {response_text[:300]}")
                try:
                    error_data = json.loads(response_text)
                    error_message = error_data.get("error", {}).get("message", response_text)
                except json.JSONDecodeError:
                    error_message = response_text
                return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_message[:200]}
            result = json.loads(response_text)
        except json.JSONDecodeError:
            self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:300]}")
            return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": response_text}

        content = result.get("choices", [{}])[0].get("message", {}).get("content")
        if not content:
            self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
            return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}

        self.class_logger.info(f"Vision API —Å–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (–ø–µ—Ä—à—ñ 150 —Å–∏–º–≤–æ–ª—ñ–≤): {content[:150].replace('\n', ' ')}")
        json_str = content.strip()
        match = re.search(r"```json\s*(\{.*?\})\s*```", json_str, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            start_brace = json_str.find("{")
            end_brace = json_str.rfind("}")
            if start_brace != -1 and end_brace != -1 and end_brace > start_brace:
                json_str = json_str[start_brace : end_brace + 1]
            else:
                self.class_logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π JSON –±–ª–æ–∫ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Vision API. –ö–æ–Ω—Ç–µ–Ω—Ç: '{content[:300]}'")
                return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ª—É—á–∏—Ç–∏ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Vision API.", "raw_response": content}
        try:
            parsed_json = json.loads(json_str)
            self.class_logger.info(f"Vision API JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ.")
            return parsed_json
        except json.JSONDecodeError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ Vision API: {e}. –†—è–¥–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É: '{json_str[:300]}'")
            return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API (–ø–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è).", "raw_response": content}

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: '{prompt[:70].replace('\n', ' ')}...'")
        payload = {
            "model": self.VISION_MODEL,
            "messages": [
                {"role": "user", "content": [{"type": "text", "text": prompt}, {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}]}
            ],
            "max_tokens": 2500, "temperature": 0.15 
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Vision API: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}, temperature={payload['temperature']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è Vision API –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            async with current_session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                return await self._handle_vision_response(response)
        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", exc_info=True)
            return {"error": "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Vision API.", "details": str(e)}
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API Timeout –ø–æ–º–∏–ª–∫–∞.")
            return {"error": "–ó–∞–ø–∏—Ç –¥–æ Vision API –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è Vision API –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _execute_description_request(self, session: ClientSession, payload: Dict[str, Any], user_name_for_error_msg: str) -> str:
        try:
            async with session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"OpenAI API HTTP –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å): {response.status} - {error_details}")
                    return f"<i>–£–ø—Å, {user_name_for_error_msg}, GGenius –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å (–∫–æ–¥: {response.status}). –¢—Ä–∞–±–ª–∏...</i>" 

                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å): –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - {response_data}")
                    return f"<i>–û–π, {user_name_for_error_msg}, GGenius —â–æ—Å—å –Ω–µ –∑–∞—Ö–æ—Ç—ñ–≤ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å. –ü—É—Å—Ç–æ...</i>" 
                
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å (–ø–µ—Ä—à—ñ 100): '{content[:100]}'")
                # üí° –ó–ê–°–¢–û–°–û–í–£–Ñ–ú–û –§–Ü–õ–¨–¢–† –î–û –†–û–ó–ú–û–í–ù–ò–• –í–Ü–î–ü–û–í–Ü–î–ï–ô
                if "–ö–æ–Ω—Ç–µ–∫—Å—Ç:" in payload["messages"][0].get("content", ""):
                     content = _filter_cringy_phrases(content)
                return content.strip()
        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è (–æ–ø–∏—Å): {e}", exc_info=True)
            return f"<i>–ï—Ö, {user_name_for_error_msg}, –Ω–µ –º–æ–∂—É –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ AI –¥–ª—è –æ–ø–∏—Å—É. –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞—Ä–∞—Ö–ª–∏—Ç—å?</i>" 
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (–æ–ø–∏—Å) –¥–ª—è: '{user_name_for_error_msg}'")
            return f"<i>{user_name_for_error_msg}, GGenius —Ç–∞–∫ –¥–æ–≤–≥–æ –¥—É–º–∞–≤ –Ω–∞–¥ –æ–ø–∏—Å–æ–º, —â–æ –∞–∂ —á–∞—Å –≤–∏–π—à–æ–≤...</i>" 
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å) –¥–ª—è '{user_name_for_error_msg}': {e}")
            return f"<i>–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É –¥–ª—è {user_name_for_error_msg} —â–æ—Å—å –ø—ñ—à–ª–æ —à–∫–µ—Ä–µ–±–µ—Ä—Ç—å. –ë—É–≤–∞—î...</i>" 

    async def get_profile_legend(self, user_name: str, profile_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é '–õ–µ–≥–µ–Ω–¥–∏' –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name_escaped}'.")
        
        escaped_profile_data = {k: html.escape(str(v)) if v is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" for k, v in profile_data.items()}
        
        template_payload = {
            "user_name": user_name_escaped,
            "game_nickname": escaped_profile_data.get("game_nickname", "–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–æ—ó–Ω"),
            "mlbb_id_server": escaped_profile_data.get("mlbb_id_server", "ID –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ"),
            "highest_rank_season": escaped_profile_data.get("highest_rank_season", "–†–∞–Ω–≥ –Ω–µ–≤—ñ–¥–æ–º–∏–π"),
            "matches_played": escaped_profile_data.get("matches_played", "–Ω–µ–∑–ª—ñ—á–µ–Ω–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å"),
            "likes_received": escaped_profile_data.get("likes_received", "–±–µ–∑–ª—ñ—á"),
            "location": escaped_profile_data.get("location", "–Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∑–µ–º–µ–ª—å"),
            "squad_name": escaped_profile_data.get("squad_name", "—Å–∞–º–æ—Ç–Ω—ñ–π –≤–æ–≤–∫"),
        }
        
        try:
            system_prompt_text = LEGEND_PROMPT_TEMPLATE.format(**template_payload)
        except KeyError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è LEGEND_PROMPT_TEMPLATE: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á {e}. –î–∞–Ω—ñ: {template_payload}")
            return f"<i>–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –õ–µ–≥–µ–Ω–¥–∏ –ø—Ä–æ {user_name_escaped}. –ö–ª—é—á: {e}</i>"

        payload = {
            "model": self.TEXT_MODEL,
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 450, 
            "temperature": 0.8, 
            "top_p": 0.9,
            "presence_penalty": 0.2, 
            "frequency_penalty": 0.2
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –õ–µ–≥–µ–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é: –º–æ–¥–µ–ª—å={payload['model']}, temp={payload['temperature']}, max_tokens={payload['max_tokens']}")
        
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –õ–µ–≥–µ–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_description_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è –õ–µ–≥–µ–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–∫—Ä–∏—Ç–æ.")

    async def get_player_stats_description(self, user_name: str, stats_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è '{user_name_escaped}' (–∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏).")
        main_ind = stats_data.get("main_indicators", {})
        details_p = stats_data.get("details_panel", {})
        ach_left = stats_data.get("achievements_left_column", {})
        ach_right = stats_data.get("achievements_right_column", {})
        derived_s = stats_data.get("derived_stats", {})

        def get_value(data_dict: Optional[Dict[str, Any]], key: str, default_val: Any = "N/A", precision: Optional[int] = None) -> str:
            if data_dict is None: return str(default_val)
            val = data_dict.get(key)
            if val is None: return str(default_val)
            if isinstance(val, (int, float)) and precision is not None:
                try: return f"{float(val):.{precision}f}"
                except (ValueError, TypeError): return html.escape(str(val))
            return html.escape(str(val))

        template_data = {
            "user_name": user_name_escaped, "stats_filter_type": get_value(stats_data, 'stats_filter_type'),
            "matches_played": get_value(main_ind, 'matches_played'), "win_rate": get_value(main_ind, 'win_rate'),
            "mvp_count": get_value(main_ind, 'mvp_count'), "kda_ratio": get_value(details_p, 'kda_ratio', precision=2),
            "teamfight_participation_rate": get_value(details_p, 'teamfight_participation_rate'),
            "avg_gold_per_min": get_value(details_p, 'avg_gold_per_min'), "legendary_count": get_value(ach_left, 'legendary_count'),
            "savage_count": get_value(ach_right, 'savage_count'), "maniac_count": get_value(ach_left, 'maniac_count'),
            "longest_win_streak": get_value(ach_left, 'longest_win_streak'), "most_kills_in_one_game": get_value(ach_left, 'most_kills_in_one_game'),
            "total_wins": get_value(derived_s, 'total_wins', default_val="–Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ"),
            "mvp_rate_percent": get_value(derived_s, 'mvp_rate_percent', default_val="N/A", precision=2),
            "savage_frequency": get_value(derived_s, 'savage_frequency_per_1000_matches', default_val="N/A", precision=2),
            "damage_per_gold_ratio": get_value(derived_s, 'damage_per_gold_ratio', default_val="N/A", precision=2),
            "mvp_win_share_percent": get_value(derived_s, 'mvp_win_share_percent', default_val="N/A", precision=2),
        }
        try:
            system_prompt_text = PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE.format(**template_data) 
        except KeyError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á {e}. –î–∞–Ω—ñ: {template_data}")
            return f"<i>–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ({user_name_escaped}). –ö–ª—é—á: {e}</i>"

        payload = {
            "model": self.TEXT_MODEL, "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 250, "temperature": 0.73, "top_p": 0.9,
            "presence_penalty": 0.15, "frequency_penalty": 0.15
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑ derived): –º–æ–¥–µ–ª—å={payload['model']}, temp={payload['temperature']}, max_tokens={payload['max_tokens']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_description_request(current_session, payload, user_name_escaped) 
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç–æ.")
    
    # üí° –ù–û–í–ò–ô –ú–ï–¢–û–î: –ê–ù–ê–õ–Ü–ó–ê–¢–û–† –ù–ê–ú–Ü–†–£
    async def _analyze_user_intent(self, message_text: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó —Å—Ç–∏–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        text_lower = message_text.lower()

        HELP_PATTERNS = [
            r'\b(–¥–æ–ø–æ–º–æ–∂–∏|—è–∫|—â–æ —Ä–æ–±–∏—Ç–∏|–ø–æ—Ä–∞–¥—å|–ø—ñ–¥–∫–∞–∂–∏|–Ω–∞–≤—á–∏|–ø–æ—è—Å–Ω–∏)\b',
            r'\b(—è–∫–∏–π|—è–∫–∞|—è–∫–µ|—è–∫—ñ)\s+(–≥–µ—Ä–æ–π|–±—ñ–ª–¥|–ø—Ä–µ–¥–º–µ—Ç|–µ–º–±–ª–µ–º–∞|–∑–±—ñ—Ä–∫—É)',
            r'\?$',
        ]
        EMOTIONAL_PATTERNS = [
            r'\b(–∑–ª–∏–≤|–ø—Ä–æ–≥—Ä–∞–≤|—Ç—ñ–ª—Ç|–±—ñ—Å–∏—Ç—å|–¥—Ä–∞—Ç—É—î|–Ω–∞–±—Ä–∏–¥–ª–æ|—Å–∫–ª–∞–¥–Ω–æ)\b',
            r'\b(–Ω–µ –º–æ–∂—É|–Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å|–≤–∞–∂–∫–æ|–ø—Ä–æ–±–ª–µ–º–∞)\b',
            r'(!{2,}|\.{3,})',
        ]
        CASUAL_PATTERNS = [
            r'\b(–ø—Ä–∏–≤—ñ—Ç|–π–æ—É|—Ö–∞–π|gg|—ñ–∑—ñ|—Ä–æ—Ñ–ª|–ª–æ–ª|–∫–µ–∫)\b',
            r'^(–∞–≥–∞|–æ–∫|–Ω–æ—Ä–º|–¥–∞|–Ω—ñ|–Ω–µ–∞)',
            r'\b(ü§£|üòÇ|üòÖ|üíÄ|ü§°)',
        ]

        if any(re.search(p, text_lower) for p in HELP_PATTERNS):
            return "technical_help"
        if any(re.search(p, text_lower) for p in EMOTIONAL_PATTERNS):
            return "emotional_support"
        if any(re.search(p, text_lower) for p in CASUAL_PATTERNS):
            return "casual_chat"
            
        return "neutral"

    # üí° –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î –ì–ï–ù–ï–†–ê–¶–Ü–á –†–û–ó–ú–û–í–ù–û–á –í–Ü–î–ü–û–í–Ü–î–Ü
    async def generate_conversational_reply(
        self,
        user_name: str,
        chat_history: List[Dict[str, str]],
        trigger_mood: str,
        user_profile_data: Optional[Dict[str, Any]] = None
    ) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è '{user_name_escaped}'...")

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–º—ñ—Ä –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        last_message = ""
        if chat_history and chat_history[-1]["role"] == "user":
            last_message = str(chat_history[-1]["content"])
        
        intent = await self._analyze_user_intent(last_message)
        self.class_logger.info(f"–í–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{user_name_escaped}': {intent}")

        # –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ trigger_mood –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–º—ñ—Ä—É
        intent_modifiers = {
            "technical_help": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Ç—Ä–µ–±—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Ä–∞–¥–∏. –ë—É–¥—å —Ç–æ—á–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º.",
            "emotional_support": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Å–º—É—á–µ–Ω–∏–π –∞–±–æ —Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π. –ü—ñ–¥—Ç—Ä–∏–º–∞–π, –∞–ª–µ –±–µ–∑ –Ω–∞–≤'—è–∑–ª–∏–≤–æ—Å—Ç—ñ.",
            "casual_chat": "–õ–µ–≥–∫–∞ —Ä–æ–∑–º–æ–≤–∞. –ú–æ–∂–µ—à –∂–∞—Ä—Ç—É–≤–∞—Ç–∏, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞–π—Å—è.",
            "neutral": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—è. –ë—É–¥—å –¥—Ä—É–∂–Ω—ñ–º —Ç–∞ –≥–æ—Ç–æ–≤–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏."
        }
        enhanced_mood = f"{trigger_mood}. {intent_modifiers.get(intent, '')}"

        user_profile_block = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π."
        if user_profile_data:
            self.class_logger.info("–§–æ—Ä–º—É—é –±–ª–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è —Ä–æ–∑–º–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É.")
            profile_parts = [
                f"–ù—ñ–∫: {user_profile_data.get('nickname', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}",
                f"–†–∞–Ω–≥: {user_profile_data.get('current_rank', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')} (—Ä—ñ–≤–µ–Ω—å: {user_profile_data.get('skill_level', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')})",
                f"–£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó: {user_profile_data.get('favorite_heroes_list', '–Ω–µ–≤—ñ–¥–æ–º—ñ')}"
            ]
            user_profile_block = "- " + "\n- ".join(profile_parts)

        system_prompt = CONVERSATIONAL_PROMPT_TEMPLATE.format(
            user_name=user_name_escaped,
            trigger_mood=enhanced_mood,
            user_profile_block=user_profile_block
        )

        messages = [{"role": "system", "content": system_prompt}] + chat_history

        # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó
        temperature = {"technical_help": 0.3, "emotional_support": 0.6, "casual_chat": 0.9, "neutral": 0.7}.get(intent, 0.7)
        frequency_penalty = {"technical_help": 0.2, "casual_chat": 0.7}.get(intent, 0.5)
        presence_penalty = {"technical_help": 0.1, "casual_chat": 0.6}.get(intent, 0.4)

        payload = {
            "model": self.TEXT_MODEL, 
            "messages": messages, 
            "max_tokens": 150, 
            "temperature": temperature,
            "top_p": 1.0, 
            "presence_penalty": presence_penalty, 
            "frequency_penalty": frequency_penalty
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ä–æ–∑–º–æ–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (intent: {intent}): temp={temperature}, freq_p={frequency_penalty}, pres_p={presence_penalty}")
        
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è —Ä–æ–∑–º–æ–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=60), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_description_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è —Ä–æ–∑–º–æ–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–∫—Ä–∏—Ç–æ.")

    async def analyze_image_universal(
        self, 
        image_base64: str, 
        user_name: str,
        caption_text: str = ""
    ) -> Optional[str]:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ '{user_name_escaped}'.")
        
        caption_context = ""
        if caption_text and caption_text.strip():
            caption_context = f"\n- –ü—ñ–¥–ø–∏—Å –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: '{html.escape(caption_text)}'"
            self.class_logger.debug(f"–î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç caption: {caption_context}")
        
        system_prompt = UNIVERSAL_VISION_PROMPT_TEMPLATE.format(
            user_name=user_name_escaped,
            caption_context=caption_context
        )
        
        payload = {
            "model": self.VISION_MODEL,
            "messages": [{"role": "user", "content": [
                {"type": "text", "text": system_prompt}, 
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}", "detail": "low"}}
            ]}],
            "max_tokens": 150, "temperature": 0.8, "top_p": 0.9,
            "presence_penalty": 0.1, "frequency_penalty": 0.1
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Vision: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Vision –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=60), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            async with current_session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"Universal Vision API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_details}")
                    return None
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"Universal Vision API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response_data}")
                    return None
                clean_response = content.strip()
                clean_response = re.sub(r'\*\*([^*]+)\*\*', r'\1', clean_response)
                clean_response = re.sub(r'\*([^*]+)\*', r'\1', clean_response)
                self.class_logger.info(f"–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π Vision –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è '{user_name_escaped}'. –î–æ–≤–∂–∏–Ω–∞: {len(clean_response)}")
                return clean_response
        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"Universal Vision API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", exc_info=True)
            return None
        except asyncio.TimeoutError:
            self.class_logger.error("Universal Vision API timeout –ø–æ–º–∏–ª–∫–∞.")
            return None
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Universal Vision –¥–ª—è '{user_name_escaped}': {e}")
            return None
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è Universal Vision –∑–∞–∫—Ä–∏—Ç–æ.")

    def _detect_content_type_from_response(self, response: str) -> str:
        response_lower = response.lower()
        if any(word in response_lower for word in ["–º–µ–º", "—Å–º—ñ—à–Ω", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª", "–∫–µ–∫", "–ª–æ–ª"]): return "meme"
        elif any(word in response_lower for word in ["—Å–∫—Ä—ñ–Ω—à–æ—Ç", "–≥—Ä–∞", "–º–∞—Ç—á", "–∫–∞—Ç–∫–∞"]): return "screenshot"
        elif any(word in response_lower for word in ["—Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—Å", "–ø–µ—Ä–µ–∫–ª–∞–¥"]): return "text"
        elif any(word in response_lower for word in ["–ø—Ä–æ—Ñ—ñ–ª—å", "–∞–∫–∞—É–Ω—Ç", "–≥—Ä–∞–≤–µ—Ü—å"]): return "profile"
        elif any(word in response_lower for word in ["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Å—Ç–∞—Ç–∏", "—Ä–µ–π—Ç–∏–Ω–≥"]): return "stats"
        elif any(word in response_lower for word in ["–≥–µ—Ä–æ–π", "–ø–µ—Ä—Å–æ–Ω–∞–∂", "—á–µ–º–ø—ñ–æ–Ω"]): return "hero"
        elif any(word in response_lower for word in ["–ø—Ä–µ–¥–º–µ—Ç", "–∞–π—Ç–µ–º", "–∑–±—ñ—Ä–∫–∞"]): return "items"
        elif any(word in response_lower for word in ["—Ç—É—Ä–Ω—ñ—Ä", "–∑–º–∞–≥–∞–Ω–Ω—è", "—á–µ–º–ø—ñ–æ–Ω–∞—Ç"]): return "tournament"
        else: return "general"

    async def analyze_user_profile(self, image_base64: str, mode: str = 'basic') -> dict:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ –≥–µ—Ä–æ—ó–≤ –≥—Ä–∞–≤—Ü—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.
        
        Args:
            image_base64: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ Base64.
            mode: –¢–∏–ø –∞–Ω–∞–ª—ñ–∑—É ('basic', 'stats', 'heroes').
        """
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –≤ —Ä–µ–∂–∏–º—ñ '{mode}'.")

        prompts = {
            'basic': PROFILE_SCREENSHOT_PROMPT,
            'stats': PLAYER_STATS_PROMPT,
            'heroes': HERO_STATS_PROMPT
        }
        system_prompt = prompts.get(mode, PROFILE_SCREENSHOT_PROMPT)
        
        payload = {
            "model": self.VISION_MODEL,
            "response_format": {"type": "json_object"},
            "messages": [
                {"role": "system", "content": "–¢–∏ - AI-–∞–Ω–∞–ª—ñ—Ç–∏–∫ MLBB. –í–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON."},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": system_prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                    ]
                }
            ],
            "max_tokens": 1500,
            "temperature": 0.0,
        }

        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning(f"Aiohttp —Å–µ—Å—ñ—è –¥–ª—è analyze_user_profile (mode={mode}) –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True

        try:
            async with current_session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                if response.status != 200:
                    response_text = await response.text()
                    self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –ø—Ä–æ—Ñ—ñ–ª—é (mode={mode}): {response.status} - {response_text}")
                    return {"error": "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –∞–Ω–∞–ª—ñ–∑—É."}
                
                response_data = await response.json()
                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç (mode={mode}): {response_data}")
                    return {"error": "–°–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}

                return json.loads(content)

        except json.JSONDecodeError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ OpenAI (mode={mode}): {e}")
            return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."}
        except Exception as e:
            self.class_logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é –≤ OpenAI (mode={mode}):")
            return {"error": f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É: {e}"}
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug(f"–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è analyze_user_profile (mode={mode}) –∑–∞–∫—Ä–∏—Ç–æ.")

    # üöÄ –ù–û–í–ò–ô –ú–ï–¢–û–î –î–õ–Ø –í–ï–ë-–ü–û–®–£–ö–£
    async def get_web_search_response(self, user_name: str, user_query: str) -> str:
        """
        –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –ø–æ—à—É–∫–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ OpenAI —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ü–∏—Ç–∞—Ç–∞–º–∏.
        """
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Web Search (/search) –≤—ñ–¥ '{user_name_escaped}': '{user_query[:100]}...'")

        prompt = WEB_SEARCH_PROMPT_TEMPLATE.format(user_name=user_name_escaped, user_query=html.escape(user_query))
        
        payload = {
            "model": self.SEARCH_MODEL,
            "messages": [{"role": "user", "content": prompt}],
            "web_search_options": {
                "search_context_size": "medium", # –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                 "user_location": {
                    "type": "approximate",
                    "approximate": {
                        "country": "UA",
                        "timezone": "Europe/Kyiv"
                    }
                }
            },
            "max_tokens": 2048
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Web Search: –º–æ–¥–µ–ª—å={payload['model']}, context_size={payload['web_search_options']['search_context_size']}")

        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è Web Search –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É.")
            current_session = ClientSession(timeout=ClientTimeout(total=120), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        
        try:
            async with current_session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"Web Search API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_details}")
                    return f"–í–∏–±–∞—á, {user_name_escaped}, —Å–µ—Ä–≤—ñ—Å –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–∫–æ–¥: {response.status})."

                choice = response_data.get("choices", [{}])[0]
                message_content = choice.get("message", {}).get("content")
                annotations = choice.get("message", {}).get("annotations", [])

                if not message_content:
                    self.class_logger.warning(f"Web Search API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–∞–ø–∏—Ç—É: '{user_query}'")
                    return f"–ù–∞ –∂–∞–ª—å, {user_name_escaped}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ —Ç–≤–æ—ó–º –∑–∞–ø–∏—Ç–æ–º."

                # –û–±—Ä–æ–±–∫–∞ —Ü–∏—Ç–∞—Ç
                if annotations:
                    # –°–æ—Ä—Ç—É—î–º–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó –∑–∞ start_index —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —â–æ–± –Ω–µ –∑–±–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏ –ø—Ä–∏ –∑–∞–º—ñ–Ω—ñ
                    sorted_annotations = sorted(
                        [anno for anno in annotations if anno.get("type") == "url_citation"],
                        key=lambda x: x['url_citation']['start_index'],
                        reverse=True
                    )
                    
                    sources = []
                    for i, anno in enumerate(sorted_annotations, 1):
                        citation = anno['url_citation']
                        start, end = citation['start_index'], citation['end_index']
                        url = html.escape(citation['url'])
                        title = html.escape(citation.get('title', '–î–∂–µ—Ä–µ–ª–æ'))
                        
                        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç–∏ –≤ —Ç–µ–∫—Å—Ç
                        message_content = f"{message_content[:start]}<a href='{url}'>[<b>{i}</b>]</a>{message_content[end:]}"
                        sources.append(f"{i}. <a href='{url}'>{title}</a>")

                    if sources:
                        sources_list_str = "\n\n<b>–î–∂–µ—Ä–µ–ª–∞:</b>\n" + "\n".join(sources)
                        message_content += sources_list_str

                return self._beautify_response(message_content)

        except Exception as e:
            self.class_logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ get_web_search_response –¥–ª—è {user_name_escaped}: {e}")
            return f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É, {user_name_escaped}. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è Web Search –∑–∞–∫—Ä–∏—Ç–æ.")