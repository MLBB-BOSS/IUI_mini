import asyncio
import base64
import html
import json
import logging
import re
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any

import aiohttp
from aiohttp import ClientSession, ClientTimeout

# –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ logger —Ç–∞ API_KEY –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞–±–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ
# from config import OPENAI_API_KEY, logger
# –î–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É, —è —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–¥–∞–º —ó—Ö —Ç—É—Ç –∞–±–æ –æ—á—ñ–∫—É—é –ø–µ—Ä–µ–¥–∞—á—É –≤ __init__
# logger = logging.getLogger(__name__)


# === –ü–†–û–ú–ü–¢–ò ===
PROFILE_SCREENSHOT_PROMPT = """
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ –≥—Ä–∏ Mobile Legends: Bang Bang.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —É–≤–∞–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–¥–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è.
–í–∏—Ç—è–≥–Ω–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ —ó—ó –í–ò–ö–õ–Æ–ß–ù–û —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ JSON –æ–±'—î–∫—Ç–∞.
–ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ –∞–±–æ –ø—ñ—Å–ª—è JSON, —Ç—ñ–ª—å–∫–∏ —Å–∞–º JSON.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ç–∞–∫–æ—é:
{
  "game_nickname": "string –∞–±–æ null, —è–∫—â–æ –Ω–µ –≤–∏–¥–Ω–æ",
  "mlbb_id_server": "string —É —Ñ–æ—Ä–º–∞—Ç—ñ 'ID (SERVER)' –∞–±–æ null, —è–∫—â–æ –Ω–µ –≤–∏–¥–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '123456789 (1234)')",
  "highest_rank_season": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 ‚òÖ', '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 1111 ‚òÖ') –∞–±–æ null",
  "matches_played": "int –∞–±–æ null",
  "likes_received": "int –∞–±–æ null",
  "location": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Ukraine/Dnipropetrovs'k') –∞–±–æ null",
  "squad_name": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'IS Iron Spirit.') –∞–±–æ null"
}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –¢–û–ß–ù–û–°–¢–Ü:
1.  **–¶–∏—Ñ—Ä–∏ —Ç–∞ –ó—ñ—Ä–∫–∏ (‚òÖ) –≤ –†–∞–Ω–≥–∞—Ö:** –î—É–∂–µ —É–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π –£–°–Ü —Ü–∏—Ñ—Ä–∏ –≤ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö **–ù–∞–π–≤–∏—â–æ–≥–æ –†–∞–Ω–≥—É –°–µ–∑–æ–Ω—É** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 ‚òÖ', '–ú—ñ—Ñ—ñ—á–Ω–∏–π 1111 ‚òÖ'). –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∂–æ–¥–Ω–æ—ó —Ü–∏—Ñ—Ä–∏.
2.  **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥ –°–µ–∑–æ–Ω—É:** –¶–µ —Ä–∞–Ω–≥, —ñ–∫–æ–Ω–∫–∞ —è–∫–æ–≥–æ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –±—ñ–ª—è –ø—ñ–¥–ø–∏—Å—É "Highest Rank". –ß–∞—Å—Ç–æ –≤—ñ–Ω –º–∞—î –ø–æ–∫–∞–∑–Ω–∏–∫ –∑—ñ—Ä–æ–∫ (‚òÖ) –∞–±–æ –æ—á–æ–∫ —Å–ª–∞–≤–∏. –í–∫–ª—é—á–∞–π —ó—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é.
3.  **–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –î–∞–Ω–∏—Ö:** –Ø–∫—â–æ –±—É–¥—å-—è–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ª–æ–∫–∞—Ü—ñ—è, –Ω—ñ–∫–Ω–µ–π–º, ID, –Ω–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥) –¥—ñ–π—Å–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –∞–±–æ –Ω–µ—Ä–æ–∑–±—ñ—Ä–ª–∏–≤–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞—á–µ–Ω–Ω—è `null` –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ–ª—è –≤ JSON. –ù–µ –≤–∏–≥–∞–¥—É–π –¥–∞–Ω—ñ.
4.  **–¢–æ—á–Ω—ñ—Å—Ç—å ID —Ç–∞ –°–µ—Ä–≤–µ—Ä–∞:** –£–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ü–∏—Ñ—Ä–∏ ID —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–∏–¥–Ω–æ, –≤–∫–∞–∑—É–π —Ç—ñ–ª—å–∫–∏ ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '123456789'). –Ø–∫—â–æ ID –Ω–µ –≤–∏–¥–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞–π `null`.

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∏–º. –Ø–∫—â–æ —è–∫–∞—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞—á–µ–Ω–Ω—è null –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ–ª—è.
–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ç–µ–∫—Å—Ç —É–≤–∞–∂–Ω–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –Ω–µ–≤–µ–ª–∏–∫–∏–π –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–∫—Ä–∏—Ç–∏–π.
"""

PROFILE_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∏–π —Ç–∞ –¥–æ—Ç–µ–ø–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä –º–∞—Ç—á—ñ–≤ Mobile Legends, —è–∫–∏–π –≤–º—ñ—î –∑–Ω–∞–π—Ç–∏ —Ä–æ–¥–∑–∏–Ω–∫—É –≤ –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü–µ–≤—ñ. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (2-5 —Ä–µ—á–µ–Ω—å), –∞–ª–µ —è—Å–∫—Ä–∞–≤–∏–π —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π "–≤–∞—É-–µ—Ñ–µ–∫—Ç" –æ–ø–∏—Å –¥–ª—è –≥—Ä–∞–≤—Ü—è {user_name}, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –¥–∞–Ω–∏—Ö –π–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é. –û–ø–∏—Å –º–∞—î –±—É—Ç–∏ —Å—Ö–æ–∂–∏–º –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä —Å—Ç—Ä—ñ–º–µ—Ä–∞ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó.

–û—Å—å –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é:
- –ù—ñ–∫–Ω–µ–π–º: {game_nickname}
- –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ —Å–µ–∑–æ–Ω—É: {highest_rank_season}
- –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {matches_played}
- –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {likes_received}
- –õ–æ–∫–∞—Ü—ñ—è: {location}
- –°–∫–≤–∞–¥: {squad_name}

–¢–í–û–á –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –£–ù–Ü–ö–ê–õ–¨–ù–û–ì–û –ö–û–ú–ï–ù–¢–ê–†–Ø:
1.  **–ó–Ω–∞–π–¥–∏ "—Ñ—ñ—à–∫—É":** –ù–∞ —á–æ–º—É –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∞–∫—Ü–µ–Ω—Ç? –¶–µ –º–æ–∂–µ –±—É—Ç–∏:
    *   –í—Ä–∞–∂–∞—é—á–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ –∞–±–æ –ª–∞–π–∫—ñ–≤.
    *   –í–∏—Å–æ–∫–∏–π —Ä–∞–Ω–≥ (–æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ —î –∑—ñ—Ä–∫–∏/–æ—á–∫–∏ —Å–ª–∞–≤–∏).
    *   –¶—ñ–∫–∞–≤–∏–π –∞–±–æ –∫—É–º–µ–¥–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º (–æ–±—ñ–≥—Ä–∞–π –π–æ–≥–æ!).
    *   –ù–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –¥–æ —Å–∫–≤–∞–¥—É (–º–æ–∂–Ω–∞ –ø–æ–∂–∞—Ä—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ –∫–æ–º–∞–Ω–¥–Ω—É —Å–∏–Ω–µ—Ä–≥—ñ—é).
    *   –ù–µ–∑–≤–∏—á–∞–π–Ω–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –º–∞–ª–æ –º–∞—Ç—á—ñ–≤, –∞–ª–µ –≤–∏—Å–æ–∫–∏–π —Ä–∞–Ω–≥).
    *   –ù–∞–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —è–∫–∏—Ö–æ—Å—å –¥–∞–Ω–∏—Ö –º–æ–∂–Ω–∞ –æ–±—ñ–≥—Ä–∞—Ç–∏ –∑ –≥—É–º–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –∫—Ä—É—Ç–∏–π, —â–æ –ø—Ä–∏—Ö–æ–≤—É—î —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é!").
2.  **–í–∏–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∫–æ–º–µ–Ω—Ç–∞—Ä—è (–º–æ–∂–µ—à –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏):**
    *   **–ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è:** "–û–≥–æ, {game_nickname} –ø—Ä–æ—Å—Ç–æ —Ä–æ–∑—Ä–∏–≤–∞—î! {matches_played} –º–∞—Ç—á—ñ–≤ ‚Äì —Ü–µ –∂ —Å–∫—ñ–ª—å–∫–∏ –∫–∞—Ç–æ–∫ –∑–∞—Ç–∞—â–µ–Ω–æ!"
    *   **–ì—É–º–æ—Ä/–Ü—Ä–æ–Ω—ñ—è (–¥—Ä—É–∂–Ω—è):** "–¢–∞–∫-—Ç–∞–∫, {game_nickname}, –±–∞—á—É, —Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ —Ñ–∞—Ä–º–∏—à –∫—Ä–∏–ø—ñ–≤, –∞ –π –ª–∞–π–∫–∏! {likes_received} ‚Äì —Ü–µ —Å–µ—Ä–π–æ–∑–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å!"
    *   **–ü–æ–≤–∞–≥–∞:** "–ó —Ç–∞–∫–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º, —è–∫ —É {game_nickname} ({highest_rank_season}), –∂–∞—Ä—Ç–∏ –≤–±—ñ–∫. –°–ø—Ä–∞–≤–∂–Ω—ñ–π –º–∞–π—Å—Ç–µ—Ä —Å–≤–æ—î—ó —Å–ø—Ä–∞–≤–∏."
    *   **–Ü–Ω—Ç—Ä–∏–≥–∞:** "–¶—ñ–∫–∞–≤–æ, {game_nickname} –∑ {location}, —Å–∫—ñ–ª—å–∫–∏ —â–µ —Ä–µ–∫–æ—Ä–¥—ñ–≤ —Ç–∏ –ø–ª–∞–Ω—É—î—à –ø–æ–±–∏—Ç–∏?"
3.  **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–≥—Ä–æ–≤–∏–π —Å–ª–µ–Ω–≥ –¥–æ—Ä–µ—á–Ω–æ:** "—Ç–∞—â–µ—Ä", "—ñ–º–±–∞", "—Ñ–∞—Ä–º–∏—Ç—å", "—Ä–æ–∑–Ω–æ—Å–∏—Ç—å –∫–∞—Ç–∫–∏", "–≤ —Ç–æ–ø—ñ", "—Å–∫—ñ–ª–æ–≤–∏–π" —Ç–æ—â–æ. –ê–ª–µ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏.
4.  **–£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å:** –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –±—É–ª–∏ –ø—Ä–æ "—Ç–∞—â–µ—Ä–∞", —Å–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥.
5.  **–ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º:** 2-5 —Ä–µ—á–µ–Ω—å –º–∞–∫—Å–∏–º—É–º.
6.  **–¢–Ü–õ–¨–ö–ò —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è:** –ë–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å —Ç–∏–ø—É "–ü—Ä–∏–≤—ñ—Ç, {user_name}!" —ñ –±–µ–∑ Markdown/HTML. –¢—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç.

–ü–û–ì–ê–ù–ò–ô –ü–†–ò–ö–õ–ê–î (—à–∞–±–ª–æ–Ω–Ω–æ): "{game_nickname} –∫—Ä—É—Ç–∏–π, –±–∞–≥–∞—Ç–æ –≥—Ä–∞—î, –≤–∏—Å–æ–∫–∏–π —Ä–∞–Ω–≥. –ú–æ–ª–æ–¥–µ—Ü—å!"
–î–û–ë–†–ò–ô –ü–†–ò–ö–õ–ê–î (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –¥–ª—è –≥—Ä–∞–≤—Ü—è "–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö" –∑ 100 –º–∞—Ç—á—ñ–≤, —Ä–∞–Ω–≥ –ï–ø—ñ–∫):
"–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö, —Ç–∏ —Ö–æ—á —ñ –Ω—ñ–Ω–¥–∑—è, –∞–ª–µ —Ç–≤–æ—ó 100 –∫–∞—Ç–æ–∫ –Ω–∞ –ï–ø—ñ–∫—É –≤–∂–µ –Ω–µ —Ç–∞–∫—ñ –π —Ç–∏—Ö—ñ! –ú–∞–±—É—Ç—å, —Ç–∞–ø–∫–∏ –¥—ñ–π—Å–Ω–æ —â–∞—Å–ª–∏–≤—ñ. –§–∞—Ä–º–∏—à —Ä–µ—Å–ø–µ–∫—Ç, —Ç–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"

–ó—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± –∫–æ–∂–µ–Ω –≥—Ä–∞–≤–µ—Ü—å –≤—ñ–¥—á—É–≤ —Å–µ–±–µ –æ—Å–æ–±–ª–∏–≤–∏–º!
"""

class MLBBChatGPT:
    """–ö–ª–∞—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å."""
    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∫–ª–∞—Å—É
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")


    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=60), # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Å—ñ—ó
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ MLBBChatGPT: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ GPT."""
        kyiv_tz = timezone(timedelta(hours=3))
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.3 üéÆ
## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang. –¢–≤–æ—è –≥–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ç–æ—á–Ω—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
–í–ê–ñ–õ–ò–í–û: –ù–µ –≤–∏–≥–∞–¥—É–π —ñ–º–µ–Ω–∞ –≥–µ—Ä–æ—ó–≤ –∞–±–æ –º–µ—Ö–∞–Ω—ñ–∫–∏. –Ø–∫—â–æ —Ç–∏ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –Ω–∞ 100% –≤ —ñ–º–µ–Ω—ñ –≥–µ—Ä–æ—è –∞–±–æ –¥–µ—Ç–∞–ª—ñ, –∫—Ä–∞—â–µ –∑–∞–∑–Ω–∞—á —Ü–µ.
## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (HTML, –í–ê–õ–Ü–î–ù–ò–ô HTML –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô).
## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô
### üéØ –°–¢–†–£–ö–¢–£–†–ê –¢–ê –ó–ú–Ü–°–¢:
1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2.  **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**:
    *   –ß—ñ—Ç–∫–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Å—É—Ç—ñ –∑–∞–ø–∏—Ç—É, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—Ä—É.
    *   –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤: –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π 2-3 –Ü–°–ù–£–Æ–ß–ò–•, –ê–ö–¢–£–ê–õ–¨–ù–ò–• –≥–µ—Ä–æ—ó–≤ Mobile Legends.
    *   –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ —Ä–µ–∞–ª—å–Ω—ñ –≥–µ—Ä–æ—ó —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º.
    *   –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ, –∑–≥–∞–¥–∞–π –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó.
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: –î–µ–∫—ñ–ª—å–∫–∞ –¥—ñ—î–≤–∏—Ö –ø–æ—Ä–∞–¥.
4.  **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ü–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–í–ê–õ–Ü–î–ù–ò–ô HTML):
-   –¢–Ü–õ–¨–ö–ò HTML: <b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>. –ó–ê–í–ñ–î–ò –ö–û–†–ï–ö–¢–ù–û –ó–ê–ö–†–ò–í–ê–ô –¢–ï–ì–ò.
-   –°–ø–∏—Å–∫–∏: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π "‚Ä¢ " –¥–ª—è –º–∞—Ä–∫–µ—Ä—ñ–≤ –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è, "  ‚ó¶ " –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä—ñ–≤–Ω—è.
-   –û–±—Å—è–≥: ~200-300 —Å–ª—ñ–≤.
-   –ï–º–æ–¥–∑—ñ: –¥–æ—Ä–µ—á–Ω–æ (ü¶∏‚Äç‚ôÇÔ∏è, üí°, ü§ù).
### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB (–¢–Ü–õ–¨–ö–ò –§–ê–ö–¢–ò–ß–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø):
-   **–ì–µ—Ä–æ—ó**: –¢–Ü–õ–¨–ö–ò –Ü–°–ù–£–Æ–ß–Ü –≥–µ—Ä–æ—ó, —ó—Ö –º–µ—Ö–∞–Ω—ñ–∫–∏, —Ä–æ–ª—ñ, –∫–æ–Ω—Ç—Ä–ø—ñ–∫–∏.
-   **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –†–∞–Ω–∫—ñ–Ω–≥, –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è, –ü–∞—Ç—á**: –∞–∫—Ç—É–∞–ª—å–Ω–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è.
### ‚ùå –ö–ê–¢–ï–ì–û–†–ò–ß–ù–û –ó–ê–ë–û–†–û–ù–ï–ù–û:
-   –í–ò–ì–ê–î–£–í–ê–¢–ò —ñ–º–µ–Ω–∞ –≥–µ—Ä–æ—ó–≤, –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ, –ø—Ä–µ–¥–º–µ—Ç–∏ –∞–±–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ —ñ–≥—Ä–æ–≤—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ. –¶–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ –ø—Ä–∞–≤–∏–ª–æ.
-   –ù–∞–¥–∞–≤–∞—Ç–∏ –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É –∞–±–æ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
-   Markdown, –ù–ï–ó–ê–ö–†–ò–¢–Ü HTML —Ç–µ–≥–∏ (—Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω —Å–∞–º –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —Ç–µ–≥–∏).
## –ü–†–ò–ö–õ–ê–î –°–¢–ò–õ–Æ (–∑–∞–ø–∏—Ç "–∫–æ–Ω—Ç—Ä–ø—ñ–∫ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏"):
"{greeting}, {user_name}! üëã
–•–∞—è–±—É—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–º —Å—É–ø–µ—Ä–Ω–∏–∫–æ–º, –∞–ª–µ —î –≥–µ—Ä–æ—ó, —è–∫—ñ –¥–æ–±—Ä–µ –π–æ–º—É –ø—Ä–æ—Ç–∏—Å—Ç–æ—è—Ç—å! ü§∫
ü¶∏‚Äç‚ôÇÔ∏è <b>–ö–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏:</b>
‚Ä¢ <b>–ö–∞–π—è (Kaja):</b> –ô–æ–≥–æ —É–ª—å—Ç—ñ–º–µ–π—Ç <i>"Divine Judgment"</i> –¥–æ–∑–≤–æ–ª—è—î —Å—Ö–æ–ø–∏—Ç–∏ –•–∞—è–±—É—Å—É –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥ —á–∞—Å –π–æ–≥–æ —Ç—ñ–Ω–µ–π —Ç–∞ –≤—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–æ –∫–æ–º–∞–Ω–¥–∏.
‚Ä¢ <b>–•—É—Ñ—Ä–∞ (Khufra):</b> –ô–æ–≥–æ –Ω–∞–≤–∏—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é, –æ—Å–æ–±–ª–∏–≤–æ <i>"Bouncing Ball"</i>, –º–æ–∂—É—Ç—å –∑—É–ø–∏–Ω–∏—Ç–∏ –•–∞—è–±—É—Å—É —Ç–∞ –Ω–µ –¥–∞—Ç–∏ –π–æ–º—É –≤—Ç–µ–∫—Ç–∏ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–Ω—ñ.
‚Ä¢ <b>–°–∞–±–µ—Ä (Saber):</b> –ó –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –±—ñ–ª–¥–æ–º, —É–ª—å—Ç—ñ–º–µ–π—Ç –°–∞–±–µ—Ä–∞ <i>"Triple Sweep"</i> –º–æ–∂–µ —à–≤–∏–¥–∫–æ –∑–Ω–∏—â–∏—Ç–∏ –•–∞—è–±—É—Å—É –¥–æ —Ç–æ–≥–æ, —è–∫ –≤—ñ–Ω –≤—Å—Ç–∏–≥–Ω–µ –∑–∞–≤–¥–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —à–∫–æ–¥–∏.
üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ü—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏ –≤–∞–∂–ª–∏–≤–∏–π —Ö–æ—Ä–æ—à–∏–π –≤—ñ–∂–Ω –Ω–∞ –∫–∞—Ä—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–∞ —Ä–µ–∞–∫—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –π–æ–≥–æ –ø–æ—è–≤—É.
–ü–∞–º'—è—Ç–∞–π, —â–æ —É—Å–ø—ñ—Ö –∑–∞–ª–µ–∂–∏—Ç—å –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –≥–µ—Ä–æ—è, –∞ –π –≤—ñ–¥ —Ç–≤–æ—ó—Ö –Ω–∞–≤–∏—á–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏! –£—Å–ø—ñ—Ö—ñ–≤! üëç"
## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"
–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ü–ê–ú'–Ø–¢–ê–ô: –ë–ï–ó –í–ò–ì–ê–î–û–ö, —Ç—ñ–ª—å–∫–∏ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –≥–µ—Ä–æ—ó —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –≤–∞–ª—ñ–¥–Ω–∏–π HTML):"""

    def _beautify_response(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT, –¥–æ–¥–∞—é—á–∏ –µ–º–æ–¥–∑—ñ —Ç–∞ HTML-—Ç–µ–≥–∏, –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å HTML."""
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }

        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°" # Default emoji
            # Check for more specific keys first
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    break
            else: # If no specific key matched, try general keys
                for key, emj in header_emojis.items():
                    if key in header_text.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"

        # –û–±—Ä–æ–±–∫–∞ Markdown-–ø–æ–¥—ñ–±–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (##, ###)
        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        
        # –û–±—Ä–æ–±–∫–∞ Markdown-–ø–æ–¥—ñ–±–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+[\-\*]\s+", "  ‚ó¶ ", text, flags=re.MULTILINE) # –î–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤ —Ä—è–¥–∫—ñ–≤
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        # –ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è HTML —Ç–µ–≥—ñ–≤ (b, i, code)
        tags_to_balance = ["b", "i", "code"]
        for tag in tags_to_balance:
            open_tag = f"<{tag}>"
            close_tag = f"</{tag}>"
            open_count = len(re.findall(re.escape(open_tag), text))
            close_count = len(re.findall(re.escape(close_tag), text))

            if open_count > close_count:
                missing_tags = open_count - close_count
                self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {missing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ {open_tag}. –î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å.")
                text += close_tag * missing_tags
            elif close_count > open_count:
                # Removing extra closing tags is more complex and risky to do automatically.
                # For now, just log it. A more robust HTML parser/balancer might be needed for complex cases.
                self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_count - open_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ {close_tag}.")

        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str: # –î–ª—è /go
        """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT (/go) –≤—ñ–¥ '{user_name}': '{user_query}'")
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1", # –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            "temperature": 0.65, # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (0.0 - 1.0)
            "top_p": 0.9,       # –Ø–¥–µ—Ä–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞
            "presence_penalty": 0.3, # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Ç–µ–º
            "frequency_penalty": 0.2  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤/—Ñ—Ä–∞–∑
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ–∫—Å—Ç—É –¥–ª—è GPT: temperature={payload['temperature']}")
        try:
            if not self.session or self.session.closed:
                 self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                 # Recreate session with its specific needs if it was closed
                 self.session = ClientSession(
                    timeout=ClientTimeout(total=45), # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {html.escape(user_name)}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status})."
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return f"–í–∏–±–∞—á, {html.escape(user_name)}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø."
                
                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT (–ø–µ—Ä—à—ñ 100): '{raw_gpt_text[:100]}'")
                return self._beautify_response(raw_gpt_text)
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (—Ç–µ–∫—Å—Ç) –¥–ª—è: '{user_query}'")
            return f"–í–∏–±–∞—á, {html.escape(user_name)}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥."
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –¥–ª—è '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {html.escape(user_name)} üòï."

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Vision API."""
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: '{prompt[:70]}...'")
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        payload = {
            "model": "gpt-4o-mini", # –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", 
                         "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}
                        }
                    ]
                }
            ],
            "max_tokens": 1500,
            "temperature": 0.3 # –ù–∏–∂—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Vision API: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}, temperature={payload['temperature']}")

        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è Vision API, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤,
            # —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∞ —Å–µ—Å—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∞–±–æ –º–∞—î —ñ–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.
            # –ê–±–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ self.session –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–±–æ—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, —è–∫—â–æ self.session –≤–∂–µ —ñ—Å–Ω—É—î —ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –º–æ–∂–Ω–∞ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
            # –ê–ª–µ –¥–ª—è —ñ–∑–æ–ª—è—Ü—ñ—ó –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, –æ–∫—Ä–µ–º–∞ —Å–µ—Å—ñ—è –∞–±–æ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∫—Ä–∞—â–∏–º.
            # –¢—É—Ç —è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.
            async with ClientSession(headers={"Authorization": f"Bearer {self.api_key}"}) as temp_session: # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ Authorization, Content-Type –±—É–¥–µ –≤ post
                async with temp_session.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers=headers, # Content-Type –≤–∞–∂–ª–∏–≤–∏–π —Ç—É—Ç
                    json=payload,
                    timeout=ClientTimeout(total=90) # –ë—ñ–ª—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å
                ) as response:
                    return await self._handle_vision_response(response)
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API Timeout –ø–æ–º–∏–ª–∫–∞.")
            return {"error": "–ó–∞–ø–∏—Ç –¥–æ Vision API –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}


    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API."""
        if response.status == 200:
            try:
                result = await response.json()
            except aiohttp.ContentTypeError: # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ JSON
                raw_text_response = await response.text()
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {raw_text_response[:300]}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": raw_text_response}

            content = result.get("choices", [{}])[0].get("message", {}).get("content")
            if content:
                self.class_logger.info(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): {content[:100]}")
                # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–ª—É—á–µ–Ω–Ω—è JSON, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ –≤—ñ–Ω –Ω–µ –æ–±—Ä–∞–º–ª–µ–Ω–∏–π ```json ... ```
                json_str = content.strip()
                if json_str.startswith("```json"):
                    json_str = json_str[len("```json"):].strip()
                if json_str.endswith("```"):
                    json_str = json_str[:-len("```")].strip()
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ JSON –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–π
                # –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–æ/–ø—ñ—Å–ª—è JSON –æ–±'—î–∫—Ç–∞
                if not json_str.startswith("{") and "{" in json_str:
                    json_str = json_str[json_str.find("{"):]
                if not json_str.endswith("}") and "}" in json_str:
                    json_str = json_str[:json_str.rfind("}")+1]

                try:
                    return json.loads(json_str)
                except json.JSONDecodeError as e:
                    self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ Vision API: {e}. –†—è–¥–æ–∫: '{json_str[:300]}'")
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π content, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –ø–æ–±–∞—á–∏—Ç–∏, —â–æ —Å–∞–º–µ –ø—Ä–∏–π—à–ª–æ
                    return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API.", "raw_response": content}
            else:
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}
        else:
            error_text = await response.text()
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text[:300]}")
            return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_text[:200]} # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–º–∏–ª–∫–∏

    async def get_profile_description(self, user_name: str, profile_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Vision API."""
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name}'.")

        # –ï–∫—Ä–∞–Ω—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –≤ –ø—Ä–æ–º–ø—Ç, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —è–∫ —î
        # –ê–ª–µ –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ f-string, Python –ø–æ–¥–±–∞—î –ø—Ä–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ —Ä—è–¥–æ–∫.
        # –í–∞–∂–ª–∏–≤–æ, —â–æ–± PROFILE_DESCRIPTION_PROMPT_TEMPLATE –±—É–≤ –∑–∞—Ö–∏—â–µ–Ω–∏–π –≤—ñ–¥ —ñ–Ω'—î–∫—Ü—ñ–π, —è–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ.
        # –î–ª—è –Ω–∞—à–æ–≥–æ –≤–∏–ø–∞–¥–∫—É, –¥–∞–Ω—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∑ Vision API, —Ç–æ–º—É —Ä–∏–∑–∏–∫ –º–µ–Ω—à–∏–π, –∞–ª–µ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å –Ω–µ –∑–∞–≤–∞–¥–∏—Ç—å.
        escaped_profile_data = {
            k: html.escape(str(v)) if v is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" 
            for k, v in profile_data.items()
        }

        system_prompt_text = PROFILE_DESCRIPTION_PROMPT_TEMPLATE.format(
            user_name=html.escape(user_name), # –ï–∫—Ä–∞–Ω—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            game_nickname=escaped_profile_data.get("game_nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            highest_rank_season=escaped_profile_data.get("highest_rank_season", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            matches_played=escaped_profile_data.get("matches_played", "N/A"),
            likes_received=escaped_profile_data.get("likes_received", "N/A"),
            location=escaped_profile_data.get("location", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            squad_name=escaped_profile_data.get("squad_name", "–ù–µ–º–∞—î"), # "–ù–µ–º–∞—î" —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        )
        payload = {
            "model": "gpt-4.1", # –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 300,  # –î–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å—É
            "temperature": 0.7, # –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–ø–∏—Å—É
            "top_p": 0.9,
            "presence_penalty": 0.2,
            "frequency_penalty": 0.2
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é: temp={payload['temperature']}, max_tokens={payload['max_tokens']}")

        try:
            if not self.session or self.session.closed:
                 self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                 self.session = ClientSession(
                    timeout=ClientTimeout(total=30), # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): {response.status} - {error_text}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å.</i>" # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ HTML-–±–µ–∑–ø–µ—á–Ω–∏–π —Ç–µ–∫—Å—Ç
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –≤—ñ–¥ –®–Ü.</i>"

                description_text = result["choices"][0]["message"]["content"].strip()
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é: '{description_text[:100]}'")
                # –ü—Ä–æ–º–ø—Ç –≤–∏–º–∞–≥–∞—î "–¢–Ü–õ–¨–ö–ò —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è... –ë–µ–∑ Markdown/HTML."
                # –¢–æ–º—É –º–∏ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ HTML —Ç—É—Ç, —è–∫—â–æ GPT –¥–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.
                # –û–¥–Ω–∞–∫, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç –±—É–¥–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ HTML –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
                # –±—É–¥—å-—è–∫—ñ —Å–∏–º–≤–æ–ª–∏, —â–æ –º–∞—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ HTML (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <, >, &),
                # –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –µ–∫—Ä–∞–Ω–æ–≤–∞–Ω—ñ –Ω–∞ –µ—Ç–∞–ø—ñ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
                # –ö—Ä–∞—â–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç, –∞ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è–º –∑–∞–π–º–∞—Ç–∏—Å—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ñ.
                # –ê–ª–µ –¥–ª—è –±–µ–∑–ø–µ–∫–∏, —è–∫—â–æ GPT —Ä–∞–ø—Ç–æ–º –¥–æ–¥–∞—Å—Ç—å HTML, –∫—Ä–∞—â–µ –π–æ–≥–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏.
                # –í—Ä–∞—Ö–æ–≤—É—é—á–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é "–±–µ–∑ HTML", –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Ç–µ–∫—Å—Ç —á–∏—Å—Ç–∏–π.
                return description_text 
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é) –¥–ª—è: '{user_name}'")
            return "<i>–û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ...</i>"
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é) –¥–ª—è '{user_name}': {e}")
            return "<i>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É.</i>"
