import asyncio
import base64
import html
import json
import logging
import re
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any

import aiohttp
from aiohttp import ClientSession, ClientTimeout

# === –û–ù–û–í–õ–ï–ù–Ü –ü–†–û–ú–ü–¢–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ (VISION API) ===
PROFILE_SCREENSHOT_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é. –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "game_nickname": "string –∞–±–æ null",
  "mlbb_id_server": "string 'ID (SERVER)' –∞–±–æ null (–ø—Ä–∏–∫–ª–∞–¥: '123456789 (1234)')",
  "highest_rank_season": "string (–ø—Ä–∏–∫–ª–∞–¥: '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 ‚òÖ') –∞–±–æ null",
  "matches_played": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "likes_received": "int –∞–±–æ null (–∑–Ω–∏–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)",
  "location": "string –∞–±–æ null",
  "squad_name": "string –∞–±–æ null"
}
–í–ê–ñ–õ–ò–í–û:
1.  **ID/Server (mlbb_id_server):** –®—É–∫–∞–π –±—ñ–ª—è —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é. –§–æ—Ä–º–∞—Ç 'ID (SERVER)'.
2.  **–ú–∞—Ç—á—ñ (Matches Played) / –õ–∞–π–∫–∏ (Likes Received):** –ó–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –í–ù–ò–ó–£. –ù–µ –ø–ª—É—Ç–∞–π –∑ –æ—á–∫–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ.
3.  **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥ (Highest Rank):** –ü—ñ–¥ –Ω–∞–ø–∏—Å–æ–º "Highest Rank". –í–∫–ª—é—á–∞–π –∑—ñ—Ä–∫–∏/–æ—á–∫–∏.
4.  **–°–∫–≤–∞–¥ (Squad Name):** –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞.
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

PLAYER_STATS_PROMPT = """
–¢–∏ ‚Äî MLBB –∞–Ω–∞–ª—ñ—Ç–∏–∫. –í–∏—Ç—è–≥–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ "Statistics". –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON.
{
  "stats_filter_type": "string –∞–±–æ null ('All Seasons', 'Current Season')",
  "main_indicators": {
    "matches_played": "int –∞–±–æ null",
    "win_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "mvp_count": "int –∞–±–æ null"
  },
  "achievements_left_column": {
    "legendary_count": "int –∞–±–æ null", "maniac_count": "int –∞–±–æ null", "double_kill_count": "int –∞–±–æ null",
    "most_kills_in_one_game": "int –∞–±–æ null", "longest_win_streak": "int –∞–±–æ null",
    "highest_dmg_per_min": "int –∞–±–æ null", "highest_gold_per_min": "int –∞–±–æ null"
  },
  "achievements_right_column": {
    "savage_count": "int –∞–±–æ null", "triple_kill_count": "int –∞–±–æ null", "mvp_loss_count": "int –∞–±–æ null",
    "most_assists_in_one_game": "int –∞–±–æ null", "first_blood_count": "int –∞–±–æ null",
    "highest_dmg_taken_per_min": "int –∞–±–æ null"
  },
  "details_panel": {
    "kda_ratio": "float –∞–±–æ null", "teamfight_participation_rate": "float –∞–±–æ null (—á–∏—Å–ª–æ, –±–µ–∑ '%')",
    "avg_gold_per_min": "int –∞–±–æ null", "avg_hero_dmg_per_min": "int –∞–±–æ null",
    "avg_deaths_per_match": "float –∞–±–æ null", "avg_turret_dmg_per_match": "int –∞–±–æ null"
  }
}
–í–ê–ñ–õ–ò–í–û:
1.  **–ß–∏—Å–ª–∞:** –£–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π –∫–æ–∂–Ω—É —Ü–∏—Ñ—Ä—É.
2.  **Win Rate / Teamfight Participation:** –¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ (float), –±–µ–∑ '%'.
3.  **–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** "main_indicators" - –∑–≤–µ—Ä—Ö—É; "achievements" - —Å–ø–∏—Å–∫–∏ –Ω–∏–∂—á–µ; "details_panel" - —Å–ø—Ä–∞–≤–∞.
4.  **–§—ñ–ª—å—Ç—Ä:** –í–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ('All Seasons'/'Current Season').
5.  **–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `null`.
–¢–æ—á–Ω—ñ—Å—Ç—å —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é.
"""

# === –û–ù–û–í–õ–ï–ù–Ü –ü–†–û–ú–ü–¢–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–Ü–á –¢–ï–ö–°–¢–û–í–ò–• –û–ü–ò–°–Ü–í (GPT-4) ===
PROFILE_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä MLBB. –°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ—Ç–µ–ø–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä (2-4 —Ä–µ—á–µ–Ω–Ω—è) –ø—Ä–æ –≥—Ä–∞–≤—Ü—è.
–î–∞–Ω—ñ:
- –ù—ñ–∫: {game_nickname}
- –†–∞–Ω–≥: {highest_rank_season}
- –ú–∞—Ç—á—ñ: {matches_played}
- –õ–∞–π–∫–∏: {likes_received}
- –õ–æ–∫–∞—Ü—ñ—è: {location}
- –°–∫–≤–∞–¥: {squad_name}

–ó–ê–í–î–ê–ù–ù–Ø:
1.  **–ó–Ω–∞–π–¥–∏ "—Ñ—ñ—à–∫—É":** –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—Ä–∞–∂–∞—é—á–∏—Ö –¥–∞–Ω–∏—Ö, –Ω—ñ–∫–Ω–µ–π–º—ñ, —Å–∫–≤–∞–¥—ñ, –∞–±–æ –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ –æ–±—ñ–≥—Ä–∞–π –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.
2.  **–°—Ç–∏–ª—å:** –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è, –≥—É–º–æ—Ä/—ñ—Ä–æ–Ω—ñ—è (–¥—Ä—É–∂–Ω—è), –ø–æ–≤–∞–≥–∞, —ñ–Ω—Ç—Ä–∏–≥–∞. –ö–æ–º–±—ñ–Ω—É–π.
3.  **–°–ª–µ–Ω–≥:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Ä–µ—á–Ω–æ ("—Ç–∞—â–µ—Ä", "—ñ–º–±–∞", "—Ñ–∞—Ä–º–∏—Ç—å").
4.  **–£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å:** –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.
5.  **–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢:** –ë–µ–∑ Markdown/HTML, –±–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å.

–ü—Ä–∏–∫–ª–∞–¥ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –¥–ª—è "–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö", 100 –º–∞—Ç—á—ñ–≤, –ï–ø—ñ–∫):
"–ù—ñ–Ω–¥–∑—è–í—Ç–∞–ø–∫–∞—Ö, —Ç–≤–æ—ó 100 –∫–∞—Ç–æ–∫ –Ω–∞ –ï–ø—ñ–∫—É –≤–∂–µ –Ω–µ —Ç–∞–∫—ñ –π —Ç–∏—Ö—ñ! –ú–∞–±—É—Ç—å, —Ç–∞–ø–∫–∏ –¥—ñ–π—Å–Ω–æ —â–∞—Å–ª–∏–≤—ñ."

–ó—Ä–æ–±–∏ –≥—Ä–∞–≤—Ü—è –æ—Å–æ–±–ª–∏–≤–∏–º!
"""

PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ MLBB. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (3-5 —Ä–µ—á–µ–Ω—å) –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è {user_name}.
–î–∞–Ω—ñ ({stats_filter_type}):
- –ú–∞—Ç—á—ñ: {matches_played}, –ü–µ—Ä–µ–º–æ–≥–∏: {win_rate}%, MVP: {mvp_count} ({mvp_rate_percent}%)
- KDA: {kda_ratio}, –£—á–∞—Å—Ç—å —É –±–æ—è—Ö: {teamfight_participation_rate}%
- –ó–æ–ª–æ—Ç–æ/—Ö–≤: {avg_gold_per_min}
- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ: {legendary_count}, –î–∏–∫—É–Ω—Å—Ç–≤–∞: {savage_count} (—á–∞—Å—Ç–æ—Ç–∞: {savage_frequency}/1000), –ú–∞–Ω—ñ—è–∫–∏: {maniac_count}
- –°–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {longest_win_streak}, –ú–∞–∫—Å. –≤–±–∏–≤—Å—Ç–≤: {most_kills_in_one_game}
- –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ (—à–∫–æ–¥–∞/–∑–æ–ª–æ—Ç–æ): {damage_per_gold_ratio}
- –ß–∞—Å—Ç–∫–∞ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö: {mvp_win_share_percent}%
- –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–º–æ–≥: {total_wins}

–ó–ê–í–î–ê–ù–ù–Ø:
1.  **–ó–Ω–∞–π–¥–∏ "—Ä–æ–¥–∑–∏–Ω–∫—É":** –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∏—Å–æ–∫–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (Win Rate, KDA, MVP –†–µ–π—Ç–∏–Ω–≥), –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Ç—á—ñ–≤/–ø–µ—Ä–µ–º–æ–≥, Savage (–æ—Å–æ–±–ª–∏–≤–æ —á–∞—Å—Ç–æ—Ç–∞), –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–æ–ª–æ—Ç–∞, —á–∞—Å—Ç—Ü—ñ MVP —É –ø–µ—Ä–µ–º–æ–≥–∞—Ö.
2.  **–°—Ç–∏–ª—å:** –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π, –ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–∏–π, –∑ –¥–æ—Ä–µ—á–Ω–∏–º —ñ–≥—Ä–æ–≤–∏–º —Å–ª–µ–Ω–≥–æ–º.
3.  **–¢–Ü–õ–¨–ö–ò –¢–ï–ö–°–¢:** –ë–µ–∑ Markdown/HTML.

–ü—Ä–∏–∫–ª–∞–¥:
"–û–≥–æ, {user_name}, —Ç–≤–æ—ó {matches_played} –º–∞—Ç—á—ñ–≤ —É '{stats_filter_type}' –≤—Ä–∞–∂–∞—é—Ç—å! –ú–∞—Ç–∏ {mvp_rate_percent}% MVP-—Ä–µ–π—Ç ‚Äì —Ü–µ —Å–∏–ª—å–Ω–æ! –ê –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ {damage_per_gold_ratio} –ø–æ–∫–∞–∑—É—î, —â–æ —Ç–∏ –∑–Ω–∞—î—à, —è–∫ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ–∞—Ä–º –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É. –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"

–ü—ñ–¥–∫—Ä–µ—Å–ª–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è!
"""

# === –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø /GO ===
OPTIMIZED_SYSTEM_PROMPT_TEMPLATE = """# MLBB –ï–ö–°–ü–ï–†–¢ IUI üéÆ
–¢–∏ ‚Äì IUI, AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç –≥—Ä–∏ Mobile Legends: Bang Bang. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äì –Ω–∞–¥–∞–≤–∞—Ç–∏ –≤–∏—á–µ—Ä–ø–Ω—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

**–ö–æ–Ω—Ç–µ–∫—Å—Ç –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:**
- **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_name_escaped}
- **–ß–∞—Å:** {greeting} ({time_str})
- **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** Telegram-–±–æ—Ç

**–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ:**
1.  **–ú–æ–≤–∞:** –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞, –≥—Ä–∞–º–æ—Ç–Ω–æ —Ç–∞ —Å—Ç–∏–ª—ñ—Å—Ç–∏—á–Ω–æ –≤—ñ—Ä–Ω–æ.
2.  **–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (HTML):**
    *   `<b>–∂–∏—Ä–Ω–∏–π</b>` –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤, –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤.
    *   `<i>–∫—É—Ä—Å–∏–≤</i>` –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—ñ–≤, –Ω–∞–∑–≤.
    *   `<code>—Ç–µ—Ö.—Ç–µ—Ä–º—ñ–Ω–∏</code>` –¥–æ—Ä–µ—á–Ω–æ.
    *   –ï–º–æ–¥–∑—ñ: –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –Ω–∞—Å—Ç—Ä–æ—é (–¥–∏–≤. –Ω–∏–∂—á–µ).
    *   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —á—ñ—Ç–∫—ñ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –µ–º–æ–¥–∑—ñ</b>, —Å–ø–∏—Å–∫–∏ (‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π –ø—É–Ω–∫—Ç,  ‚ó¶ –ü—ñ–¥–ø—É–Ω–∫—Ç).
3.  **–ó–º—ñ—Å—Ç:** –¢–æ—á–Ω—ñ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å, –≥–ª–∏–±–∏–Ω–∞. –ü–æ—è—Å–Ω—é–π —Å–∫–ª–∞–¥–Ω–µ –ø—Ä–æ—Å—Ç–æ. –ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∏–º: —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ—á—ñ—Ç–∫–∏–π, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏. **–ì–æ–≤–æ—Ä—è—á–∏ –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –Ω–µ –∑–≥–∞–¥—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–æ–∫–∏ —Å–≤–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É–Ω–∏–∫–∞–π —Ñ—Ä–∞–∑ —Ç–∏–ø—É '—Å—Ç–∞–Ω–æ–º –Ω–∞ 2024 —Ä—ñ–∫' –∞–±–æ '–≤ —á–µ—Ä–≤–Ω—ñ 2024'). –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫ –Ω–∞ "–ø–æ—Ç–æ—á–Ω—É" –∞–±–æ "–∑–∞–≥–∞–ª—å–Ω–æ–≤—ñ–¥–æ–º—É" –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–∞—Ç —Ç–≤–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.**
4.  **–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è:** –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —ñ–º'—è.

**–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–¢–µ–º–∏):**
- **–ì–µ—Ä–æ—ó:** –∞–Ω–∞–ª—ñ–∑, –∑–±—ñ—Ä–∫–∏, –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏, —Ç–∞–∫—Ç–∏–∫–∏.
- **–ü—Ä–µ–¥–º–µ—Ç–∏:** –µ—Ñ–µ–∫—Ç–∏, –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è.
- **–Ü–≥—Ä–æ–≤—ñ –ú–µ—Ö–∞–Ω—ñ–∫–∏:** —Ñ–∞—Ä–º, —Ä–æ—Ç–∞—Ü—ñ—ó, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ä—Ç–∏, –æ–±'—î–∫—Ç–∏–≤–∏, –∫–æ–º–∞–Ω–¥–Ω—ñ –±–æ—ó.
- **–ú–µ—Ç–∞-–≥—Ä–∞:** –ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞, –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
- **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ –¢–∞–∫—Ç–∏–∫–∏:** –¥—Ä–∞—Ñ—Ç, –ª–∞–π–Ω—ñ–Ω–≥, –º–∞–∫—Ä–æ/–º—ñ–∫—Ä–æ.
- **–†–∞–Ω–≥–æ–≤–∞ –°–∏—Å—Ç–µ–º–∞:** –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É.

**–ï–º–æ–¥–∑—ñ-–≥–∞–π–¥ (–≤–∏–±—ñ—Ä–∫–æ–≤–æ):** üí° –ø–æ—Ä–∞–¥–∞, üéØ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è, ‚öîÔ∏è —Ç–∞–∫—Ç–∏–∫–∞, üõ°Ô∏è –ø—Ä–µ–¥–º–µ—Ç–∏/–∑–∞—Ö–∏—Å—Ç, üí∞ —Ñ–∞—Ä–º, üìà –∞–Ω–∞–ª—ñ–∑/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, ü¶∏‚Äç‚ôÇÔ∏è –≥–µ—Ä–æ—ó.

**–ó–ê–ü–ò–¢ –í–Ü–î {user_name_escaped}:**
"{user_query_escaped}"

–¢–≤–æ—è –¥–µ—Ç–∞–ª—å–Ω–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ü–ê–ú'–Ø–¢–ê–ô –ü–†–û HTML, –ï–ú–û–î–ó–Ü):
"""

# === –ö–õ–ê–° –î–õ–Ø –í–ó–ê–Ñ–ú–û–î–Ü–á –ó OPENAI ===

class MLBBChatGPT:
    TEXT_MODEL = "gpt-4.1"
    VISION_MODEL = "gpt-4.1-mini"

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.class_logger.info(f"MLBBChatGPT —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –¢–µ–∫—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: {self.TEXT_MODEL}, Vision –º–æ–¥–µ–ª—å: {self.VISION_MODEL}")

    async def __aenter__(self) -> "MLBBChatGPT":
        self.session = ClientSession(
            timeout=ClientTimeout(total=90),
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
        return self

    async def __aexit__(self, exc_type: Optional[type], exc_val: Optional[BaseException], exc_tb: Optional[Any]) -> None:
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("Aiohttp —Å–µ—Å—ñ—é –∑–∞–∫—Ä–∏—Ç–æ.")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ MLBBChatGPT –ø—ñ–¥ —á–∞—Å –≤–∏—Ö–æ–¥—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt_optimized(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_escaped = html.escape(user_query)
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UTC –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä—ñ–∫ –Ω–µ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            current_time_utc = datetime.now(timezone.utc)
            current_hour = current_time_utc.hour
            # –§–æ—Ä–º–∞—Ç —á–∞—Å—É –±–µ–∑ —Ä–æ–∫—É
            time_str = current_time_utc.strftime('%H:%M (%Z)')


            # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ UTC —á–∞—Å—É, —è–∫—â–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É
            if 5 <= current_hour < 12: # –ì–æ–¥–∏–Ω–∏ –¥–ª—è UTC
                greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            elif 12 <= current_hour < 17:
                greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
            elif 17 <= current_hour < 22:
                greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            else:
                greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        except Exception as e:
            self.class_logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")
            greeting = "–í—ñ—Ç–∞—é"
            time_str = "–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"


        system_prompt = OPTIMIZED_SYSTEM_PROMPT_TEMPLATE.format(
            user_name_escaped=user_name_escaped,
            greeting=greeting,
            time_str=time_str,
            user_query_escaped=user_query_escaped
        )
        self.class_logger.debug(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç. –î–æ–≤–∂–∏–Ω–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª—ñ–≤.")
        return system_prompt

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        self.class_logger.warning("_create_smart_prompt –≤–∏–∫–ª–∏–∫–∞–Ω–æ, –∞–ª–µ _create_smart_prompt_optimized —î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º.")
        try:
            kyiv_tz = timezone(timedelta(hours=3))
            current_time_kyiv = datetime.now(kyiv_tz)
            current_hour = current_time_kyiv.hour
            time_str = current_time_kyiv.strftime('%H:%M') # –ë–µ–∑ —Ä–æ–∫—É

            if 5 <= current_hour < 12:
                greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            elif 12 <= current_hour < 17:
                greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
            elif 17 <= current_hour < 22:
                greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            else:
                greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        except Exception as e:
            self.class_logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é UTC: {e}")
            current_time_utc = datetime.now(timezone.utc)
            greeting = "–í—ñ—Ç–∞—é"
            time_str = current_time_utc.strftime('%H:%M UTC') # –ë–µ–∑ —Ä–æ–∫—É

        # –°—Ç–∞—Ä–∏–π –¥–æ–≤–≥–∏–π –ø—Ä–æ–º–ø—Ç (—Å–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
        system_prompt = f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.4 üéÆ
...
## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- **–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** {html.escape(user_name)}
- **–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:** {greeting.lower()} ({time_str}) 
...
## –ó–ê–ü–ò–¢ –í–Ü–î {html.escape(user_name)}: "{html.escape(user_query)}"
–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ü–ê–ú'–Ø–¢–ê–ô –ü–†–û HTML, –ï–ú–û–î–ó–Ü –¢–ê –°–¢–†–£–ö–¢–£–†–£):
"""
        self.class_logger.debug(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –°–¢–ê–†–ò–ô —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è /go. –î–æ–≤–∂–∏–Ω–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª—ñ–≤.")
        return system_prompt


    def _beautify_response(self, text: str) -> str:
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°", "–ø—Ä–µ–¥–º–µ—Ç": "üõ°Ô∏è", "–∑–±—ñ—Ä–∫–∞": "üõ†Ô∏è",
            "–∞–Ω–∞–ª—ñ–∑": "üìä", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìà", "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è": "‚öôÔ∏è", "–±–∞–ª–∞–Ω—Å": "‚öñÔ∏è"
        }

        def replace_header(match: re.Match) -> str:
            header_text = match.group(1).strip(": ").capitalize()
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞", "–ø—Ä–µ–¥–º–µ—Ç", "–∑–±—ñ—Ä–∫–∞"]
            best_emoji = "üí°"

            found_specific = False
            for key in specific_keys:
                if key in header_text.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    found_specific = True
                    break
            if not found_specific:
                for key_general, emj in header_emojis.items():
                    if key_general in header_text.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"

        text = re.sub(r"^(?:##|###)\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+[\-\*]\s+", "  ‚ó¶ ", text, flags=re.MULTILINE)
        text = re.sub(r"\n{3,}", "\n\n", text)

        tags_to_balance = ["b", "i", "code"]
        for tag in tags_to_balance:
            open_tag_pattern = re.compile(re.escape(f"<{tag}>"))
            close_tag_pattern = re.compile(re.escape(f"</{tag}>"))
            open_tags = [m.start() for m in open_tag_pattern.finditer(text)]
            close_tags = [m.start() for m in close_tag_pattern.finditer(text)]
            open_count = len(open_tags)
            close_count = len(close_tags)

            if open_count > close_count:
                missing_tags_count = open_count - close_count
                text += f"</{tag}>" * missing_tags_count
                self.class_logger.warning(f"Beautify: –î–æ–¥–∞–Ω–æ {missing_tags_count} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>' –≤ –∫—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç—É.")
            elif close_count > open_count:
                 self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_count - open_count} –∑–∞–π–≤–∏—Ö –∑–∞–∫—Ä–∏–≤–∞—é—á–∏—Ö —Ç–µ–≥—ñ–≤ '</{tag}>'. –ó–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω.")
        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        user_name_escaped = html.escape(user_name)
        user_query_for_payload = html.escape(user_query)

        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT (/go) –≤—ñ–¥ '{user_name_escaped}': '{user_query[:100]}...' (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç)")

        system_prompt = self._create_smart_prompt_optimized(user_name, user_query)

        payload = {
            "model": self.TEXT_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query_for_payload}
            ],
            "max_tokens": 1500,
            "temperature": 0.6,
            "top_p": 0.9,
            "presence_penalty": 0.2,
            "frequency_penalty": 0.1
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è GPT (/go) –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º: –º–æ–¥–µ–ª—å={payload['model']}, temperature={payload['temperature']}, max_tokens={payload['max_tokens']}")

        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è GPT (/go) –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_openai_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è GPT (/go) –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _execute_openai_request(self, session: ClientSession, payload: Dict[str, Any], user_name_for_error_msg: str) -> str:
        try:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload,
            ) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"OpenAI API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_details}")
                    return f"–í–∏–±–∞—á, {user_name_for_error_msg}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status})."

                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - {response_data}")
                    return f"–í–∏–±–∞—á, {user_name_for_error_msg}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø."

                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT (–ø–µ—Ä—à—ñ 100): '{content[:100]}'")
                return self._beautify_response(content)

        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", exc_info=True)
            return f"–í–∏–±–∞—á, {user_name_for_error_msg}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –®–Ü üåê. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout –¥–ª—è –∑–∞–ø–∏—Ç—É.")
            return f"–í–∏–±–∞—á, {user_name_for_error_msg}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥."
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ GPT: {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name_for_error_msg} üòï."

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: '{prompt[:70].replace('\n', ' ')}...'")
        payload = {
            "model": self.VISION_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url",
                         "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}
                        }
                    ]
                }
            ],
            "max_tokens": 2500,
            "temperature": 0.15
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Vision API: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}, temperature={payload['temperature']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è Vision API –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            async with current_session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload,
            ) as response:
                return await self._handle_vision_response(response)
        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", exc_info=True)
            return {"error": "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Vision API.", "details": str(e)}
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API Timeout –ø–æ–º–∏–ª–∫–∞.")
            return {"error": "–ó–∞–ø–∏—Ç –¥–æ Vision API –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è Vision API –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        response_text = await response.text()
        try:
            if response.status != 200:
                self.class_logger.error(f"Vision API HTTP –ø–æ–º–∏–ª–∫–∞: {response.status} - {response_text[:300]}")
                try:
                    error_data = json.loads(response_text)
                    error_message = error_data.get("error", {}).get("message", response_text)
                except json.JSONDecodeError:
                    error_message = response_text
                return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_message[:200]}
            result = json.loads(response_text)
        except json.JSONDecodeError:
            self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:300]}")
            return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": response_text}

        content = result.get("choices", [{}])[0].get("message", {}).get("content")
        if not content:
            self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
            return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}

        self.class_logger.info(f"Vision API —Å–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (–ø–µ—Ä—à—ñ 150 —Å–∏–º–≤–æ–ª—ñ–≤): {content[:150].replace('\n', ' ')}")
        json_str = content.strip()
        match = re.search(r"```json\s*(\{.*?\})\s*```", json_str, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            start_brace = json_str.find("{")
            end_brace = json_str.rfind("}")
            if start_brace != -1 and end_brace != -1 and end_brace > start_brace:
                json_str = json_str[start_brace : end_brace + 1]
            else:
                self.class_logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π JSON –±–ª–æ–∫ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Vision API. –ö–æ–Ω—Ç–µ–Ω—Ç: '{content[:300]}'")
                return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ª—É—á–∏—Ç–∏ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Vision API.", "raw_response": content}
        try:
            parsed_json = json.loads(json_str)
            self.class_logger.info(f"Vision API JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ.")
            return parsed_json
        except json.JSONDecodeError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ Vision API: {e}. –†—è–¥–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É: '{json_str[:300]}'")
            return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API (–ø–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è).", "raw_response": content}

    async def get_profile_description(self, user_name: str, profile_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name_escaped}'.")
        escaped_profile_data = {
            k: html.escape(str(v)) if v is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            for k, v in profile_data.items()
        }

        template_payload = {
            "user_name": user_name_escaped,
            "game_nickname": escaped_profile_data.get("game_nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "highest_rank_season": escaped_profile_data.get("highest_rank_season", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "matches_played": escaped_profile_data.get("matches_played", "N/A"),
            "likes_received": escaped_profile_data.get("likes_received", "N/A"),
            "location": escaped_profile_data.get("location", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "squad_name": escaped_profile_data.get("squad_name", "–ù–µ–º–∞—î"),
        }

        system_prompt_text = PROFILE_DESCRIPTION_PROMPT_TEMPLATE.format(**template_payload)

        payload = {
            "model": self.TEXT_MODEL,
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 200,
            "temperature": 0.75,
            "top_p": 0.9,
            "presence_penalty": 0.1,
            "frequency_penalty": 0.1
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é: –º–æ–¥–µ–ª—å={payload['model']}, temp={payload['temperature']}, max_tokens={payload['max_tokens']}")
        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True
        try:
            return await self._execute_description_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–∫—Ä–∏—Ç–æ.")

    async def _execute_description_request(self, session: ClientSession, payload: Dict[str, Any], user_name_for_error_msg: str) -> str:
        try:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload,
            ) as response:
                response_data = await response.json()
                if response.status != 200:
                    error_details = response_data.get("error", {}).get("message", str(response_data))
                    self.class_logger.error(f"OpenAI API HTTP –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å): {response.status} - {error_details}")
                    return f"<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Å –¥–ª—è {user_name_for_error_msg} (–∫–æ–¥: {response.status}).</i>"

                content = response_data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å): –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - {response_data}")
                    return f"<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –≤—ñ–¥ –®–Ü –¥–ª—è {user_name_for_error_msg}.</i>"

                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å (–ø–µ—Ä—à—ñ 100): '{content[:100]}'")
                return content.strip()

        except aiohttp.ClientConnectionError as e:
            self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è (–æ–ø–∏—Å): {e}", exc_info=True)
            return f"<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –®–Ü –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É ({user_name_for_error_msg}).</i>"
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (–æ–ø–∏—Å) –¥–ª—è: '{user_name_for_error_msg}'")
            return f"<i>–û–ø–∏—Å –¥–ª—è {user_name_for_error_msg} –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ...</i>"
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å) –¥–ª—è '{user_name_for_error_msg}': {e}")
            return f"<i>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É –¥–ª—è {user_name_for_error_msg}.</i>"

    async def get_player_stats_description(self, user_name: str, stats_data: Dict[str, Any]) -> str:
        user_name_escaped = html.escape(user_name)
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è '{user_name_escaped}' (–∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏).")

        main_ind = stats_data.get("main_indicators", {})
        details_p = stats_data.get("details_panel", {})
        ach_left = stats_data.get("achievements_left_column", {})
        ach_right = stats_data.get("achievements_right_column", {})
        derived_s = stats_data.get("derived_stats", {})

        def get_value(data_dict: Optional[Dict[str, Any]], key: str, default_val: Any = "N/A", precision: Optional[int] = None) -> str:
            if data_dict is None:
                return str(default_val)
            val = data_dict.get(key)
            if val is None:
                return str(default_val)
            if isinstance(val, (int, float)) and precision is not None:
                try:
                    return f"{float(val):.{precision}f}"
                except (ValueError, TypeError):
                    return html.escape(str(val))
            return html.escape(str(val))

        template_data = {
            "user_name": user_name_escaped,
            "stats_filter_type": get_value(stats_data, 'stats_filter_type'),
            "matches_played": get_value(main_ind, 'matches_played'),
            "win_rate": get_value(main_ind, 'win_rate'),
            "mvp_count": get_value(main_ind, 'mvp_count'),
            "kda_ratio": get_value(details_p, 'kda_ratio', precision=2),
            "teamfight_participation_rate": get_value(details_p, 'teamfight_participation_rate'),
            "avg_gold_per_min": get_value(details_p, 'avg_gold_per_min'),
            "legendary_count": get_value(ach_left, 'legendary_count'),
            "savage_count": get_value(ach_right, 'savage_count'),
            "maniac_count": get_value(ach_left, 'maniac_count'),
            "longest_win_streak": get_value(ach_left, 'longest_win_streak'),
            "most_kills_in_one_game": get_value(ach_left, 'most_kills_in_one_game'),
            "total_wins": get_value(derived_s, 'total_wins', default_val="–Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ"),
            "mvp_rate_percent": get_value(derived_s, 'mvp_rate_percent', default_val="N/A", precision=2),
            "savage_frequency": get_value(derived_s, 'savage_frequency_per_1000_matches', default_val="N/A", precision=2),
            "damage_per_gold_ratio": get_value(derived_s, 'damage_per_gold_ratio', default_val="N/A", precision=2),
            "mvp_win_share_percent": get_value(derived_s, 'mvp_win_share_percent', default_val="N/A", precision=2),
        }

        try:
            system_prompt_text = PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE.format(**template_data)
        except KeyError as e:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è PLAYER_STATS_DESCRIPTION_PROMPT_TEMPLATE: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á {e}. –î–∞–Ω—ñ: {template_data}")
            return f"<i>–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ({user_name_escaped}). –ö–ª—é—á: {e}</i>"

        payload = {
            "model": self.TEXT_MODEL,
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 250,
            "temperature": 0.73,
            "top_p": 0.9,
            "presence_penalty": 0.15,
            "frequency_penalty": 0.15
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑ derived): –º–æ–¥–µ–ª—å={payload['model']}, temp={payload['temperature']}, max_tokens={payload['max_tokens']}")

        current_session = self.session
        temp_session_created = False
        if not current_session or current_session.closed:
            self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
            current_session = ClientSession(timeout=ClientTimeout(total=90), headers={"Authorization": f"Bearer {self.api_key}"})
            temp_session_created = True

        try:
            return await self._execute_description_request(current_session, payload, user_name_escaped)
        finally:
            if temp_session_created and current_session and not current_session.closed:
                await current_session.close()
                self.class_logger.debug("–¢–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è –æ–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç–æ.")
