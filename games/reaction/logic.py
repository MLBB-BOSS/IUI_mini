"""
–ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –¥–ª—è –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.
–ö–µ—Ä—É—î —ñ–≥—Ä–æ–≤–∏–º —Ü–∏–∫–ª–æ–º: –∞–Ω—ñ–º–∞—Ü—ñ—è, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–º—ñ–Ω–∞ —Å–∏–≥–Ω–∞–ª—É.
"""
import asyncio
import random
import time

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

from config import logger
from games.reaction.keyboards import create_reaction_game_keyboard
from games.reaction.states import ReactionGameState

# ‚ùóÔ∏è –ù–û–í–ï: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
PADDING = "„Ö§" * 12  # Hangul Filler (U+3164)


class ReactionGameLogic:
    """–ö–µ—Ä—É—î –ø–æ–≤–Ω–∏–º —Ü–∏–∫–ª–æ–º –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""

    def __init__(self, bot: Bot, state: FSMContext, chat_id: int, message_id: int):
        self.bot = bot
        self.state = state
        self.chat_id = chat_id
        self.message_id = message_id

    async def _update_message(self, text: str, **kwargs):
        """–ë–µ–∑–ø–µ—á–Ω–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø–æ–º–∏–ª–∫–∏ "not modified"."""
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=text,
                **kwargs,
            )
            return True
        except TelegramAPIError as e:
            if "message is not modified" in str(e):
                # –¶–µ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞, —è–∫—â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
                return True
            logger.warning(f"Game ({self.message_id}): Could not edit message: {e}")
            return False

    async def _animate_and_trigger_green_light(self):
        """
        –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î –∞–Ω—ñ–º–∞—Ü—ñ—é —á–µ—Ä–≤–æ–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞,
        –∞ –ø–æ—Ç—ñ–º –∑–º—ñ–Ω—é—î —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–µ–ª–µ–Ω–∏–π.
        """
        # –§–∞–∑–∞ 1: –ê–Ω—ñ–º–∞—Ü—ñ—è —á–µ—Ä–≤–æ–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞
        red_lights = ["üî¥", "üî¥ üî¥", "üî¥ üî¥ üî¥"]
        for i in range(len(red_lights)):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
            if await self.state.get_state() != ReactionGameState.in_progress:
                logger.debug(f"Game ({self.message_id}): Canceled during animation.")
                return

            text = f"–ü—Ä–∏–≥–æ—Ç—É–π—Å—è...\n\n{PADDING}{red_lights[i]}{PADDING}"
            await self._update_message(text, reply_markup=create_reaction_game_keyboard())
            await asyncio.sleep(0.7)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –µ—Ñ–µ–∫—Ç—É –∞–Ω—ñ–º–∞—Ü—ñ—ó

        # –§–∞–∑–∞ 2: –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–µ–ª–µ–Ω–∏–º —Å–≤—ñ—Ç–ª–æ–º
        delay = random.uniform(1.0, 3.0)
        await asyncio.sleep(delay)

        # –ó–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
        if await self.state.get_state() != ReactionGameState.in_progress:
            logger.debug(f"Game ({self.message_id}): Canceled before green light.")
            return

        # –§–∞–∑–∞ 3: –í–º–∏–∫–∞—î–º–æ –∑–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æ
        green_light_time = time.monotonic()
        await self.state.update_data(green_light_time=green_light_time)
        logger.info(f"Game ({self.message_id}): Light is GREEN at {green_light_time}")

        text = f"üü¢ –ù–ê–¢–ò–°–ö–ê–ô! üü¢\n\n{PADDING}üü¢{PADDING}"
        await self._update_message(text, reply_markup=create_reaction_game_keyboard())

    async def start_game(self):
        """–ó–∞–ø—É—Å–∫–∞—î —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ–∞–ª—å—Å—Ç–∞—Ä—Ç—É."""
        await self.state.set_state(ReactionGameState.in_progress)

        # –ù–µ–≥–∞–π–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –µ–∫—Ä–∞–Ω –∑ –∫–Ω–æ–ø–∫–æ—é
        initial_text = f"–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!\n\n{PADDING}...\n{PADDING}"
        await self._update_message(
            initial_text,
            reply_markup=create_reaction_game_keyboard()
        )
        logger.info(f"Game ({self.message_id}): Initial screen is ON.")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –∫–µ—Ä—É—î –≤—Å—ñ—î—é –∞–Ω—ñ–º–∞—Ü—ñ—î—é —Ç–∞ –ª–æ–≥—ñ–∫–æ—é
        asyncio.create_task(self._animate_and_trigger_green_light())
