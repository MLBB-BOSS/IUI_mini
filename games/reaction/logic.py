"""
–ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –¥–ª—è –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.
–ö–µ—Ä—É—î —ñ–≥—Ä–æ–≤–∏–º —Ü–∏–∫–ª–æ–º: –∞–Ω—ñ–º–∞—Ü—ñ—è "—Å–∫–∞–Ω–µ—Ä", –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–º—ñ–Ω–∞ —Å–∏–≥–Ω–∞–ª—É.
"""
import asyncio
import random
import time

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

from config import logger
from games.reaction.keyboards import create_reaction_game_keyboard
from games.reaction.states import ReactionGameState

PADDING = "„Ö§" * 12

class ReactionGameLogic:
    def __init__(self, bot: Bot, state: FSMContext, chat_id: int, message_id: int):
        self.bot = bot
        self.state = state
        self.chat_id = chat_id
        self.message_id = message_id

    async def _update_message(self, text: str, **kwargs):
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id, message_id=self.message_id, text=text, **kwargs
            )
            return True
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Game ({self.message_id}): Could not edit message: {e}")
            return False

    async def _animate_and_trigger_green_light(self):
        """–§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ —Ä–µ–∞–ª—ñ–∑—É—î –∞–Ω—ñ–º–∞—Ü—ñ—é "—Å–∫–∞–Ω–µ—Ä"."""
        slots = ["‚ö™Ô∏è"] * 6
        direction = 1
        position = 0
        
        # –§–∞–∑–∞ 1: –ê–Ω—ñ–º–∞—Ü—ñ—è —Å–∫–∞–Ω–µ—Ä–∞
        for _ in range(random.randint(12, 18)): # 1-1.5 –ø–æ–≤–Ω–∏—Ö —Ü–∏–∫–ª–∏
            if await self.state.get_state() != ReactionGameState.in_progress:
                return

            slots[position] = "üî¥"
            text = f"–ü—Ä–∏–≥–æ—Ç—É–π—Å—è...\n\n{PADDING}\n{' '.join(slots)}\n{PADDING}"
            await self._update_message(text, reply_markup=create_reaction_game_keyboard())
            slots[position] = "‚ö™Ô∏è"
            
            position += direction
            if position == len(slots) - 1 or position == 0:
                direction *= -1
            
            await asyncio.sleep(0.1)

        # –§–∞–∑–∞ 2: –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        await asyncio.sleep(random.uniform(0.5, 2.0))
        
        if await self.state.get_state() != ReactionGameState.in_progress:
            return

        # –§–∞–∑–∞ 3: –ó–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æ
        green_light_time = time.monotonic()
        await self.state.update_data(green_light_time=green_light_time)
        logger.info(f"Game ({self.message_id}): Light is GREEN at {green_light_time}")
        
        green_slots = " ".join(["üü¢"] * 6)
        text = f"üü¢ –ù–ê–¢–ò–°–ö–ê–ô! üü¢\n\n{PADDING}\n{green_slots}\n{PADDING}"
        await self._update_message(text, reply_markup=create_reaction_game_keyboard())

    async def start_game(self):
        await self.state.set_state(ReactionGameState.in_progress)
        initial_text = f"–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!\n\n{PADDING}\n{' '.join(['‚ö™Ô∏è'] * 6)}\n{PADDING}"
        await self._update_message(
            initial_text, reply_markup=create_reaction_game_keyboard()
        )
        asyncio.create_task(self._animate_and_trigger_green_light())
