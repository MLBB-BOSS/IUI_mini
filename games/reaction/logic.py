"""
–ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –¥–ª—è –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.
–ö–µ—Ä—É—î —ñ–≥—Ä–æ–≤–∏–º —Ü–∏–∫–ª–æ–º: –ø—Ä–æ—Å—É–Ω—É—Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–º—ñ–Ω–∞ —Å–∏–≥–Ω–∞–ª—É.
"""
import asyncio
import random
import time

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext

from config import logger
from games.reaction.keyboards import create_reaction_game_keyboard
from games.reaction.states import ReactionGameState

PADDING = "„Ö§" * 12

class ReactionGameLogic:
    def __init__(self, bot: Bot, state: FSMContext, chat_id: int, message_id: int):
        self.bot = bot
        self.state = state
        self.chat_id = chat_id
        self.message_id = message_id

    async def _update_message(self, text: str, **kwargs):
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id, message_id=self.message_id, text=text, **kwargs
            )
            return True
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Game ({self.message_id}): Could not edit message: {e}")
            return False

    async def _animate_and_trigger_green_light(self):
        """
        –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ —Ä–µ–∞–ª—ñ–∑—É—î –ø—Ä–æ—Å—É–Ω—É—Ç—É –∞–Ω—ñ–º–∞—Ü—ñ—é
        –∑ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —ñ–≥—Ä–æ–≤–∏–º —Ü–∏–∫–ª–æ–º.
        """
        slots = ["‚ö™Ô∏è"] * 6
        
        # ‚ùóÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ª–∏—à–µ 5 —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        for i in range(len(slots) - 1): # –¶–∏–∫–ª –¥–æ 5-–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (—ñ–Ω–¥–µ–∫—Å 4)
            if await self.state.get_state() != ReactionGameState.in_progress:
                logger.debug(f"Game ({self.message_id}): Canceled during animation.")
                return
            
            slots[i] = "üî¥"
            text = f"–ü—Ä–∏–≥–æ—Ç—É–π—Å—è...\n\n{PADDING}\n{' '.join(slots)}\n{PADDING}"
            await self._update_message(text, reply_markup=create_reaction_game_keyboard())
            
            # ‚ùóÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –±–µ–∑–ø–µ—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
            await asyncio.sleep(random.uniform(0.8, 1.5))

        # –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è 5 —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        await asyncio.sleep(random.uniform(0.5, 2.0))
        
        if await self.state.get_state() != ReactionGameState.in_progress:
            return

        # ‚ùóÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ó–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æ –∑'—è–≤–ª—è—î—Ç—å—Å—è –∑–∞–º—ñ—Å—Ç—å 6-–≥–æ —á–µ—Ä–≤–æ–Ω–æ–≥–æ
        green_light_time = time.monotonic()
        await self.state.update_data(green_light_time=green_light_time)
        logger.info(f"Game ({self.message_id}): Light is GREEN at {green_light_time}")
        
        green_slots = " ".join(["üü¢"] * 6)
        text = f"üü¢ –ù–ê–¢–ò–°–ö–ê–ô! üü¢\n\n{PADDING}\n{green_slots}\n{PADDING}"
        await self._update_message(text, reply_markup=create_reaction_game_keyboard())

    async def start_game(self):
        await self.state.set_state(ReactionGameState.in_progress)
        initial_text = f"–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!\n\n{PADDING}\n{' '.join(['‚ö™Ô∏è'] * 6)}\n{PADDING}"
        await self._update_message(
            initial_text, reply_markup=create_reaction_game_keyboard()
        )
        asyncio.create_task(self._animate_and_trigger_green_light())
