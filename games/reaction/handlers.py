"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.

–í–∏–∫–æ–Ω—É—é—Ç—å —Ä–æ–ª—å "–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞", –ø—Ä–∏–π–º–∞—é—á–∏ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
—Ç–∞ –¥–µ–ª–µ–≥—É—é—á–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É –∫–ª–∞—Å—É ReactionGameLogic.
"""
import asyncio
import html
import time

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import logger
from games.reaction.crud import get_leaderboard, save_reaction_score
from games.reaction.logic import ReactionGameLogic
from games.reaction.states import ReactionGameState

reaction_router = Router(name="reaction_game")


@reaction_router.message(Command("reaction", prefix="!/"))
async def start_reaction_game_handler(message: Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /reaction. –ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    if not message.from_user:
        return

    current_state = await state.get_state()
    if current_state is not None:
        await message.reply(
            "–í–∏ –≤–∂–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –¥—ñ—ó. –ó–∞–≤–µ—Ä—à—ñ—Ç—å —ó—ó –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel."
        )
        return

    try:
        game_message = await message.answer("üö¶ –ì—Ä–∞ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è...")

        game = ReactionGameLogic(
            bot=bot,
            state=state,
            chat_id=game_message.chat.id,
            message_id=game_message.message_id,
        )

        asyncio.create_task(game.start_game())
        logger.info(
            f"User {message.from_user.id} started a reaction game. "
            f"Message ID: {game_message.message_id}"
        )

    except TelegramAPIError as e:
        logger.error(f"Failed to send initial game message for user {message.from_user.id}: {e}")
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≥—Ä—É —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É Telegram. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Unexpected error on game start for user {message.from_user.id}: {e}", exc_info=True)
        await message.reply("–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏.")


@reaction_router.callback_query(
    F.data == "reaction_game:stop", StateFilter(ReactionGameState.in_progress)
)
async def stop_reaction_game_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–°–¢–û–ü", —Ñ—ñ–∫—Å—É—î —á–∞—Å, –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞ –ø–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if not callback.message:
        return

    user_id = callback.from_user.id
    end_time = time.monotonic()

    data = await state.get_data()
    start_time = data.get("start_time")
    game_message_id = data.get("game_message_id")

    if not all([start_time, game_message_id]):
        logger.warning(f"User {user_id} pressed stop, but state data is missing.")
        await callback.answer(
            "–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –≥—Ä–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", show_alert=True
        )
        await state.clear()
        return

    await state.clear()

    reaction_time_sec = end_time - start_time
    reaction_time_ms = int(reaction_time_sec * 1000)

    if reaction_time_ms < 100:
        result_text = (
            f"‚è±Ô∏è –ß–∞—Å: {reaction_time_ms} –º—Å\n\n"
            "ü§î –§–∞–ª—å—Å—Ç–∞—Ä—Ç! –°—Ö–æ–∂–µ, —Ç–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤ —â–µ –¥–æ –∑–µ–ª–µ–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞. "
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
        )
    else:
        await save_reaction_score(user_id, reaction_time_ms)
        result_text = (
            f"üöÄ –¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{reaction_time_ms} –º—Å</b>!\n\n"
            "–ß—É–¥–æ–≤–∞ —Ä–µ–∞–∫—Ü—ñ—è! –¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ. "
            "–°–ø—Ä–æ–±—É—î—à –ø–æ–±–∏—Ç–∏ —Å–≤—ñ–π —Ä–µ–∫–æ—Ä–¥?"
        )

    try:
        await bot.edit_message_text(
            text=result_text,
            chat_id=callback.message.chat.id,
            message_id=game_message_id,
            reply_markup=None,
        )
        await callback.answer(f"–í–∞—à —á–∞—Å: {reaction_time_ms} –º—Å", show_alert=False)
    except TelegramAPIError as e:
        logger.warning(f"Could not edit game message {game_message_id} after completion: {e}")
        await callback.answer(
            f"–í–∞—à —á–∞—Å: {reaction_time_ms} –º—Å. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            show_alert=True,
        )


@reaction_router.message(Command("reaction_top", prefix="!/"))
async def show_leaderboard_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /reaction_top. –§–æ—Ä–º—É—î —Ç–∞ –ø–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤.
    """
    leaderboard_data = await get_leaderboard(limit=10)

    if not leaderboard_data:
        await message.answer(
            "üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ '–°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä'</b> üèÜ\n\n"
            "–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ —Ä–µ–∫–æ—Ä–¥! –ë—É–¥—å –ø–µ—Ä—à–∏–º ‚Äî –∑—ñ–≥—Ä–∞–π —É –≥—Ä—É /reaction"
        )
        return

    response_lines = ["üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ '–°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä'</b> üèÜ\n"]
    medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}

    for i, record in enumerate(leaderboard_data):
        place = medals.get(i, f"  <b>{i + 1}.</b>")
        nickname = html.escape(record.get("nickname", "–ê–Ω–æ–Ω—ñ–º"))
        best_time = record.get("best_time", "N/A")
        response_lines.append(f"{place} {nickname} ‚Äî <code>{best_time} –º—Å</code>")

    await message.answer("\n".join(response_lines))


def register_reaction_handlers(dp):
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≥—Ä–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ."""
    dp.include_router(reaction_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ 'Reaction Time' –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
