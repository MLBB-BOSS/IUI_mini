"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.
–†–µ–∞–ª—ñ–∑—É—î –ª–æ–≥—ñ–∫—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ª–æ–±—ñ, –∑–∞–ø—É—Å–∫—É –≥—Ä–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –ª—ñ–¥–µ—Ä—ñ–≤.
"""
import asyncio
import html
import time

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import logger
from games.reaction.crud import get_leaderboard, save_reaction_score
from games.reaction.facts import get_fact_for_time
from games.reaction.keyboards import (
    create_leaderboard_view_keyboard,
    create_reaction_lobby_keyboard,
)
from games.reaction.logic import ReactionGameLogic
from games.reaction.messages import LOBBY_MESSAGE_TEXT
from games.reaction.states import ReactionGameState

reaction_router = Router(name="reaction_game")

# ... (–∫–æ–¥ –ª–æ–±—ñ, —Å—Ç–∞—Ä—Ç—É, –≤–∏—Ö–æ–¥—É, —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
async def show_lobby(message: Message, state: FSMContext):
    await state.set_state(ReactionGameState.menu)
    sent_message = await message.answer(
        text=LOBBY_MESSAGE_TEXT,
        reply_markup=create_reaction_lobby_keyboard(),
    )
    await state.update_data(lobby_message_id=sent_message.message_id)

@reaction_router.message(Command("reaction"))
async def reaction_command_handler(message: Message, state: FSMContext):
    await show_lobby(message, state)

@reaction_router.callback_query(
    F.data == "reaction_game:show_lobby", StateFilter(ReactionGameState.menu)
)
async def show_lobby_callback_handler(callback: CallbackQuery, state: FSMContext):
    if not callback.message:
        return
    await callback.message.edit_text(
        text=LOBBY_MESSAGE_TEXT,
        reply_markup=create_reaction_lobby_keyboard(),
    )
    await callback.answer()

@reaction_router.callback_query(
    F.data == "reaction_game:start", StateFilter(ReactionGameState.menu)
)
async def start_game_callback_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if not callback.message:
        return
    try:
        game = ReactionGameLogic(
            bot=bot,
            state=state,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
        )
        asyncio.create_task(game.start_game())
        await callback.answer("–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!")
    except Exception as e:
        logger.error(f"Error starting reaction game from callback: {e}", exc_info=True)
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≥—Ä—É.", show_alert=True)

@reaction_router.callback_query(
    F.data == "reaction_game:exit", StateFilter(ReactionGameState.menu)
)
async def exit_lobby_handler(callback: CallbackQuery, state: FSMContext):
    if not callback.message:
        return
    await state.clear()
    try:
        await callback.message.delete()
        await callback.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –≥—Ä–∏.")
    except TelegramAPIError:
        await callback.answer()

@reaction_router.callback_query(
    F.data == "reaction_game:show_leaderboard", StateFilter(ReactionGameState.menu)
)
async def show_leaderboard_callback_handler(callback: CallbackQuery):
    if not callback.message:
        return
    leaderboard_data = await get_leaderboard(limit=10)
    if not leaderboard_data:
        text = "üèÜ **–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ '–°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä'** üèÜ\n\n–†–µ–∫–æ—Ä–¥—ñ–≤ —â–µ –Ω–µ–º–∞—î. –ë—É–¥—å –ø–µ—Ä—à–∏–º!"
    else:
        response_lines = ["üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ '–°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä'</b> üèÜ\n"]
        medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}
        for i, record in enumerate(leaderboard_data):
            place = medals.get(i, f"  <b>{i + 1}.</b>")
            nickname = html.escape(record.get("nickname", "–ê–Ω–æ–Ω—ñ–º"))
            best_time = record.get("best_time", "N/A")
            response_lines.append(f"{place} {nickname} ‚Äî <code>{best_time} –º—Å</code>")
        text = "\n".join(response_lines)

    await callback.message.edit_text(
        text=text,
        reply_markup=create_leaderboard_view_keyboard(),
    )
    await callback.answer()

# ‚ùóÔ∏è –ù–û–í–ê, –†–û–ó–®–ò–†–ï–ù–ê –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
@reaction_router.callback_query(
    F.data == "reaction_game:stop", StateFilter(ReactionGameState.in_progress)
)
async def stop_reaction_game_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–°–¢–û–ü", —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
    –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–∫–æ—Ä–¥–∏ —Ç–∞ –ø–æ–∫–∞–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤.
    """
    if not callback.message:
        return

    end_time = time.monotonic()
    data = await state.get_data()
    green_light_time = data.get("green_light_time")
    
    await state.clear()

    if not green_light_time:
        result_text = "üî¥ –§–∞–ª—å—Å—Ç–∞—Ä—Ç! üî¥\n\n–¢–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤ —â–µ –¥–æ –∑–µ–ª–µ–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."
        await callback.answer("–§–∞–ª—å—Å—Ç–∞—Ä—Ç!", show_alert=True)
        await callback.message.edit_text(result_text, reply_markup=None)
        return

    reaction_time_ms = int((end_time - green_light_time) * 1000)
    user_id = callback.from_user.id

    # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ –î–û –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    leaderboard_before = await get_leaderboard(limit=10)
    personal_best = next(
        (p["best_time"] for p in leaderboard_before if p["telegram_id"] == user_id), 99999
    )

    # –ö—Ä–æ–∫ 2: –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await save_reaction_score(user_id, reaction_time_ms)
    
    # –ö—Ä–æ–∫ 3: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ –ü–Ü–°–õ–Ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    leaderboard_after = await get_leaderboard(limit=10)
    new_pos = next(
        (i + 1 for i, p in enumerate(leaderboard_after) if p["telegram_id"] == user_id), -1
    )

    # –ö—Ä–æ–∫ 4: –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    record_message = ""
    if reaction_time_ms < personal_best:
        if new_pos != -1:
            record_message = f"üéâ <b>–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥!</b> –¢–∏ —Ç–µ–ø–µ—Ä –Ω–∞ <b>{new_pos}-–º—É –º—ñ—Å—Ü—ñ</b>!\n\n"
        else:
            record_message = "üéâ <b>–ù–æ–≤–∏–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ä–µ–∫–æ—Ä–¥!</b>\n\n"

    result_text = f"üöÄ –¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{reaction_time_ms} –º—Å</b> <i>({reaction_time_ms / 1000.0:.3f} —Å–µ–∫)</i>"
    fact_text = f"üí° <i>{get_fact_for_time(reaction_time_ms)}</i>"

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
    leaderboard_lines = ["\n\nüèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤:</b>"]
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    for i, record in enumerate(leaderboard_after):
        rank = i + 1
        place = medals.get(rank, f"  <b>{rank}.</b>")
        nickname = html.escape(record.get("nickname", "–ê–Ω–æ–Ω—ñ–º"))
        best_time = record.get("best_time", "N/A")
        line = f"{place} {nickname} ‚Äî <code>{best_time} –º—Å</code>"
        if record["telegram_id"] == user_id:
            line = f"<b>‚û°Ô∏è {line} ‚¨ÖÔ∏è</b>"
        leaderboard_lines.append(line)
        
    leaderboard_text = "\n".join(leaderboard_lines)

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    final_text = record_message + result_text + "\n" + fact_text + leaderboard_text
    
    await callback.message.edit_text(final_text, reply_markup=None)
    await callback.answer(f"–í–∞—à —á–∞—Å: {reaction_time_ms} –º—Å")

@reaction_router.message(Command("reaction_top"))
async def show_leaderboard_command_handler(message: Message):
    leaderboard_data = await get_leaderboard(limit=10)
    if not leaderboard_data:
        await message.answer("–†–µ–∫–æ—Ä–¥—ñ–≤ —â–µ –Ω–µ–º–∞—î. –ó—ñ–≥—Ä–∞–π —É /reaction, —â–æ–± —Å—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–º!")
        return

    response_lines = ["üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ '–°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä'</b> üèÜ\n"]
    medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}
    for i, record in enumerate(leaderboard_data):
        place = medals.get(i, f"  <b>{i + 1}.</b>")
        nickname = html.escape(record.get("nickname", "–ê–Ω–æ–Ω—ñ–º"))
        best_time = record.get("best_time", "N/A")
        response_lines.append(f"{place} {nickname} ‚Äî <code>{best_time} –º—Å</code>")
    await message.answer("\n".join(response_lines))

def register_reaction_handlers(dp):
    dp.include_router(reaction_router)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ 'Reaction Time' –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
