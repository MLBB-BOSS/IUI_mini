"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º—ñ–Ω—ñ-–≥—Ä–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–µ–∞–∫—Ü—ñ—ó.
"""
import asyncio
import random
import time
from contextlib import suppress

from aiogram import F, Router, types
from aiogram.exceptions import TelegramAPIError

from config import logger
from database.crud import get_user_by_telegram_id
from games.reaction.crud import get_leaderboard, save_reaction_score
from games.reaction.keyboards import (create_leaderboard_keyboard,
                                      create_reaction_game_keyboard)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä
active_games: dict[int, dict] = {}
reaction_router = Router()


async def start_reaction_game(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥ –≥—Ä–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é.
    –ü–æ–∫–∞–∑—É—î –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫—Ä—É–∂–µ—á–∫—ñ–≤.
    """
    user_id = callback_query.from_user.id
    message = callback_query.message

    if not message:
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≥—Ä–∞–≤–µ—Ü—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user_profile = await get_user_by_telegram_id(user_id)
    if not user_profile:
        await callback_query.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /profile",
            show_alert=True
        )
        return

    game_id = message.message_id
    active_games[game_id] = {"status": "running", "start_time": None}
    await callback_query.answer("–ü—Ä–∏–≥–æ—Ç—É–π—Å—è...")

    try:
        # –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        for i in range(1, 6):
            if game_id not in active_games or active_games[game_id]["status"] != "running":
                return
            
            loading_text = "üî¥" * i + "‚ö™Ô∏è" * (5 - i)
            await message.edit_text(
                f"<b>–ì—Ä–∞ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é</b>\n\n{loading_text}\n\n"
                "–©–æ–π–Ω–æ –∫—Ä—É–∂–µ—á–æ–∫ —Å—Ç–∞–Ω–µ –∑–µ–ª–µ–Ω–∏–º (üü¢), —Ç–∏—Å–Ω–∏ –Ω–∞ –Ω—å–æ–≥–æ!",
                reply_markup=create_reaction_game_keyboard("wait", game_id)
            )
            # ‚ùóÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –Ω–∞ –¥–∏–Ω–∞–º—ñ—á–Ω—É
            await asyncio.sleep(random.uniform(0.3, 0.8))

        # –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é –∫–æ–ª—å–æ—Ä—É
        await asyncio.sleep(random.uniform(1.0, 4.0))

        if game_id in active_games and active_games[game_id]["status"] == "running":
            active_games[game_id]["start_time"] = time.monotonic()
            logger.info(f"Game ({game_id}): Light is GREEN at {active_games[game_id]['start_time']}")
            await message.edit_text(
                "<b>–ì—Ä–∞ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é</b>\n\n"
                "üü¢\n\n"
                "–¢–ò–°–ù–ò!",
                reply_markup=create_reaction_game_keyboard("ready", game_id)
            )
    except TelegramAPIError as e:
        logger.error(f"Error during game animation for game {game_id}: {e}")
        if game_id in active_games:
            del active_games[game_id]


async def stop_reaction_game_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–ª–∏ –≤–æ–Ω–∞ —Å—Ç–∞–ª–∞ –∑–µ–ª–µ–Ω–æ—é.
    """
    user_id = callback_query.from_user.id
    message = callback_query.message
    game_id = message.message_id if message else None

    if not message or game_id not in active_games or active_games[game_id]["status"] != "running":
        await callback_query.answer("–ì—Ä–∞ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    start_time = active_games[game_id].get("start_time")
    if not start_time:
        # –§–∞–ª—å—Å—Ç–∞—Ä—Ç
        active_games[game_id]["status"] = "finished"
        await message.edit_text(
            "<b>–§–∞–ª—å—Å—Ç–∞—Ä—Ç!</b>\n\n"
            "–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=create_reaction_game_keyboard("finished", game_id)
        )
        await callback_query.answer("–ó–∞—Ä–∞–Ω–æ!", show_alert=True)
        return

    reaction_time = time.monotonic() - start_time
    reaction_time_ms = int(reaction_time * 1000)
    active_games[game_id]["status"] = "finished"

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    leaderboard_before = await get_leaderboard(limit=10)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await save_reaction_score(user_id, reaction_time_ms)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
    leaderboard_after = await get_leaderboard(limit=10)

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    user_in_top_before = any(p["telegram_id"] == user_id for p in leaderboard_before)
    user_in_top_after = any(p["telegram_id"] == user_id for p in leaderboard_after)
    
    new_best_text = ""
    if user_in_top_after and not user_in_top_before:
        new_best_text = "üèÜ –í–∏ —É–≤—ñ—Ä–≤–∞–ª–∏—Å—è –≤ —Ç–æ–ø-10!"
    elif user_in_top_after:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∫—Ä–∞—â–∏–≤ –≥—Ä–∞–≤–µ—Ü—å —Å–≤–æ—é –ø–æ–∑–∏—Ü—ñ—é
        pos_before = next((i for i, p in enumerate(leaderboard_before) if p["telegram_id"] == user_id), 11)
        pos_after = next((i for i, p in enumerate(leaderboard_after) if p["telegram_id"] == user_id), 11)
        if pos_after < pos_before:
            new_best_text = f"üöÄ –ù–æ–≤–∏–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ä–µ–∫–æ—Ä–¥! –í–∏ –ø—ñ–¥–Ω—è–ª–∏—Å—å –Ω–∞ {pos_after + 1} –º—ñ—Å—Ü–µ!"
    
    result_text = (
        f"<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {reaction_time_ms} –º—Å</b>\n"
        f"<i>{new_best_text}</i>\n\n"
    )
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
    leaderboard_lines = ["<b>üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤:</b>"]
    for i, record in enumerate(leaderboard_after, 1):
        is_current_user = "üëâ" if record["telegram_id"] == user_id else "  "
        leaderboard_lines.append(
            f"{is_current_user}{i}. {record['nickname']} - <b>{record['best_time']} –º—Å</b>"
        )
        
    final_text = result_text + "\n".join(leaderboard_lines)

    await message.edit_text(
        final_text,
        reply_markup=create_reaction_game_keyboard("finished", game_id)
    )
    await callback_query.answer(f"–í–∞—à —á–∞—Å: {reaction_time_ms} –º—Å")
    
    # –û—á–∏—Å—Ç–∫–∞
    with suppress(KeyError):
        del active_games[game_id]


async def show_leaderboard(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∞–∫—Ç—É–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
    leaderboard_data = await get_leaderboard(limit=10)
    
    if not leaderboard_data:
        text = "<b>üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.</b>\n\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä—à–∏–º!"
    else:
        lines = ["<b>üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ (–¢–æ–ø-10):</b>"]
        for i, record in enumerate(leaderboard_data, 1):
            lines.append(f"{i}. {record['nickname']} - <b>{record['best_time']} –º—Å</b>")
        text = "\n".join(lines)
        
    await callback_query.message.edit_text(
        text,
        reply_markup=create_leaderboard_keyboard()
    )
    await callback_query.answer()


async def back_to_game_menu(callback_query: types.CallbackQuery):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é –≥—Ä–∏."""
    await callback_query.message.edit_text(
        "<b>–ì—Ä–∞ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é</b>\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—å!",
        reply_markup=create_reaction_game_keyboard("initial", 0)
    )
    await callback_query.answer()


def register_reaction_handlers(dp: Router):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ 'Reaction Time'."""
    dp.callback_query.register(start_reaction_game, F.data == "reaction_game_start")
    dp.callback_query.register(stop_reaction_game_handler, F.data.startswith("reaction_game_press:"))
    dp.callback_query.register(show_leaderboard, F.data == "reaction_game_leaderboard")
    dp.callback_query.register(back_to_game_menu, F.data == "reaction_game_back_to_menu")
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥—Ä–∏ 'Reaction Time' –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
