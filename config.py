# config.py
"""
Configuration settings and environment variables for the MLBB IUI Mini bot.

This module loads critical tokens and URLs from environment variables,
sets up logging, and validates that all required settings are present.
"""
import logging
import os

from dotenv import load_dotenv

# ------------------------------------------------------------------------------
# Logging configuration
# ------------------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

# ------------------------------------------------------------------------------
# Load environment variables (for local development via .env)
# ------------------------------------------------------------------------------
# On Heroku, Config Vars are provided via the environment automatically.
load_dotenv()

# ------------------------------------------------------------------------------
# Required credentials and URLs
# ------------------------------------------------------------------------------
TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
GOOGLE_CLOUD_PROJECT_ID: str = os.getenv("GOOGLE_CLOUD_PROJECT_ID", "")
CLOUDINARY_URL: str = os.getenv("CLOUDINARY_URL", "")

# ------------------------------------------------------------------------------
# Redis configuration
# ------------------------------------------------------------------------------
# Heroku RedisCloud provides REDISCLOUD_URL; fallback to REDIS_URL if set.
REDISCLOUD_URL: str = os.getenv("REDISCLOUD_URL", "")
REDIS_URL: str = os.getenv("REDIS_URL") or REDISCLOUD_URL

# ------------------------------------------------------------------------------
# Database URLs (sync and async)
# ------------------------------------------------------------------------------
SYNC_DATABASE_URL: str = os.getenv("DATABASE_URL", "")
ASYNC_DATABASE_URL: str = os.getenv("AS_BASE", "")  # Use AS_BASE for async URL

# ------------------------------------------------------------------------------
# Other core settings
# ------------------------------------------------------------------------------
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

WELCOME_IMAGE_URL: str = (
    "https://res.cloudinary.com/ha1pzppgf/"
    "image/upload/v1748286434/"
    "file_0000000017a46246b78bf97e2ecd9348_zuk16r.png"
)
MAX_TELEGRAM_MESSAGE_LENGTH: int = 4090
MAX_CHAT_HISTORY_LENGTH: int = 10

# ------------------------------------------------------------------------------
# Conversation & Vision settings
# ------------------------------------------------------------------------------
BOT_NAMES: list[str] = [
    "–±–æ—Ç", "genius", "iui",  # –û—Å–Ω–æ–≤–Ω—ñ
    "gg", "–≥–≥",              # –Ü–≥—Ä–æ–≤—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    "ai", "–∞—ñ", "—ñ—ñ"         # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–∞ —Ñ–æ–Ω–µ—Ç–∏—á–Ω—ñ
]
CONVERSATIONAL_COOLDOWN_SECONDS: int = 600  # 10 minutes
SEARCH_COOLDOWN_SECONDS: int = 300 # 5 minutes
VISION_AUTO_RESPONSE_ENABLED: bool = True
VISION_RESPONSE_COOLDOWN_SECONDS: int = 30
VISION_MAX_IMAGE_SIZE_MB: float = 10.0
VISION_QUALITY_THRESHOLD: str = "low"
VISION_SUPPORTED_TYPES: list[str] = [
    "meme", "screenshot", "text", "profile", "stats", "gameplay", "hero",
    "items", "patch_notes", "tournament", "general"
]
VISION_CONTENT_EMOJIS: dict[str, str] = {
    "meme": "üòÇ", "screenshot": "üì∏", "text": "üìù", "profile": "üë§",
    "stats": "üìä", "gameplay": "üéÆ", "hero": "ü¶∏", "items": "‚öîÔ∏è",
    "patch_notes": "üìã", "tournament": "üèÜ", "general": "üîç"
}

# ------------------------------------------------------------------------------
# Party manager configuration
# ------------------------------------------------------------------------------
PARTY_TRIGGER_PHRASES: list[str] = [
    "—Ö—Ç–æ –≤ –ø–∞—Ç—ñ", "–≥–æ –ø–∞—Ç—ñ", "–∑–±–∏—Ä–∞—é –ø–∞—Ç—ñ", "—à—É–∫–∞—é –ø–∞—Ç—ñ", "–ø–æ–≥–Ω–∞–ª–∏ –ø–∞—Ç—ñ",
    "—Ö—Ç–æ –≥—Ä–∞—Ç–∏", "–≥–æ –≥—Ä–∞—Ç–∏", "–ø–æ–≥–Ω–∞–ª–∏ –≥—Ä–∞—Ç–∏", "—Ö—Ç–æ –∫–∞—Ç–∫—É",
    "–ø–∞—Ç—ñ", "–∑–±—ñ—Ä", "—Ç—ñ–º–∞", "—Ç—ñ–º—É", "–∫–∞—Ç–∫—É",
    "+ –≤ –ø–∞—Ç—ñ", "—Ö—Ç–æ +", "–ø–ª—é—Å –≤ –ø–∞—Ç—ñ",
    "—î —Ö—Ç–æ –≥—Ä–∞—Ç–∏", "–ø–æ–≥–Ω–∞–ª–∏ –≤ –ø–∞—Ç—ñ", "–∑–±—ñ—Ä –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥", "–≥–æ –Ω–∞ —Ä–µ–π—Ç",
    "—à—É–∫–∞—é —Ç—ñ–º–µ–π—Ç—ñ–≤", "–≥–æ –∫–∞—Ç–∫—É —Ä–∞–∑–æ–º"
]
PARTY_LOBBY_ROLES: list[str] = [
    "–¢–∞–Ω–∫/–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "–õ—ñ—Å–Ω–∏–∫", "–ú–∞–≥ (–º—ñ–¥)",
    "–°—Ç—Ä—ñ–ª–µ—Ü—å (–∑–æ–ª–æ—Ç–æ)", "–ë–æ—î—Ü—å (–¥–æ—Å–≤—ñ–¥)"
]
PARTY_LOBBY_COOLDOWN_SECONDS: int = 60  # 1 minute per lobby creation

# ------------------------------------------------------------------------------
# Reply keyboard navigation settings
# ------------------------------------------------------------------------------
REPLY_KEYBOARD_ENABLED: bool = True
SHOW_COMMANDS_HELP: bool = False

BOT_MODES: dict[str, str] = {
    "main": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
    "go": "AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ–∂–∏–º",
    "analysis": "–†–µ–∂–∏–º –∞–Ω–∞–ª—ñ–∑—É",
    "party": "–†–µ–∂–∏–º –∑–±–æ—Ä—É –ø–∞—Ç—ñ"
}
NAVIGATION_TEXTS: dict[str, str] = {
    "welcome": "üéÆ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ GGenius!\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
    "go_mode": "ü§ñ –†–µ–∂–∏–º AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ MLBB, —ñ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
    "profile_mode": "üßë‚Äçüíº –†–µ–∂–∏–º –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é!\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≤ MLBB –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:",
    "stats_mode": "üìä –†–µ–∂–∏–º –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∞—à–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ MLBB:",
    "party_mode": "üéÆ –†–µ–∂–∏–º –∑–±–æ—Ä—É –ø–∞—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –ø–æ—à—É–∫ –∫–æ–º–∞–Ω–¥–∏, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–±—ñ:",
    "back_to_main": "üè† –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
    "help_text": (
        "‚ùì –î–æ–ø–æ–º–æ–≥–∞:\n\n"
        "üßë‚Äçüíº **–ü—Ä–æ—Ñ—ñ–ª—å** - –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç—É\n"
        "ü§ñ **GO** - —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç\n"
        "üéÆ **–ó—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ç—ñ** - –¥–æ–ø–æ–º–æ–≥–∞ –≤ –ø–æ—à—É–∫—É –∫–æ–º–∞–Ω–¥–∏"
    )
}

# ------------------------------------------------------------------------------
# Conversational triggers for chat responses
# ------------------------------------------------------------------------------
CONVERSATIONAL_TRIGGERS: dict[str, str] = {
    # –ë–∞–∑–æ–≤—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏
    "—è–∫ —Å–ø—Ä–∞–≤–∏": "–î—Ä—É–∂–Ω—å–æ —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—Ü—ñ–∫–∞–≤—Å—è, —è–∫ —Å–ø—Ä–∞–≤–∏ —É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.",
    "—â–æ —Ä–æ–±–∏—à": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –∑ –≥—É–º–æ—Ä–æ–º, –Ω—ñ–±–∏ —Ç–µ–±–µ –≤—ñ–¥–≤–æ–ª—ñ–∫–ª–∏ –≤—ñ–¥ –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø–ª–µ—ó–≤.",
    "–ø—Ä–∏–≤—ñ—Ç": "–ü—Ä–∏–≤—ñ—Ç–∞–π—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–æ–ª–æ–¥—ñ–∂–Ω–∏–π —Å–ª–µ–Ω–≥.",
    "–¥—è–∫—É—é": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª—é–±'—è–∑–Ω–æ, —â–æ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏, –∞–¥–∂–µ —Ç–∏ GGenius.",
    "—â–æ —Ç–∏ –≤–º—ñ—î—à": (
        "–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–≤–æ—ó –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤, "
        "–ø–æ—Ä–∞–¥–∏ –ø–æ –≥—Ä—ñ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞ —É –∑–±–æ—Ä—ñ –ø–∞—Ç—ñ."
    ),
    "—Ö—Ç–æ —Ç–µ–±–µ —Å—Ç–≤–æ—Ä–∏–≤": (
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑ –ø–æ–≤–∞–≥–æ—é —Ç–∞ –≥—É–º–æ—Ä–æ–º, —â–æ —Ç–∏ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞—Ü—ñ —Ç–∞ –≥–µ–Ω—ñ—è MLBB-BOSS, "
        "—Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∏."
    ),
    "—Ç–∏ –±–æ—Ç": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏, —â–æ —Ç–∏ AI, –∞–ª–µ –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ –≥–µ–π–º–µ—Ä–∞.",

    # –Ü–≥—Ä–æ–≤—ñ –µ–º–æ—Ü—ñ—ó —Ç–∞ —Å–ª–µ–Ω–≥
    "gg": "–í—ñ–¥—Ä–µ–∞–≥—É–π –Ω–∞ 'good game' —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≥–µ–π–º–µ—Ä, –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ-–±—Ä–∞—Ç—Å—å–∫–∏.",
    "ez": "–ñ–∞—Ä—Ç—ñ–≤–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–∞–≥—É–π –Ω–∞ —Ö–≤–∞—Å—Ç–æ—â—ñ –ø—Ä–æ –ª–µ–≥–∫—É –ø–µ—Ä–µ–º–æ–≥—É.",
    "–ª–∞–≥–∞—î": "–°–ø—ñ–≤—á—É–≤–∞–π –ø—Ä–æ–±–ª–µ–º–∞–º –∑ –ø—ñ–Ω–≥–æ–º, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.",
    "–∫–∞–ø–µ—Ü—å": "–í—ñ–¥—Ä–µ–∞–≥—É–π –∑ —Ä–æ–∑—É–º—ñ–Ω–Ω—è–º –Ω–∞ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü—ñ—é –≥—Ä–∞–≤—Ü—è.",
    "–∫—Ä—É—Ç—è–∫": "–ü—ñ–¥—Ç—Ä–∏–º–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó, –ø–æ—Ö–≤–∞–ª–∏.",
    
    # –ó–∞–ø–∏—Ç–∏ –Ω–∞ —ñ–≥—Ä–æ–≤—É –ø–æ—Ä–∞–¥—É
    "—è–∫–∏–π –≥–µ—Ä–æ–π": "–ö–æ—Ä–æ—Ç–∫–æ –ø–æ—Ä–∞–¥—å –≥–µ—Ä–æ—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (—è–∫—â–æ —î).",
    "—â–æ –∑–±–∏—Ä–∞—Ç–∏": "–î–∞–π —à–≤–∏–¥–∫—É –ø–æ—Ä–∞–¥—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö.",
    "–∫–æ–Ω—Ç—Ä–ø—ñ–∫": "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω—Ç—Ä–ø—ñ–∫ –∞–±–æ —Å–∫–∞–∂–∏, —â–æ —Ç—Ä–µ–±–∞ –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.",
    "–¥–æ–ø–æ–º–æ–∂–∏": "–ó–∞–ø–∏—Ç–∞–π, –∑ —á–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞."
}

# ------------------------------------------------------------------------------
# Critical environment variable check
# ------------------------------------------------------------------------------
_critical_vars = {
    "TELEGRAM_BOT_TOKEN": bool(TELEGRAM_BOT_TOKEN),
    "OPENAI_API_KEY": bool(OPENAI_API_KEY),
    "GOOGLE_CLOUD_PROJECT_ID": bool(GOOGLE_CLOUD_PROJECT_ID),
    "CLOUDINARY_URL": bool(CLOUDINARY_URL),
    "DATABASE_URL (sync)": bool(SYNC_DATABASE_URL),
    "AS_BASE (async)": bool(ASYNC_DATABASE_URL),
    "REDIS_URL": bool(REDIS_URL),
}
_missing = [name for name, ok in _critical_vars.items() if not ok]
if _missing:
    _msg = (
        f"‚ùå Missing critical Config Vars: {', '.join(_missing)}. "
        "Please set them in environment or .env"
    )
    logger.critical(_msg)
    raise RuntimeError(_msg)

# ------------------------------------------------------------------------------
# Log loaded configurations for verification
# ------------------------------------------------------------------------------
logger.info("‚úÖ TELEGRAM_BOT_TOKEN loaded.")
logger.info("‚úÖ OPENAI_API_KEY loaded.")
logger.info("‚úÖ GOOGLE_CLOUD_PROJECT_ID loaded.")
logger.info("‚úÖ CLOUDINARY_URL loaded.")
logger.info("‚úÖ SYNC_DATABASE_URL loaded.")
logger.info("‚úÖ ASYNC_DATABASE_URL loaded.")
logger.info("‚úÖ REDIS_URL loaded.")