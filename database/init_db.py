"""
–ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–æ–¥–µ–ª–µ–π SQLAlchemy
—Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –º'—è–∫—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
"""
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from config import ASYNC_DATABASE_URL, logger
from database.models import Base


async def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö: —Å—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥–æ–¥–∞—î –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –π —ñ–Ω–¥–µ–∫—Å–∏,
    —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
    """
    engine = create_async_engine(ASYNC_DATABASE_URL)
    async with engine.begin() as conn:
        logger.info("Initializing database tables...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ Base.metadata
        await conn.run_sync(Base.metadata.create_all)
        logger.info("Database tables initialized successfully.")

        # --- üß† –ë–ª–æ–∫ "–º'—è–∫–æ—ó" –º—ñ–≥—Ä–∞—Ü—ñ—ó ---
        try:
            logger.info("Applying soft migrations for 'users' table...")

            # Chat history
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS chat_history JSON"
            ))

            # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS likes_received INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS location TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS squad_name TEXT"
            ))

            # –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_cols = [
                "stats_filter_type TEXT",
                "mvp_count INTEGER",
                "legendary_count INTEGER",
                "maniac_count INTEGER",
                "double_kill_count INTEGER",
                "most_kills_in_one_game INTEGER",
                "longest_win_streak INTEGER",
                "highest_dmg_per_min INTEGER",
                "highest_gold_per_min INTEGER",
                "savage_count INTEGER",
                "triple_kill_count INTEGER",
                "mvp_loss_count INTEGER",
                "most_assists_in_one_game INTEGER",
                "first_blood_count INTEGER",
                "highest_dmg_taken_per_min INTEGER",
                "kda_ratio FLOAT",
                "teamfight_participation_rate FLOAT",
                "avg_gold_per_min INTEGER",
                "avg_hero_dmg_per_min INTEGER",
                "avg_deaths_per_match FLOAT",
                "avg_turret_dmg_per_match INTEGER",
            ]
            for col in stats_cols:
                await conn.execute(text(
                    f"ALTER TABLE users ADD COLUMN IF NOT EXISTS {col}"
                ))

            # –¢–æ–ø-3 —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤
            hero_cols = [
                ("hero1_name", "TEXT"), ("hero1_matches", "INTEGER"), ("hero1_win_rate", "FLOAT"),
                ("hero2_name", "TEXT"), ("hero2_matches", "INTEGER"), ("hero2_win_rate", "FLOAT"),
                ("hero3_name", "TEXT"), ("hero3_matches", "INTEGER"), ("hero3_win_rate", "FLOAT"),
            ]
            for name, typ in hero_cols:
                await conn.execute(text(
                    f"ALTER TABLE users ADD COLUMN IF NOT EXISTS {name} {typ}"
                ))

            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
            image_cols = [
                ("basic_profile_file_id", "TEXT"),
                ("basic_profile_permanent_url", "TEXT"),
                ("stats_photo_file_id", "TEXT"),
                ("stats_photo_permanent_url", "TEXT"),
                ("heroes_photo_file_id", "TEXT"),
                ("heroes_photo_permanent_url", "TEXT"),
                ("avatar_file_id", "TEXT"),
                ("avatar_permanent_url", "TEXT"),
            ]
            for name, typ in image_cols:
                await conn.execute(text(
                    f"ALTER TABLE users ADD COLUMN IF NOT EXISTS {name} {typ}"
                ))

            # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ player_id
            await conn.execute(text(
                "CREATE UNIQUE INDEX IF NOT EXISTS uq_users_player_id "
                "ON users (player_id)"
            ))

            logger.info("Soft migrations completed successfully.")
        except Exception as e:
            logger.error(f"Soft migration failed: {e}", exc_info=True)

    await engine.dispose()