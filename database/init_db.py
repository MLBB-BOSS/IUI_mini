"""
–ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–æ–¥–µ–ª–µ–π SQLAlchemy
—Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –º'—è–∫—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
"""
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from config import ASYNC_DATABASE_URL, logger
from database.models import Base


async def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö: —Å—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥–æ–¥–∞—î –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –π —ñ–Ω–¥–µ–∫—Å–∏,
    —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
    """
    engine = create_async_engine(ASYNC_DATABASE_URL)
    async with engine.begin() as conn:
        logger.info("Initializing database tables...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ Base.metadata
        await conn.run_sync(Base.metadata.create_all)
        logger.info("Database tables initialized successfully.")

        # --- üß† –ë–ª–æ–∫ "–º'—è–∫–æ—ó" –º—ñ–≥—Ä–∞—Ü—ñ—ó ---
        try:
            # Chat history
            logger.info("Ensuring 'chat_history' column exists...")
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS chat_history JSON"
            ))

            # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
            logger.info("Ensuring basic profile columns exist...")
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS likes_received INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS location TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS squad_name TEXT"
            ))

            # –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info("Ensuring detailed stats columns exist...")
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS stats_filter_type TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS mvp_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS legendary_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS maniac_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS double_kill_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS most_kills_in_one_game INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS longest_win_streak INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS highest_dmg_per_min INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS highest_gold_per_min INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS savage_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS triple_kill_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS mvp_loss_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS most_assists_in_one_game INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS first_blood_count INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS highest_dmg_taken_per_min INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS kda_ratio FLOAT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS teamfight_participation_rate FLOAT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avg_gold_per_min INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avg_hero_dmg_per_min INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avg_deaths_per_match FLOAT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avg_turret_dmg_per_match INTEGER"
            ))

            # –¢–æ–ø-3 —É–ª—é–±–ª–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤
            logger.info("Ensuring favorite heroes columns exist...")
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero1_name TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero1_matches INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero1_win_rate FLOAT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero2_name TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero2_matches INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero2_win_rate FLOAT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero3_name TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero3_matches INTEGER"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS hero3_win_rate FLOAT"
            ))

            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
            logger.info("Ensuring image file_id and URL columns exist...")
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS basic_profile_file_id TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS basic_profile_permanent_url TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS stats_photo_file_id TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS stats_photo_permanent_url TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS heroes_photo_file_id TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS heroes_photo_permanent_url TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avatar_file_id TEXT"
            ))
            await conn.execute(text(
                "ALTER TABLE users ADD COLUMN IF NOT EXISTS avatar_permanent_url TEXT"
            ))

            # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ player_id
            logger.info("Ensuring unique index on 'player_id' exists...")
            await conn.execute(text(
                "CREATE UNIQUE INDEX IF NOT EXISTS uq_users_player_id ON users (player_id)"
            ))

            logger.info("Soft migration completed successfully.")
        except Exception as e:
            logger.error(f"Soft migration step failed: {e}", exc_info=True)

    await engine.dispose()
