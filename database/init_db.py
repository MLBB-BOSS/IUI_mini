"""
–ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–æ–¥–µ–ª–µ–π SQLAlchemy.
"""
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from config import ASYNC_DATABASE_URL, logger
from database.models import Base

async def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏/–¥–æ–¥–∞—é—á–∏ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∏.
    """
    engine = create_async_engine(ASYNC_DATABASE_URL)
    async with engine.begin() as conn:
        logger.info("Initializing database tables...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ Base.metadata (—è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å)
        await conn.run_sync(Base.metadata.create_all)
        logger.info("Database tables initialized successfully (if they did not exist).")

        # --- üß† –ë–ª–æ–∫ "–º'—è–∫–æ—ó" –º—ñ–≥—Ä–∞—Ü—ñ—ó ---
        try:
            # 1. –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ chat_history
            logger.info("Checking for missing 'chat_history' column...")
            add_column_sql = text("ALTER TABLE users ADD COLUMN IF NOT EXISTS chat_history JSON")
            await conn.execute(add_column_sql)
            logger.info("Successfully ensured 'chat_history' column exists.")

            # 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è player_id
            logger.info("Checking for unique index on 'player_id'...")
            # –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è PostgreSQL, —è–∫–∞ –Ω–µ –≤–∏–¥–∞—Å—Ç—å –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —ñ–Ω–¥–µ–∫—Å –≤–∂–µ —ñ—Å–Ω—É—î
            add_unique_index_sql = text("CREATE UNIQUE INDEX IF NOT EXISTS uq_users_player_id ON users (player_id)")
            await conn.execute(add_unique_index_sql)
            logger.info("Successfully ensured unique index exists for 'player_id'.")

        except Exception as e:
            # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
            logger.error(f"Could not perform a soft migration step: {e}", exc_info=True)
            
    await engine.dispose()
