"""
–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (Create, Read, Update, Delete).
"""
import asyncpg
from typing import Optional, Dict, Any
from sqlalchemy import insert, update, select, delete
from sqlalchemy.ext.asyncio import create_async_engine

from database.models import User
# üÜï –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ASYNC_DATABASE_URL –¥–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —É –±–æ—Ç—ñ
from config import ASYNC_DATABASE_URL, logger

# üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –¥–≤–∏–≥—É–Ω –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
engine = create_async_engine(ASYNC_DATABASE_URL)

async def add_or_update_user(user_data: Dict[str, Any]) -> None:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    async with engine.connect() as conn:
        async with conn.begin(): # –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            user_exists_stmt = select(User.telegram_id).where(User.telegram_id == user_data['telegram_id'])
            existing_user = await conn.execute(user_exists_stmt)
            
            if existing_user.scalar_one_or_none() is not None:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                stmt = (
                    update(User)
                    .where(User.telegram_id == user_data['telegram_id'])
                    .values(**user_data)
                )
                logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {user_data['telegram_id']}")
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                stmt = insert(User).values(**user_data)
                logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {user_data['telegram_id']}")

            await conn.execute(stmt)
        await conn.commit() # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é

async def get_user_by_telegram_id(telegram_id: int) -> Optional[Dict[str, Any]]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    async with engine.connect() as conn:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await conn.execute(stmt)
        user_row = result.first()
        if user_row:
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Å–ª–æ–≤–Ω–∏–∫
            return dict(user_row._mapping)
    return None

async def delete_user_by_telegram_id(telegram_id: int) -> bool:
    """
    –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –π–æ–≥–æ Telegram ID.

    Args:
        telegram_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    Returns:
        True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —ñ–Ω–∞–∫—à–µ False.
    """
    async with engine.connect() as conn:
        async with conn.begin():
            stmt = delete(User).where(User.telegram_id == telegram_id)
            result = await conn.execute(stmt)
            await conn.commit()
            # result.rowcount > 0 –æ–∑–Ω–∞—á–∞—î, —â–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫
            if result.rowcount > 0:
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                return True
            else:
                logger.warning(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id}.")
                return False
