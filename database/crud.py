"""
–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (Create, Read, Update, Delete).
"""
import asyncpg
from typing import Optional, Dict, Any, Literal
from sqlalchemy import insert, update, select, delete
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.exc import IntegrityError

from database.models import User
from config import ASYNC_DATABASE_URL, logger

from datetime import datetime

engine = create_async_engine(ASYNC_DATABASE_URL)

def _ensure_datetime(val):
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ —É datetime, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    –ü—Ä–∏–π–º–∞—î None –∞–±–æ datetime ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î —è–∫ —î.
    """
    if isinstance(val, str):
        try:
            # ISO 8601 format –∑ +00:00
            return datetime.fromisoformat(val.replace('Z', '+00:00'))
        except Exception:
            return None
    return val

async def add_or_update_user(user_data: Dict[str, Any]) -> Literal['success', 'conflict', 'error']:
    """
    –î–æ–¥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å player_id.

    Returns:
        - 'success': –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
        - 'conflict': –¢–∞–∫–∏–π player_id –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—à–∏–º telegram_id.
        - 'error': –°—Ç–∞–ª–∞—Å—è —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.
    """
    # üß† –£–Ω–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ —Ä—è–¥–∫—ñ–≤ —É –ø–æ–ª—è datetime!
    for dt_field in ("created_at", "updated_at"):
        if dt_field in user_data:
            # –í–∏–¥–∞–ª—è—î–º–æ, —â–æ–± –ë–î —Å–∞–º–∞ –ø—Ä–æ—Å—Ç–∞–≤–∏–ª–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
            user_data.pop(dt_field)

    async with engine.connect() as conn:
        async with conn.begin():
            telegram_id = user_data.get('telegram_id')
            player_id = user_data.get('player_id')

            try:
                # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id
                user_by_telegram_id = await conn.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                existing_user = user_by_telegram_id.first()

                if existing_user:
                    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id –≤–∂–µ —ñ—Å–Ω—É—î - —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    stmt = (
                        update(User)
                        .where(User.telegram_id == telegram_id)
                        .values(**user_data)
                    )
                    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {telegram_id}")
                else:
                    # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ü—å–æ–≥–æ telegram_id - —Ü–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                    stmt = insert(User).values(**user_data)
                    logger.info(f"–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {telegram_id}")

                await conn.execute(stmt)
                await conn.commit()
                return 'success'

            except IntegrityError as e:
                await conn.rollback() # –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                # üß† –ë—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ PostgreSQL.
                # SQLAlchemy –º–æ–∂–µ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É "–∑–∞–≥–æ—Ä—Ç–∞—Ç–∏" –≤–∏—Ö—ñ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞.
                error_text = str(e).lower()
                if 'unique constraint' in error_text and ('uq_users_player_id' in error_text or 'users_player_id_key' in error_text):
                    logger.warning(f"–ö–æ–Ω—Ñ–ª—ñ–∫—Ç: Player ID {player_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –°–ø—Ä–æ–±–∞ –≤—ñ–¥ Telegram ID {telegram_id}.")
                    return 'conflict'
                else:
                    logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ: {e}", exc_info=True)
                    return 'error'
            except Exception as e:
                await conn.rollback()
                logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ add_or_update_user: {e}", exc_info=True)
                return 'error'


async def get_user_by_telegram_id(telegram_id: int) -> Optional[Dict[str, Any]]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    async with engine.connect() as conn:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await conn.execute(stmt)
        user_row = result.first()
        if user_row:
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Å–ª–æ–≤–Ω–∏–∫
            return dict(user_row._mapping)
    return None

async def delete_user_by_telegram_id(telegram_id: int) -> bool:
    """
    –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –π–æ–≥–æ Telegram ID.

    Args:
        telegram_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    Returns:
        True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —ñ–Ω–∞–∫—à–µ False.
    """
    async with engine.connect() as conn:
        async with conn.begin():
            stmt = delete(User).where(User.telegram_id == telegram_id)
            result = await conn.execute(stmt)
            await conn.commit()
            # result.rowcount > 0 –æ–∑–Ω–∞—á–∞—î, —â–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫
            if result.rowcount > 0:
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                return True
            else:
                logger.warning(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id}.")
                return False
