"""
–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (Create, Read, Update, Delete).
"""
from typing import Any, Literal

from sqlalchemy import insert, update, select, delete
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy.exc import IntegrityError

from database.models import User, UserSettings
from config import ASYNC_DATABASE_URL, logger

engine = create_async_engine(ASYNC_DATABASE_URL)


# --- User CRUD ---

async def add_or_update_user(user_data: dict[str, Any]) -> Literal['success', 'conflict', 'error']:
    # ... (–∫–æ–¥ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    """
    –î–æ–¥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å player_id.

    Returns:
        - 'success': –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
        - 'conflict': –¢–∞–∫–∏–π player_id –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—à–∏–º telegram_id.
        - 'error': –°—Ç–∞–ª–∞—Å—è —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.
    """
    # üß† –£–Ω–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ —Ä—è–¥–∫—ñ–≤ —É –ø–æ–ª—è datetime!
    for dt_field in ("created_at", "updated_at"):
        if dt_field in user_data:
            # –í–∏–¥–∞–ª—è—î–º–æ, —â–æ–± –ë–î —Å–∞–º–∞ –ø—Ä–æ—Å—Ç–∞–≤–∏–ª–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
            user_data.pop(dt_field)

    async with engine.connect() as conn:
        async with conn.begin():
            telegram_id = user_data.get('telegram_id')
            player_id = user_data.get('player_id')

            try:
                # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id
                user_by_telegram_id = await conn.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                existing_user = user_by_telegram_id.first()

                if existing_user:
                    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id –≤–∂–µ —ñ—Å–Ω—É—î - —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    stmt = (
                        update(User)
                        .where(User.telegram_id == telegram_id)
                        .values(**user_data)
                    )
                    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {telegram_id}")
                else:
                    # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ü—å–æ–≥–æ telegram_id - —Ü–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                    stmt = insert(User).values(**user_data)
                    logger.info(f"–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: {telegram_id}")

                await conn.execute(stmt)
                await conn.commit()
                return 'success'

            except IntegrityError as e:
                await conn.rollback() # –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                # üß† –ë—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ PostgreSQL.
                # SQLAlchemy –º–æ–∂–µ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É "–∑–∞–≥–æ—Ä—Ç–∞—Ç–∏" –≤–∏—Ö—ñ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞.
                error_text = str(e).lower()
                if 'unique constraint' in error_text and ('uq_users_player_id' in error_text or 'users_player_id_key' in error_text):
                    logger.warning(f"–ö–æ–Ω—Ñ–ª—ñ–∫—Ç: Player ID {player_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –°–ø—Ä–æ–±–∞ –≤—ñ–¥ Telegram ID {telegram_id}.")
                    return 'conflict'
                else:
                    logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ: {e}", exc_info=True)
                    return 'error'
            except Exception as e:
                await conn.rollback()
                logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ add_or_update_user: {e}", exc_info=True)
                return 'error'


async def get_user_by_telegram_id(telegram_id: int) -> dict[str, Any] | None:
    # ... (–∫–æ–¥ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    async with engine.connect() as conn:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await conn.execute(stmt)
        user_row = result.first()
        if user_row:
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Å–ª–æ–≤–Ω–∏–∫
            return dict(user_row._mapping)
    return None

async def delete_user_by_telegram_id(telegram_id: int) -> bool:
    # ... (–∫–æ–¥ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    """
    –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –π–æ–≥–æ Telegram ID.

    Args:
        telegram_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    Returns:
        True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —ñ–Ω–∞–∫—à–µ False.
    """
    async with engine.connect() as conn:
        async with conn.begin():
            stmt = delete(User).where(User.telegram_id == telegram_id)
            result = await conn.execute(stmt)
            await conn.commit()
            # result.rowcount > 0 –æ–∑–Ω–∞—á–∞—î, —â–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫
            if result.rowcount > 0:
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                return True
            else:
                logger.warning(f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID {telegram_id}.")
                return False

# --- UserSettings CRUD ---

async def get_user_settings(telegram_id: int) -> UserSettings:
    """
    –û—Ç—Ä–∏–º—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î.
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç UserSettings –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    """
    async with engine.connect() as conn:
        stmt = select(UserSettings).where(UserSettings.telegram_id == telegram_id)
        result = await conn.execute(stmt)
        settings_row = result.first()
        if settings_row:
            return UserSettings(**settings_row._mapping)
    # –Ø–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –æ–±'—î–∫—Ç
    return UserSettings(telegram_id=telegram_id)


async def update_user_settings(telegram_id: int, **kwargs) -> bool:
    """
    –û–Ω–æ–≤–ª—é—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î (upsert) –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –ü—Ä–∏–π–º–∞—î —ñ–º–µ–Ω–æ–≤–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º –º–æ–¥–µ–ª—ñ UserSettings.
    """
    if not kwargs:
        logger.warning("update_user_settings –≤–∏–∫–ª–∏–∫–∞–Ω–æ –±–µ–∑ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
        return False

    async with engine.connect() as conn:
        try:
            async with conn.begin():
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –¥–ª—è PostgreSQL INSERT ... ON CONFLICT DO UPDATE
                stmt = pg_insert(UserSettings).values(telegram_id=telegram_id, **kwargs)
                stmt = stmt.on_conflict_do_update(
                    index_elements=['telegram_id'],
                    set_=kwargs
                )
                await conn.execute(stmt)
                await conn.commit()
                logger.info(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ: {kwargs}")
                return True
        except Exception as e:
            await conn.rollback()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è {telegram_id}: {e}", exc_info=True)
            return False

# –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—É –º–æ–∂–Ω–∞ –±—É–¥–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Å–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É
async def set_user_mute_status(telegram_id: int, is_muted: bool) -> bool:
    """
    DEPRECATED: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∞–±–æ –∑–Ω—ñ–º–∞—î —Å—Ç–∞—Ç—É—Å "–º'—é—Ç—É" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –ó–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ update_user_settings.
    """
    logger.warning("–í–∏–∫–ª–∏–∫–∞–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É —Ñ—É–Ω–∫—Ü—ñ—é set_user_mute_status. "
                   "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ update_user_settings.")
    return await update_user_settings(
        telegram_id,
        mute_chat=is_muted,
        mute_vision=is_muted,
        mute_party=is_muted
    )
