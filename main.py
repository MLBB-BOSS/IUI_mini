import asyncio
import logging
import os
from datetime import datetime, timezone, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramAPIError

from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
# –¶–µ —Ä–æ–±–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∏—Å—Ç–æ—é —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ—é
from app.handlers.general_handlers import general_router, cmd_go, general_error_handler
from app.handlers.vision_handlers import register_vision_handlers # –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ —Ü–µ–π —Ñ–∞–π–ª —ñ—Å–Ω—É—î
from app.handlers.gemini_handlers import gemini_router # –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ —Ü–µ–π —Ñ–∞–π–ª —ñ—Å–Ω—É—î

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä,
    —Ä–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –ø–æ–º–∏–ª–æ–∫, —ñ –∑–∞–ø—É—Å–∫–∞—î polling.
    """
    bot_version = "v3.2.0 (—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫)"
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini {bot_version}... (PID: {os.getpid()})")

    storage = MemoryStorage()
    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    dp.include_router(general_router)
    # –ü—Ä–∏–∫–ª–∞–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    # register_vision_handlers(dp, cmd_go_handler_func=cmd_go)
    # dp.include_router(gemini_router)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫.
    # –ü–µ—Ä–µ–¥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    dp.errors.register(general_error_handler, bot=bot)

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")

        if ADMIN_USER_ID:
            await notify_admin_on_startup(bot, bot_info, bot_version)

        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt).")
    except TelegramAPIError as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        await dp.storage.close()
        await bot.session.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

async def notify_admin_on_startup(bot: Bot, bot_info: types.User, bot_version: str):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –¥–µ—Ç–∞–ª—å–Ω–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    try:
        kyiv_tz = timezone(timedelta(hours=3))
        launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')

        admin_message_lines = [
            f"ü§ñ <b>MLBB IUI mini {bot_version} –∑–∞–ø—É—â–µ–Ω–æ!</b>",
            "",
            f"üÜî @{bot_info.username}",
            f"‚è∞ {launch_time_kyiv}",
            "---",
            "‚ú® <b>–ö–ª—é—á–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</b>",
            "  ‚Ä¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É `AttributeError`.",
            "  ‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É `aiogram 3.x`.",
            "  ‚Ä¢ –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏.",
            "üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
        ]
        admin_message = "\n".join(admin_message_lines)

        await bot.send_message(str(ADMIN_USER_ID), admin_message, parse_mode=ParseMode.HTML)
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É (ID: {ADMIN_USER_ID}): {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(main())
