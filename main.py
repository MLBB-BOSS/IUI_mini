# handlers/mlbb_vision_handler.py
"""
üéÆ MLBB Elite Vision Handler - Revolutionary Screenshot Analysis

–°–≤—ñ—Ç–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–∞–ª—ñ–∑—É Mobile Legends: Bang Bang —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
GPT-4 Vision API. –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ user experience.

Features:
- ‚ö° Intelligent caching system –∑ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–º —Ö–µ—à—É–≤–∞–Ω–Ω—è–º
- üß† Adaptive prompt engineering –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É  
- üìä Real-time cost tracking —Ç–∞ performance monitoring
- üõ°Ô∏è Robust error handling –∑ exponential backoff
- üöÄ Streaming responses –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è UX
- üíé Enterprise-grade logging —Ç–∞ metrics

Author: MLBB-BOSS
Version: 1.0.0
Created: 2025-05-24
Python: 3.11+
"""

import asyncio
import base64
import hashlib
import logging
import time
from contextlib import asynccontextmanager
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum, auto
from functools import wraps
from pathlib import Path
from typing import (
    Any, Dict, List, Optional, Tuple, Union, 
    Callable, Awaitable, TypeVar, Generic
)
from io import BytesIO
import json
import re

import aiohttp
import aiofiles
from PIL import Image, ImageStat
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from tenacity import (
    retry, stop_after_attempt, wait_exponential, 
    retry_if_exception_type, before_sleep_log
)

# –Ü—Å–Ω—É—é—á—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑ —Ç–≤–æ—î—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
from config.settings import (
    OPENAI_API_KEY, VISION_MODEL_FULL, VISION_MODEL_MINI,
    VISION_MAX_TOKENS, VISION_TEMPERATURE, ADMIN_IDS, TEMP_DIR
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
T = TypeVar('T')

class ContentType(Enum):
    """–¢–∏–ø–∏ MLBB –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."""
    PROFILE = auto()
    HERO_STATS = auto() 
    MATCH_RESULT = auto()
    RANK_PROGRESS = auto()
    HERO_BUILD = auto()
    TEAM_COMPOSITION = auto()
    GENERAL = auto()

class AnalysisQuality(Enum):
    """–†—ñ–≤–Ω—ñ —è–∫–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É."""
    FAST = "fast"           # gpt-4o-mini, —à–≤–∏–¥–∫–æ, –¥–µ—à–µ–≤—à–µ
    DETAILED = "detailed"   # gpt-4o, –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    PREMIUM = "premium"     # gpt-4o + –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

@dataclass
class VisionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Vision API."""
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    cache_hits: int = 0
    cache_misses: int = 0
    total_tokens: int = 0
    total_cost_usd: float = 0.0
    avg_response_time: float = 0.0
    start_time: datetime = field(default_factory=datetime.now)
    
    @property
    def success_rate(self) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤."""
        if self.total_requests == 0:
            return 0.0
        return (self.successful_requests / self.total_requests) * 100
    
    @property
    def cache_hit_rate(self) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–ø–∞–¥–∞–Ω—å –≤ –∫–µ—à."""
        total_cache_requests = self.cache_hits + self.cache_misses
        if total_cache_requests == 0:
            return 0.0
        return (self.cache_hits / total_cache_requests) * 100

@dataclass
class CacheEntry:
    """–ó–∞–ø–∏—Å –≤ –∫–µ—à—ñ –∞–Ω–∞–ª—ñ–∑—É."""
    content_hash: str
    analysis_result: str
    metadata: Dict[str, Any]
    timestamp: datetime
    access_count: int = 0
    last_accessed: datetime = field(default_factory=datetime.now)
    ttl_seconds: int = 3600  # 1 –≥–æ–¥–∏–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    @property
    def is_expired(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∑–∞–ø–∏—Å."""
        return datetime.now() - self.timestamp > timedelta(seconds=self.ttl_seconds)
    
    def update_access(self) -> None:
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø—É."""
        self.access_count += 1
        self.last_accessed = datetime.now()

class MLBBVisionCache:
    """
    –í–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –∫–µ—à –¥–ª—è Vision API –∑ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º.
    
    Features:
    - LRU eviction policy
    - TTL management
    - Content-based hashing
    - Access statistics
    """
    
    def __init__(self, max_size: int = 500, default_ttl: int = 3600):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–µ—à –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
        
        Args:
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            default_ttl: TTL –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self._cache: Dict[str, CacheEntry] = {}
        self._max_size = max_size
        self._default_ttl = default_ttl
        self._access_order: List[str] = []
        
    async def get(self, content_hash: str) -> Optional[CacheEntry]:
        """
        –û—Ç—Ä–∏–º—É—î –∑–∞–ø–∏—Å –∑ –∫–µ—à—É.
        
        Args:
            content_hash: –•–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É
            
        Returns:
            –ó–∞–ø–∏—Å –∫–µ—à—É –∞–±–æ None
        """
        if content_hash not in self._cache:
            return None
            
        entry = self._cache[content_hash]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTL
        if entry.is_expired:
            await self._remove_entry(content_hash)
            return None
            
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø—É
        entry.update_access()
        
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å (LRU)
        if content_hash in self._access_order:
            self._access_order.remove(content_hash)
        self._access_order.append(content_hash)
        
        return entry
    
    async def set(
        self, 
        content_hash: str, 
        analysis_result: str, 
        metadata: Dict[str, Any],
        ttl_seconds: Optional[int] = None
    ) -> None:
        """
        –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å –≤ –∫–µ—à—ñ.
        
        Args:
            content_hash: –•–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
            metadata: –ú–µ—Ç–∞–¥–∞–Ω—ñ
            ttl_seconds: TTL –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
        if len(self._cache) >= self._max_size:
            await self._evict_lru()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        entry = CacheEntry(
            content_hash=content_hash,
            analysis_result=analysis_result,
            metadata=metadata,
            timestamp=datetime.now(),
            ttl_seconds=ttl_seconds or self._default_ttl
        )
        
        self._cache[content_hash] = entry
        
        # –î–æ–¥–∞—î–º–æ –≤ –ø–æ—Ä—è–¥–æ–∫ –¥–æ—Å—Ç—É–ø—É
        if content_hash in self._access_order:
            self._access_order.remove(content_hash)
        self._access_order.append(content_hash)
    
    async def _remove_entry(self, content_hash: str) -> None:
        """–í–∏–¥–∞–ª—è—î –∑–∞–ø–∏—Å –∑ –∫–µ—à—É."""
        self._cache.pop(content_hash, None)
        if content_hash in self._access_order:
            self._access_order.remove(content_hash)
    
    async def _evict_lru(self) -> None:
        """–í–∏–¥–∞–ª—è—î –Ω–∞–π–º–µ–Ω—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π –∑–∞–ø–∏—Å."""
        if self._access_order:
            lru_key = self._access_order[0]
            await self._remove_entry(lru_key)
    
    async def cleanup_expired(self) -> int:
        """
        –û—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏.
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        """
        expired_keys = [
            key for key, entry in self._cache.items() 
            if entry.is_expired
        ]
        
        for key in expired_keys:
            await self._remove_entry(key)
            
        return len(expired_keys)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É."""
        return {
            'size': len(self._cache),
            'max_size': self._max_size,
            'fill_percentage': (len(self._cache) / self._max_size) * 100,
            'entries': [
                {
                    'hash': entry.content_hash[:8],
                    'access_count': entry.access_count,
                    'age_seconds': (datetime.now() - entry.timestamp).total_seconds(),
                    'ttl_remaining': entry.ttl_seconds - (datetime.now() - entry.timestamp).total_seconds()
                }
                for entry in self._cache.values()
            ]
        }

class ImageProcessor:
    """
    –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è MLBB —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤.
    
    –û–ø—Ç–∏–º—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è Vision API —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    """
    
    # –†–æ–∑–º—ñ—Ä–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏
    MAX_DIMENSION = 2048
    MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB
    SUPPORTED_FORMATS = {'JPEG', 'PNG', 'WEBP'}
    QUALITY_SETTINGS = {
        AnalysisQuality.FAST: {'max_dim': 1024, 'quality': 75},
        AnalysisQuality.DETAILED: {'max_dim': 2048, 'quality': 85},
        AnalysisQuality.PREMIUM: {'max_dim': 2048, 'quality': 95}
    }
    
    @staticmethod
    def calculate_content_hash(image_bytes: bytes) -> str:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π —Ö–µ—à –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        
        –í—Ä–∞—Ö–æ–≤—É—î –Ω–µ —Ç—ñ–ª—å–∫–∏ –±–∞–π—Ç–∏, –∞–ª–µ –π –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.
        
        Args:
            image_bytes: –ë–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            
        Returns:
            –•–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É
        """
        try:
            # –ë–∞–∑–æ–≤–∏–π —Ö–µ—à —Ñ–∞–π–ª—É
            file_hash = hashlib.md5(image_bytes).hexdigest()
            
            # –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            with Image.open(BytesIO(image_bytes)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # –ó–º–µ–Ω—à—É—î–º–æ –¥–æ 8x8 –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ —Ö–µ—à—É–≤–∞–Ω–Ω—è
                small_img = img.resize((8, 8), Image.Resampling.LANCZOS)
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤
                stat = ImageStat.Stat(small_img)
                semantic_data = f"{stat.mean}_{stat.stddev}_{img.size}"
                semantic_hash = hashlib.md5(semantic_data.encode()).hexdigest()[:8]
                
                return f"{file_hash[:16]}_{semantic_hash}"
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ —Ö–µ—à—É–≤–∞–Ω–Ω—è: {e}")
            # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö–µ—à—É
            return hashlib.md5(image_bytes).hexdigest()
    
    @staticmethod
    async def optimize_image(
        image_bytes: bytes, 
        quality: AnalysisQuality = AnalysisQuality.DETAILED
    ) -> Tuple[bytes, Dict[str, Any]]:
        """
        –û–ø—Ç–∏–º—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è Vision API.
        
        Args:
            image_bytes: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –±–∞–π—Ç–∏
            quality: –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ –æ–±—Ä–æ–±–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –±–∞–π—Ç–∏, –º–µ—Ç–∞–¥–∞–Ω—ñ)
        """
        start_time = time.time()
        original_size = len(image_bytes)
        
        try:
            settings = ImageProcessor.QUALITY_SETTINGS[quality]
            
            with Image.open(BytesIO(image_bytes)) as img:
                metadata = {
                    'original_size': original_size,
                    'original_dimensions': img.size,
                    'original_format': img.format,
                    'original_mode': img.mode
                }
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB
                if img.mode not in ('RGB', 'RGBA'):
                    img = img.convert('RGB')
                elif img.mode == 'RGBA':
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Ñ–æ–Ω –¥–ª—è RGBA
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[-1])
                    img = background
                
                # –û–±–µ—Ä—Ç–∞—î–º–æ –∑–∞ EXIF
                img = ImageProcessor._apply_exif_rotation(img)
                
                # –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if max(img.size) > settings['max_dim']:
                    ratio = settings['max_dim'] / max(img.size)
                    new_size = tuple(int(dim * ratio) for dim in img.size)
                    img = img.resize(new_size, Image.Resampling.LANCZOS)
                    logger.debug(f"üîß –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ: {img.size}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ
                output = BytesIO()
                img.save(
                    output, 
                    format='JPEG', 
                    quality=settings['quality'], 
                    optimize=True,
                    progressive=True
                )
                
                optimized_bytes = output.getvalue()
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
                metadata.update({
                    'optimized_size': len(optimized_bytes),
                    'optimized_dimensions': img.size,
                    'compression_ratio': original_size / len(optimized_bytes),
                    'processing_time': time.time() - start_time,
                    'quality_level': quality.value
                })
                
                logger.debug(
                    f"üì∏ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: {original_size} ‚Üí {len(optimized_bytes)} –±–∞–π—Ç "
                    f"({metadata['compression_ratio']:.1f}x, {metadata['processing_time']:.2f}s)"
                )
                
                return optimized_bytes, metadata
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª –∑ –±–∞–∑–æ–≤–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
            return image_bytes, {
                'original_size': original_size,
                'optimization_failed': True,
                'error': str(e)
            }
    
    @staticmethod
    def _apply_exif_rotation(img: Image.Image) -> Image.Image:
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î EXIF —Ä–æ—Ç–∞—Ü—ñ—é –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
        try:
            exif = img._getexif()
            if exif is not None:
                orientation = exif.get(274)  # EXIF Orientation tag
                if orientation == 3:
                    img = img.rotate(180, expand=True)
                elif orientation == 6:
                    img = img.rotate(270, expand=True)
                elif orientation == 8:
                    img = img.rotate(90, expand=True)
        except (AttributeError, KeyError, TypeError):
            pass  # –ù–µ–º–∞—î EXIF –∞–±–æ –ø–æ–º–∏–ª–∫–∞
        return img
    
    @staticmethod
    def detect_content_type(image_bytes: bytes) -> ContentType:
        """
        –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø MLBB –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.
        
        Args:
            image_bytes: –ë–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            
        Returns:
            –í–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
        """
        try:
            with Image.open(BytesIO(image_bytes)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                small_img = img.resize((224, 224), Image.Resampling.LANCZOS)
                
                # –ê–Ω–∞–ª—ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –ø–∞–ª—ñ—Ç—Ä–∏
                stat = ImageStat.Stat(small_img)
                avg_brightness = sum(stat.mean) / 3
                
                # –ê–Ω–∞–ª—ñ–∑ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω
                aspect_ratio = img.width / img.height
                
                # –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (–≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É - ML –º–æ–¥–µ–ª—å)
                if 0.45 <= aspect_ratio <= 0.55:  # –ö–≤–∞–¥—Ä–∞—Ç–∏—à—ñ - –ø—Ä–æ—Ñ—ñ–ª—å
                    return ContentType.PROFILE
                elif aspect_ratio > 1.5:  # –®–∏—Ä–æ–∫—ñ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á—É
                    return ContentType.MATCH_RESULT
                elif avg_brightness > 150:  # –°–≤—ñ—Ç–ª—ñ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    return ContentType.HERO_STATS
                else:
                    return ContentType.GENERAL
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
            return ContentType.GENERAL

class PromptEngine:
    """
    –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ MLBB –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —è–∫–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É.
    """
    
    # –ë–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    BASE_PROMPTS = {
        ContentType.PROFILE: """
üéÆ **MLBB Profile Expert Analysis**

–¢–∏ –ø—Ä–æ–≤—ñ–¥–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ Mobile Legends: Bang Bang –∑ 7+ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –≤ –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—ñ.

üìã **–ó–ê–í–î–ê–ù–ù–Ø**: –ü—Ä–æ–≤–µ–¥–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è MLBB —Ç–∞ –Ω–∞–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

üìä **–°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–Ü–ó–£**:

üë§ **–ü–†–û–§–Ü–õ–¨ –ì–†–ê–í–¶–Ø**
- Username —Ç–∞ MLBB ID (—è–∫—â–æ –≤–∏–¥–Ω–æ)
- –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥ —Ç–∞ —Å–µ–∑–æ–Ω–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
- –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á—ñ–≤ —Ç–∞ WinRate
- –†—ñ–≤–µ–Ω—å –∞–∫–∞—É–Ω—Ç—É —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

‚≠ê **–û–¶–Ü–ù–ö–ê –ü–†–û–ì–†–ï–°–£**
- –ê–Ω–∞–ª—ñ–∑ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω –≥—Ä–∞–≤—Ü—è
- –í–∏—è–≤–ª–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è  
- –û—Ü—ñ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
- –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏

üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á**
- –ö–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —Ü—ñ–ª—ñ (1-2 —Ç–∏–∂–Ω—ñ)
- –°–µ—Ä–µ–¥–Ω—å–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —Ü—ñ–ª—ñ (–º—ñ—Å—è—Ü—å)
- –î–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —Ü—ñ–ª—ñ (—Å–µ–∑–æ–Ω)
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ä–æ–ª—ñ —Ç–∞ –≥–µ—Ä–æ—ó

üìà **–°–¢–†–ê–¢–ï–ì–Ü–ß–ù–ò–ô –ü–õ–ê–ù**
- –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–Ω–≥—É –¥–æ –∫—ñ–Ω—Ü—è —Å–µ–∑–æ–Ω—É
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ–ª–µ–π
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Å—Ç–∏–ª—é –≥—Ä–∏

üîç **–¢–ï–•–ù–Ü–ß–ù–Ü –î–ï–¢–ê–õ–Ü**
–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ, markdown —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ú–æ—Ç–∏–≤—É–π –≥—Ä–∞–≤—Ü—è —Ç–∞ –Ω–∞–¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É –∫—Ä–∏—Ç–∏–∫—É.
""",
        
        ContentType.HERO_STATS: """
ü¶∏ **MLBB Hero Performance Analysis**

–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≥–µ—Ä–æ—ó–≤ Mobile Legends: Bang Bang —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π coach.

üìã **–ó–ê–í–î–ê–ù–ù–Ø**: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—è —Ç–∞ –Ω–∞–¥–∞–π –µ–∫—Å–ø–µ—Ä—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è performance —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

üìä **–°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–Ü–ó–£**:

ü¶∏ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–†–û–Ø**
- –ù–∞–∑–≤–∞ –≥–µ—Ä–æ—è, —Ä–æ–ª—å —Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ—Ç—ñ
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ —Ç–∞ WinRate –∑ –≥–µ—Ä–æ—î–º
- KDA —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –†—ñ–≤–µ–Ω—å –º–∞–π—Å—Ç–µ—Ä–Ω–æ—Å—Ç—ñ —Ç–∞ –¥–æ—Å–≤—ñ–¥

üíé **–ê–ù–ê–õ–Ü–ó –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü**
- –û—Ü—ñ–Ω–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
- –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –ø–æ —Ä–æ–ª—ñ
- –°–∏–ª—å–Ω—ñ —Ç–∞ —Å–ª–∞–±–∫—ñ –∞—Å–ø–µ–∫—Ç–∏ –≥–µ–π–º–ø–ª–µ—é
- –ê–Ω–∞–ª—ñ–∑ consistency performance

‚öîÔ∏è **–ì–ï–ô–ú–ü–õ–ï–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á**
- –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—ñ–ª–¥ (–ø—Ä–µ–¥–º–µ—Ç–∏) –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –µ–º–±–ª–µ–º–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
- –¢–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ñ–∞–∑–∞—Ö –≥—Ä–∏
- –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–æ—Ç–∞—Ü—ñ—ó

üéØ **–ü–õ–ê–ù –£–î–û–°–ö–û–ù–ê–õ–ï–ù–ù–Ø**
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
- –Ü–≥—Ä–æ–≤—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è
- –¶—ñ–ª—ñ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
- –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏ —Ç–∞ —Å–∏–Ω–µ—Ä–≥—ñ—ó –≤ –∫–æ–º–∞–Ω–¥—ñ

üîç **–ú–ï–¢–ê-–ê–ù–ê–õ–Ü–ó**
–í—Ä–∞—Ö–æ–≤—É–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–ª–∞–Ω—Å—É –≥–µ—Ä–æ—è, –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å –≤ —Ä–∞–Ω–∫–µ–¥ —ñ–≥—Ä–∞—Ö —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä–∞–Ω–≥–∞—Ö.
""",
        
        ContentType.MATCH_RESULT: """
‚öîÔ∏è **MLBB Match Performance Analysis**

–¢–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –º–∞—Ç—á—ñ–≤ MLBB —Ç–∞ coach –≤–∏—Å–æ–∫–æ–≥–æ —Ä—ñ–≤–Ω—è.

üìã **–ó–ê–í–î–ê–ù–ù–Ø**: –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä –º–∞—Ç—á—É —Ç–∞ –Ω–∞–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ insights —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

üìä **–°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–Ü–ó–£**:

üèÜ **–†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–¢–ß–£**
- –†–µ–∑—É–ª—å—Ç–∞—Ç (Victory/Defeat) —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
- –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≥—Ä–∏ —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ –º–∞—Ç—á—É
- –†–µ–∂–∏–º –≥—Ä–∏ (Ranked/Classic/Draft) —Ç–∞ –∫–∞—Ä—Ç–∞

üë• **–ö–û–ú–ê–ù–î–ù–ò–ô –ê–ù–ê–õ–Ü–ó**
- –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è –∫–æ–º–∞–Ω–¥ —Ç–∞ —Å–∏–Ω–µ—Ä–≥—ñ—è —Ä–æ–ª–µ–π
- –ö–ª—é—á–æ–≤—ñ teamfights —Ç–∞ turning points
- –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±'—î–∫—Ç—ñ–≤ (Lord, Turtle, Towers)
- MVP —Ç–∞ —Å–ª–∞–±–∫–∞ –ª–∞–Ω–∫–∞ –∫–æ–º–∞–Ω–¥–∏

üéÆ **–Ü–ù–î–ò–í–Ü–î–£–ê–õ–¨–ù–ê –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨**
- –î–µ—Ç–∞–ª—å–Ω–∞ KDA —Ç–∞ participation rate
- –§–∞—Ä–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ–∫–∞
- Ur–æ–Ω –ø–æ —Ç–∏–ø–∞—Ö (Hero/Turret/Total)
- –û—Ü—ñ–Ω–∫–∞ –±—ñ–ª–¥—ñ–≤ —Ç–∞ item choices

üí° **–°–¢–†–ê–¢–ï–ì–Ü–ß–ù–Ü –í–ò–°–ù–û–í–ö–ò**
- –©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ missed opportunities  
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å—Ö–æ–∂–∏—Ö –º–∞—Ç—á—ñ–≤
- Lessons learned –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ

üîç **–¢–ê–ö–¢–ò–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó**
–§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö —è–∫—ñ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏. –ù–∞–¥–∞–≤–∞–π actionable advice –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è skill level.
""",
        
        ContentType.GENERAL: """
üéÆ **MLBB Universal Expert Analysis**

–¢–∏ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç Mobile Legends: Bang Bang –∑ –≥–ª–∏–±–æ–∫–∏–º —Ä–æ–∑—É–º—ñ–Ω–Ω—è–º –≤—Å—ñ—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤ –≥—Ä–∏.

üìã **–ó–ê–í–î–ê–ù–ù–Ø**: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π MLBB —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–∞ –Ω–∞–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

üìä **–ü–†–ò–ù–¶–ò–ü–ò –ê–ù–ê–õ–Ü–ó–£**:
‚úÖ –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É (–ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –º–∞—Ç—á, –±—ñ–ª–¥, —Ç–æ—â–æ)
‚úÖ –ù–∞–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ markdown
‚úÖ –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ actionable —É –ø–æ—Ä–∞–¥–∞—Ö  
‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É MLBB —Ç–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—é
‚úÖ –ú–æ—Ç–∏–≤—É–π –≥—Ä–∞–≤—Ü—è –¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

üéØ **–û–ë–û–í'–Ø–ó–ö–û–í–û –í–ö–õ–Æ–ß–ê–ô**:
- –ß—ñ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–æ
- –ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏
- –í–∏—è–≤–ª–µ–Ω—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
- –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏ —Ç–∞ —Ü—ñ–ª—ñ

üîç **–ï–ö–°–ü–ï–†–¢–ù–ò–ô –ü–Ü–î–•–Ü–î**
–ë—É–¥—å –º–µ–Ω—Ç–æ—Ä–æ–º —è–∫–∏–π —Å–ø—Ä–∞–≤–¥—ñ –¥–æ–ø–æ–º–∞–≥–∞—î –≥—Ä–∞–≤—Ü—è–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏. –ù–∞–¥–∞–≤–∞–π insights —è–∫—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É.
"""
    }
    
    # –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ —è–∫–æ—Å—Ç—ñ
    QUALITY_MODIFIERS = {
        AnalysisQuality.FAST: "\n\n‚ö° **–®–í–ò–î–ö–ò–ô –ê–ù–ê–õ–Ü–ó**: –ù–∞–¥–∞–π —Å—Ç–∏—Å–ª—ñ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö.",
        
        AnalysisQuality.DETAILED: "\n\nüìä **–î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó**: –ü—Ä–æ–≤–µ–¥–∏ –≥–ª–∏–±–æ–∫–∏–π —Ä–æ–∑–±—ñ—Ä –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏.",
        
        AnalysisQuality.PREMIUM: "\n\nüíé **–ü–†–ï–ú–Ü–£–ú –ê–ù–ê–õ–Ü–ó**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π —Ä–æ–∑–±—ñ—Ä –∑ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏, —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–º–∏ insights —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç–∞-–≥—Ä–∏."
    }
    
    @classmethod
    def generate_prompt(
        cls, 
        content_type: ContentType, 
        quality: AnalysisQuality = AnalysisQuality.DETAILED,
        user_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.
        
        Args:
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
            quality: –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É
            user_context: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        """
        base_prompt = cls.BASE_PROMPTS.get(content_type, cls.BASE_PROMPTS[ContentType.GENERAL])
        quality_modifier = cls.QUALITY_MODIFIERS.get(quality, "")
        
        prompt = base_prompt + quality_modifier
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ —î
        if user_context:
            context_additions = []
            
            if user_context.get('user_rank'):
                context_additions.append(f"üèÜ –†–∞–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_context['user_rank']}")
                
            if user_context.get('main_role'):
                context_additions.append(f"üé≠ –û—Å–Ω–æ–≤–Ω–∞ —Ä–æ–ª—å: {user_context['main_role']}")
                
            if user_context.get('favorite_heroes'):
                heroes = ', '.join(user_context['favorite_heroes'])
                context_additions.append(f"‚≠ê –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó: {heroes}")
            
            if context_additions:
                prompt += f"\n\nüéØ **–ö–û–ù–¢–ï–ö–°–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê**:\n" + "\n".join(context_additions)
        
        return prompt

def performance_monitor(func: Callable[..., Awaitable[T]]) -> Callable[..., Awaitable[T]]:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    
    Args:
        func: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        
    Returns:
        –û–±–≥–æ—Ä–Ω—É—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º
    """
    @wraps(func)
    async def wrapper(*args, **kwargs) -> T:
        start_time = time.time()
        func_name = func.__name__
        
        try:
            result = await func(*args, **kwargs)
            execution_time = time.time() - start_time
            
            logger.debug(f"‚ö° {func_name} –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time:.3f}s")
            
            return result
            
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"‚ùå {func_name} –ø–æ–º–∏–ª–∫–∞ –∑–∞ {execution_time:.3f}s: {e}")
            raise
            
    return wrapper

class MLBBVisionAnalyzer:
    """
    –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä MLBB —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ —Å–≤—ñ—Ç–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è.
    
    Features:
    - üß† Intelligent content detection
    - ‚ö° High-performance caching  
    - üìä Real-time metrics tracking
    - üõ°Ô∏è Enterprise error handling
    - üíé Adaptive quality control
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑ —É—Å—ñ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
        self.cache = MLBBVisionCache(max_size=1000, default_ttl=7200)  # 2 –≥–æ–¥–∏–Ω–∏
        self.metrics = VisionMetrics()
        self.session: Optional[aiohttp.ClientSession] = None
        
        # Rate limiting
        self._last_request_time = 0.0
        self._min_request_interval = 0.1  # 100ms –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        
    async def __aenter__(self):
        """Async context manager –≤—Ö—ñ–¥."""
        connector = aiohttp.TCPConnector(
            limit=10,
            limit_per_host=5,
            keepalive_timeout=30,
            enable_cleanup_closed=True
        )
        
        timeout = aiohttp.ClientTimeout(
            total=120,  # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç
            connect=10,  # –¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  
            sock_read=60  # –¢–∞–π–º–∞—É—Ç —á–∏—Ç–∞–Ω–Ω—è
        )
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={
                'Authorization': f'Bearer {OPENAI_API_KEY}',
                'User-Agent': 'MLBB-Vision-Bot/1.0'
            }
        )
        
        logger.info("üöÄ MLBBVisionAnalyzer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager –≤–∏—Ö—ñ–¥."""
        if self.session:
            await self.session.close()
        
        # –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à
        expired_count = await self.cache.cleanup_expired()
        if expired_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {expired_count} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à—É")
    
    @performance_monitor
    async def analyze_screenshot(
        self,
        image_bytes: bytes,
        quality: AnalysisQuality = AnalysisQuality.DETAILED,
        user_context: Optional[Dict[str, Any]] = None
    ) -> Tuple[str, Dict[str, Any]]:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î MLBB —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é.
        
        Args:
            image_bytes: –ë–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            quality: –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É, –º–µ—Ç–∞–¥–∞–Ω—ñ)
            
        Raises:
            ValueError: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            aiohttp.ClientError: –ü–æ–º–∏–ª–∫–∞ API
        """
        analysis_start = time.time()
        
        try:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_hash = ImageProcessor.calculate_content_hash(image_bytes)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            cache_key = f"{quality.value}_{content_hash}"
            cached_entry = await self.cache.get(cache_key)
            
            if cached_entry:
                self.metrics.cache_hits += 1
                logger.info(f"üéØ –ö–µ—à HIT –¥–ª—è {content_hash[:8]}")
                
                return cached_entry.analysis_result, {
                    **cached_entry.metadata,
                    'cache_hit': True,
                    'cache_access_count': cached_entry.access_count
                }
            
            self.metrics.cache_misses += 1
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_type = ImageProcessor.detect_content_type(image_bytes)
            
            # –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            optimized_bytes, optimization_meta = await ImageProcessor.optimize_image(
                image_bytes, quality
            )
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç
            prompt = PromptEngine.generate_prompt(content_type, quality, user_context)
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ OpenAI API
            analysis_result, api_metadata = await self._call_openai_vision(
                optimized_bytes, prompt, quality
            )
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
            full_metadata = {
                'content_type': content_type.name.lower(),
                'quality_level': quality.value,
                'content_hash': content_hash,
                'analysis_time': time.time() - analysis_start,
                'cache_hit': False,
                **optimization_meta,
                **api_metadata
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            cache_ttl = self._calculate_cache_ttl(quality, api_metadata)
            await self.cache.set(cache_key, analysis_result, full_metadata, cache_ttl)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
            self.metrics.total_requests += 1
            self.metrics.successful_requests += 1
            self.metrics.total_tokens += api_metadata.get('tokens_used', 0)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å
            cost = self._calculate_cost(api_metadata.get('model'), api_metadata.get('tokens_used', 0))
            self.metrics.total_cost_usd += cost
            full_metadata['estimated_cost_usd'] = cost
            
            logger.info(
                f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {content_type.name} –∑–∞ {full_metadata['analysis_time']:.2f}s, "
                f"—Ç–æ–∫–µ–Ω–∏: {api_metadata.get('tokens_used', 0)}, –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${cost:.4f}"
            )
            
            return analysis_result, full_metadata
            
        except Exception as e:
            self.metrics.total_requests += 1
            self.metrics.failed_requests += 1
            
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=10),
        retry=retry_if_exception_type((aiohttp.ClientError, asyncio.TimeoutError)),
        before_sleep=before_sleep_log(logger, logging.WARNING)
    )
    async def _call_openai_vision(
        self,
        image_bytes: bytes,
        prompt: str,
        quality: AnalysisQuality
    ) -> Tuple[str, Dict[str, Any]]:
        """
        –í–∏–∫–ª–∏–∫–∞—î OpenAI Vision API –∑ retry —Ç–∞ rate limiting.
        
        Args:
            image_bytes: –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –±–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            quality: –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–µ—Ç–∞–¥–∞–Ω—ñ API)
        """
        # Rate limiting
        current_time = time.time()
        time_since_last = current_time - self._last_request_time
        if time_since_last < self._min_request_interval:
            await asyncio.sleep(self._min_request_interval - time_since_last)
        
        self._last_request_time = time.time()
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –º–æ–¥–µ–ª—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ
        model = VISION_MODEL_FULL if quality in (AnalysisQuality.DETAILED, AnalysisQuality.PREMIUM) else VISION_MODEL_MINI
        
        # –ö–æ–¥—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high" if quality == AnalysisQuality.PREMIUM else "auto"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": VISION_MAX_TOKENS,
            "temperature": VISION_TEMPERATURE
        }
        
        logger.debug(f"ü§ñ API –∑–∞–ø–∏—Ç: –º–æ–¥–µ–ª—å={model}, —è–∫—ñ—Å—Ç—å={quality.value}")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ API
        async with self.session.post(
            'https://api.openai.com/v1/chat/completions',
            json=payload
        ) as response:
            
            if response.status == 429:  # Rate limit
                retry_after = int(response.headers.get('retry-after', 60))
                logger.warning(f"‚è± Rate limit, —á–µ–∫–∞—î–º–æ {retry_after}s")
                await asyncio.sleep(retry_after)
                raise aiohttp.ClientError("Rate limit exceeded")
            
            response.raise_for_status()
            data = await response.json()
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = data['choices'][0]['message']['content']
            usage = data.get('usage', {})
            
            metadata = {
                'model': data.get('model', model),
                'tokens_used': usage.get('total_tokens', 0),
                'prompt_tokens': usage.get('prompt_tokens', 0),
                'completion_tokens': usage.get('completion_tokens', 0),
                'finish_reason': data['choices'][0].get('finish_reason'),
                'response_time': time.time() - self._last_request_time
            }
            
            return result, metadata
    
    @staticmethod
    def _calculate_cost(model: str, tokens: int) -> float:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø—Ä–∏–±–ª–∏–∑–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å API –≤–∏–∫–ª–∏–∫—É.
        
        Args:
            model: –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ
            tokens: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
            
        Returns:
            –í–∞—Ä—Ç—ñ—Å—Ç—å –≤ USD
        """
        # –¶—ñ–Ω–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ 2024 (–∑–∞ 1K —Ç–æ–∫–µ–Ω—ñ–≤)
        pricing = {
            'gpt-4o': 0.005,  # $5/1M tokens
            'gpt-4o-mini': 0.00015,  # $0.15/1M tokens
            'gpt-4-vision-preview': 0.01,  # Legacy
        }
        
        rate = pricing.get(model, 0.005)  # Default to gpt-4o rate
        return (tokens / 1000) * rate
    
    @staticmethod  
    def _calculate_cache_ttl(quality: AnalysisQuality, metadata: Dict[str, Any]) -> int:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î TTL –¥–ª—è –∫–µ—à—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        
        Args:
            quality: –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É
            metadata: –ú–µ—Ç–∞–¥–∞–Ω—ñ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            
        Returns:
            TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        base_ttl = {
            AnalysisQuality.FAST: 1800,      # 30 —Ö–≤–∏–ª–∏–Ω
            AnalysisQuality.DETAILED: 7200,  # 2 –≥–æ–¥–∏–Ω–∏  
            AnalysisQuality.PREMIUM: 14400   # 4 –≥–æ–¥–∏–Ω–∏
        }
        
        ttl = base_ttl.get(quality, 3600)
        
        # –ó–±—ñ–ª—å—à—É—î–º–æ TTL –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if metadata.get('tokens_used', 0) > 1000:
            ttl *= 1.5
            
        return int(ttl)
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞."""
        cache_stats = self.cache.get_stats()
        
        return {
            'api_metrics': {
                'total_requests': self.metrics.total_requests,
                'successful_requests': self.metrics.successful_requests,
                'failed_requests': self.metrics.failed_requests,
                'success_rate': self.metrics.success_rate,
                'total_tokens': self.metrics.total_tokens,
                'total_cost_usd': round(self.metrics.total_cost_usd, 4),
                'uptime_seconds': (datetime.now() - self.metrics.start_time).total_seconds()
            },
            'cache_metrics': {
                'hits': self.metrics.cache_hits,
                'misses': self.metrics.cache_misses,
                'hit_rate': self.metrics.cache_hit_rate,
                **cache_stats
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ handlers
_global_analyzer: Optional[MLBBVisionAnalyzer] = None

async def get_analyzer() -> MLBBVisionAnalyzer:
    """
    –û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞.
    
    Returns:
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä
    """
    global _global_analyzer
    
    if _global_analyzer is None:
        _global_analyzer = MLBBVisionAnalyzer()
    
    return _global_analyzer

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–æ—É—Ç–µ—Ä
vision_router = Router(name="mlbb_vision_handler")

# === HANDLERS ===

@vision_router.message(F.photo)
async def handle_vision_photo(
    message: Message,
    state: FSMContext, 
    session: AsyncSession
) -> None:
    """
    –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –∑ MLBB Vision –∞–Ω–∞–ª—ñ–∑–æ–º.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
        state: FSM —Å—Ç–∞–Ω
        session: –°–µ—Å—ñ—è –ë–î
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    logger.info(f"üì∏ Vision –∑–∞–ø–∏—Ç –≤—ñ–¥ {user_id} (@{username})")
    
    # –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
    progress_msg = await message.reply(
        "üîç <b>MLBB Vision Analysis</b>\n\n"
        "üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...\n"
        "‚è± –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å: 15-45 —Å–µ–∫—É–Ω–¥\n\n"
        "<i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é GPT-4 Vision –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É</i>",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä
        if photo.file_size and photo.file_size > ImageProcessor.MAX_FILE_SIZE:
            size_mb = photo.file_size / (1024 * 1024)
            await progress_msg.edit_text(
                f"‚ùå <b>–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π</b>\n\n"
                f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {size_mb:.1f}MB\n"
                f"üìè –ú–∞–∫—Å–∏–º—É–º: {ImageProcessor.MAX_FILE_SIZE // (1024 * 1024)}MB\n\n"
                f"üí° –°—Ç–∏—Å–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        await progress_msg.edit_text(
            "üîç <b>MLBB Vision Analysis</b>\n\n"
            "‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...\n"
            "ü§ñ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∞–Ω–∞–ª—ñ–∑—É\n\n"
            "<i>–û–ø—Ç–∏–º—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è AI</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        file = await message.bot.get_file(photo.file_id)
        file_data = await message.bot.download_file(file.file_path)
        image_bytes = file_data.read()
        
        logger.info(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(image_bytes)} –±–∞–π—Ç –≤—ñ–¥ {user_id}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å  
        await progress_msg.edit_text(
            "üîç <b>MLBB Vision Analysis</b>\n\n"
            "üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT-4 Vision...\n"
            "üéÆ –í–∏–∑–Ω–∞—á–∞—é —Ç–∏–ø MLBB –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
            "<i>–ì–µ–Ω–µ—Ä—É—é –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ)
        user_context = {
            'user_id': user_id,
            'username': username
            # TODO: –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ë–î –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        }
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∞–Ω–∞–ª—ñ–∑
        async with MLBBVisionAnalyzer() as analyzer:
            analysis_result, metadata = await analyzer.analyze_screenshot(
                image_bytes=image_bytes,
                quality=AnalysisQuality.DETAILED,
                user_context=user_context
            )
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formatted_response = (
            f"üéÆ <b>MLBB Expert Analysis</b>\n\n"
            f"{analysis_result}\n\n"
            f"<i>ü§ñ –ú–æ–¥–µ–ª—å: {metadata.get('model', 'gpt-4o')}\n"
            f"‚ö° –¢–æ–∫–µ–Ω–∏: {metadata.get('tokens_used', 0)}\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${metadata.get('estimated_cost_usd', 0):.4f}\n"
            f"‚è± –ß–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {metadata.get('analysis_time', 0):.1f}s</i>"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–ª–∏–≤–æ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
        await _send_long_message(message, progress_msg, formatted_response)
        
        logger.info(
            f"‚úÖ Vision –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {user_id}: "
            f"{metadata.get('content_type')} –∑–∞ {metadata.get('analysis_time', 0):.1f}s"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Vision –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {user_id}: {e}")
        
        error_message = (
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</b>\n\n"
            "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á—ñ—Ç–∫–µ\n"
            "‚Ä¢ –†–æ–∑–º—ñ—Ä –Ω–µ –±—ñ–ª—å—à–µ 20MB\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG –∞–±–æ WebP\n"
            "‚Ä¢ –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç\n\n"
            "<i>–Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è - –ø–æ–≤—ñ–¥–æ–º –∞–¥–º—ñ–Ω–∞</i>"
        )
        
        try:
            await progress_msg.edit_text(error_message, parse_mode=ParseMode.HTML)
        except:
            await message.reply(error_message, parse_mode=ParseMode.HTML)

async def _send_long_message(
    original_message: Message,
    progress_message: Message, 
    content: str,
    max_length: int = 4096
) -> None:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–æ–≤–≥–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–æ–∑–±–∏–≤–∞—é—á–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    
    Args:
        original_message: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        progress_message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    if len(content) <= max_length:
        try:
            await progress_message.edit_text(content, parse_mode=ParseMode.HTML)
        except TelegramBadRequest:
            # Fallback - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await progress_message.delete()
            await original_message.reply(content, parse_mode=ParseMode.HTML)
    else:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        await progress_message.edit_text(
            "üéÆ <b>MLBB Expert Analysis</b>\n\n"
            "<i>–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç–∏–Ω–∞–º–∏...</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –†–æ–∑—É–º–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç
        parts = _split_text_smart(content, max_length - 100)  # –ó–∞–ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        
        for i, part in enumerate(parts, 1):
            formatted_part = f"<b>–ß–∞—Å—Ç–∏–Ω–∞ {i}/{len(parts)}:</b>\n\n{part}"
            await original_message.reply(formatted_part, parse_mode=ParseMode.HTML)
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            if i < len(parts):
                await asyncio.sleep(0.5)

def _split_text_smart(text: str, max_length: int) -> List[str]:
    """
    –†–æ–∑—É–º–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–∏–Ω —Ç–µ–∫—Å—Ç—É
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        # –Ø–∫—â–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–æ–±—ñ –∑–∞–≤–µ–ª–∏–∫–∏–π
        if len(paragraph) > max_length:
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
            sentences = re.split(r'(?<=[.!?])\s+', paragraph)
            
            for sentence in sentences:
                if len(current_part + sentence) > max_length:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = sentence
                    else:
                        # –†–µ—á–µ–Ω–Ω—è –∑–∞–≤–µ–ª–∏–∫–µ - —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
                        while len(sentence) > max_length:
                            parts.append(sentence[:max_length].strip())
                            sentence = sentence[max_length:]
                        current_part = sentence
                else:
                    current_part += sentence + " "
        else:
            if len(current_part + paragraph) > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = paragraph + "\n\n"
                else:
                    current_part = paragraph + "\n\n"
            else:
                current_part += paragraph + "\n\n"
    
    if current_part.strip():
        parts.append(current_part.strip())
    
    return parts

# === ADMIN COMMANDS ===

@vision_router.message(F.text == "/vision_stats", F.from_user.id.in_(ADMIN_IDS))
async def show_vision_statistics(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Vision —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    """
    try:
        analyzer = await get_analyzer()
        metrics = analyzer.get_metrics()
        
        api_metrics = metrics['api_metrics']
        cache_metrics = metrics['cache_metrics']
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ uptime
        uptime_seconds = api_metrics['uptime_seconds']
        uptime_str = str(timedelta(seconds=int(uptime_seconds)))
        
        stats_text = f"""
üìä <b>MLBB Vision Statistics</b>

ü§ñ <b>API Metrics:</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {api_metrics['total_requests']}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ: {api_metrics['successful_requests']}  
‚Ä¢ –ü–æ–º–∏–ª–∫–∏: {api_metrics['failed_requests']}
‚Ä¢ Success Rate: {api_metrics['success_rate']:.1f}%
‚Ä¢ –¢–æ–∫–µ–Ω–∏: {api_metrics['total_tokens']:,}
‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${api_metrics['total_cost_usd']:.4f}

üíæ <b>Cache Metrics:</b>
‚Ä¢ –•—ñ—Ç–∏: {cache_metrics['hits']}
‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {cache_metrics['misses']}
‚Ä¢ Hit Rate: {cache_metrics['hit_rate']:.1f}%
‚Ä¢ –†–æ–∑–º—ñ—Ä –∫–µ—à—É: {cache_metrics['size']}/{cache_metrics['max_size']}
‚Ä¢ –ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {cache_metrics['fill_percentage']:.1f}%

‚è± <b>Uptime:</b> {uptime_str}

<i>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}</i>
"""
        
        await message.reply(stats_text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@vision_router.message(F.text == "/vision_cache_clear", F.from_user.id.in_(ADMIN_IDS))
async def clear_vision_cache_command(message: Message) -> None:
    """
    –û—á–∏—â—É—î –∫–µ—à Vision —Å–∏—Å—Ç–µ–º–∏.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    """
    try:
        analyzer = await get_analyzer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—â–µ–Ω–Ω—è
        old_stats = analyzer.cache.get_stats()
        old_size = old_stats['size']
        
        # –û—á–∏—â—É—î–º–æ –∫–µ—à
        analyzer.cache._cache.clear()
        analyzer.cache._access_order.clear()
        
        await message.reply(
            f"‚úÖ <b>–ö–µ—à –æ—á–∏—â–µ–Ω–æ</b>\n\n"
            f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {old_size}\n"
            f"–ó–≤—ñ–ª—å–Ω–µ–Ω–æ –ø–∞–º'—è—Ç—ñ: ~{old_size * 2}KB",
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"üßπ –ö–µ—à –æ—á–∏—â–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É")

# === INTEGRATION FUNCTIONS ===

def get_vision_router() -> Router:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π Vision —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó.
    
    Returns:
        –ì–æ—Ç–æ–≤–∏–π —Ä–æ—É—Ç–µ—Ä
    """
    return vision_router

async def get_vision_metrics() -> Dict[str, Any]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç—Ä–∏–∫–∏ Vision —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó.
    
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    try:
        analyzer = await get_analyzer()
        return analyzer.get_metrics()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫: {e}")
        return {}

# === STARTUP TASKS ===

async def initialize_vision_system() -> None:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Vision —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞.
    """
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        temp_path = Path(TEMP_DIR)
        temp_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞
        if not OPENAI_API_KEY or OPENAI_API_KEY == "YOUR_OPENAI_API_KEY":
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
            return
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä
        global _global_analyzer
        _global_analyzer = MLBBVisionAnalyzer()
        
        logger.info("üöÄ MLBB Vision System —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Vision —Å–∏—Å—Ç–µ–º–∏: {e}")

# === CLEANUP TASKS ===

async def cleanup_vision_system() -> None:
    """
    –û—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏ Vision —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞.
    """
    try:
        global _global_analyzer
        
        if _global_analyzer:
            # –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à
            expired_count = await _global_analyzer.cache.cleanup_expired()
            
            # –õ–æ–≥—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            metrics = _global_analyzer.get_metrics()
            api_metrics = metrics['api_metrics']
            
            logger.info(
                f"üìä Vision —Å–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞: "
                f"{api_metrics['total_requests']} –∑–∞–ø–∏—Ç—ñ–≤, "
                f"${api_metrics['total_cost_usd']:.4f} –≤–∞—Ä—Ç—ñ—Å—Ç—å, "
                f"{expired_count} –∑–∞–ø–∏—Å—ñ–≤ –æ—á–∏—â–µ–Ω–æ"
            )
            
            _global_analyzer = None
        
        logger.info("üëã MLBB Vision System –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        
