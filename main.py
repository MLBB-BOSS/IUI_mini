"""
MLBB Expert Bot
===============

–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞, –∞–ª–µ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è Telegram-–±–æ—Ç–∞-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è Mobile Legends: Bang Bang,
–∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∞ –Ω–∞ –æ–¥–Ω—ñ–π –∫–ª—é—á–æ–≤—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó ‚Äî –Ω–∞–¥–∞–Ω–Ω—ñ —Ä–æ–∑—É–º–Ω–∏—Ö, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö —ñ –∑—Ä—É—á–Ω–∏—Ö –¥–ª—è
—á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥ GPT-4o-mini.

‚Ä¢ Python 3.11+
‚Ä¢ aiogram 3.19+
‚Ä¢ OpenAI Chat Completions API

Author : MLBB-BOSS
Date   : 2025-05-24
"""

from __future__ import annotations

import asyncio
import logging
import os
import re
import time
from datetime import datetime
from typing import Optional

from aiohttp import ClientSession, ClientTimeout
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# ---------------------------------------------------------------------------#
#                         –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø / CONFIGURATION                       #
# ---------------------------------------------------------------------------#
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
logger = logging.getLogger("MLBBExpertBot")

load_dotenv()

TELEGRAM_BOT_TOKEN: str | None = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str | None = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("‚ùå  –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

# ---------------------------------------------------------------------------#
#                               GPT-–ê–°–ò–°–¢–ï–ù–¢                                 #
# ---------------------------------------------------------------------------#
class MLBBChatGPT:
    """GPT-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ —Ñ–æ—Ä–º—É—î –ø—Ä–æ–º–ø—Ç–∏ –π –ø–æ—Å—Ç-–æ–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è Telegram."""

    _HEADER_EMOJIS: dict[str, str] = {
        "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è",
        "–æ–±'—î–∫—Ç": "üõ°Ô∏è",
        "—Ç–∞–∫—Ç–∏–∫": "‚öîÔ∏è",
        "–ø–æ–∑–∏—Ü—ñ": "üìç",
        "–∫–æ–º—É–Ω—ñ–∫–∞—Ü": "üí¨",
        "–≥–µ—Ä–æ–π": "ü¶∏",
        "—Ñ–∞—Ä–º": "üí∞",
        "—Ä–æ—Ç–∞—Ü": "üîÑ",
        "–∫–æ–º–∞–Ω–¥–Ω": "ü§ù",
    }

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None

    # ------------------------------ CONTEXT --------------------------------#
    async def __aenter__(self) -> "MLBBChatGPT":
        self.session = ClientSession(
            timeout=ClientTimeout(total=30),
            headers={"Authorization": f"Bearer {self.api_key}"},
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
        if self.session:
            await self.session.close()

    # ------------------------------ PROMPT ---------------------------------#
    @staticmethod
    def _create_smart_prompt(user_name: str) -> str:
        """–§–æ—Ä–º—É—î —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —ñ–∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å—Ç–∏–ª—é."""
        hour = datetime.now().hour
        greeting = (
            "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            if 5 <= hour < 12
            else "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
            if 12 <= hour < 17
            else "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            if 17 <= hour < 22
            else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        )

        return (
            f"üéÆ {greeting}, {user_name}! –¢–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è –∑ –µ–∫—Å–ø–µ—Ä—Ç–æ–º Mobile Legends.\n\n"
            "–¢–í–û–Ø –†–û–õ–¨: –ø—Ä–æ—Ñ—ñ-–∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ–∑ 5+ —Ä–æ–∫–∞–º–∏ –¥–æ—Å–≤—ñ–¥—É –≥—Ä–∏ —Ç–∞ –∫–æ—É—á—ñ–Ω–≥—É MLBB.\n\n"
            "‚úÖ –©–û –¢–ò –†–û–ë–ò–®:\n"
            "‚Ä¢ –ü–æ—è—Å–Ω—é—î—à –º–µ—Ö–∞–Ω—ñ–∫–∏, —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –º–µ—Ç—É, –ø–∞—Ç—á—ñ\n"
            "‚Ä¢ –î–∞—î—à –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó\n"
            "‚Ä¢ –ú–æ—Ç–∏–≤—É—î—à –≥—Ä–∞–≤—Ü—ñ–≤ —ñ –ø—ñ–¥—Ç—Ä–∏–º—É—î—à –∫–æ–º–∞–Ω–¥–Ω–∏–π –¥—É—Ö\n\n"
            "‚ùå –ß–û–ì–û –¢–ò –ù–ï –†–û–ë–ò–®:\n"
            "‚Ä¢ –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—à —Ç–æ—á–Ω—ñ –±—ñ–ª–¥–∏ (—à–≤–∏–¥–∫–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤–∞—é—Ç—å)\n"
            "‚Ä¢ –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à HTML –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (###)\n\n"
            "üí¨ –°–¢–ò–õ–¨: –¥—Ä—É–∂–Ω—ñ–π, –µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π, –¥–æ 200 —Å–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ —á—ñ—Ç–∫–∏–º–∏ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏."
        )

    # ---------------------------- BEAUTIFIER -------------------------------#
    def _beautify_response(self, raw_text: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î markdown-—Ä–æ–∑–º—ñ—Ç–∫—É GPT –Ω–∞ –ø—Ä–∏—î–º–Ω–∏–π –¥–ª—è Telegram —Ñ–æ—Ä–º–∞—Ç."""
        # 1) –ó–∞–≥–æ–ª–æ–≤–∫–∏ ### / ##  ‚Üí  –µ–º–æ–¥–∑—ñ + <b>Title</b>:
        def _hdr(match: re.Match[str]) -> str:
            title = match.group(1).strip(" :").capitalize()
            emoji = next(
                (em for key, em in self._HEADER_EMOJIS.items() if key in title.lower()),
                "üîπ",
            )
            return f"\n\n{emoji} <b>{title}</b>:"

        text = re.sub(r"^#{2,3}\s*(.+)$", _hdr, raw_text, flags=re.MULTILINE)

        # 2) –ó–≤–∏—á–∞–π–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏ —Å–ø–∏—Å–∫—É ‚Üí –±—É–ª–µ—Ç ‚Ä¢
        text = re.sub(r"^\s*[-*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)

        # 3) –ü—Ä–∏–±—Ä–∞—Ç–∏ –Ω–∞–¥–º—ñ—Ä–Ω—ñ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
        text = re.sub(r"\n{3,}", "\n\n", text).strip()

        return text

    # ----------------------------- QUERY -----------------------------------#
    async def ask(self, user_name: str, user_query: str) -> str:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ OpenAI —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Ñ–æ—Ä–º–ª–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
        assert self.session, "Session not initialised. Use 'async with'."

        payload = {
            "model": "gpt-4.1",
            "messages": [
                {"role": "system", "content": self._create_smart_prompt(user_name)},
                {"role": "user", "content": user_query},
            ],
            "max_tokens": 500,
            "temperature": 0.8,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2,
        }

        try:
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as resp:
                if resp.status != 200:
                    logger.error("OpenAI API error: %s", resp.status)
                    return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."

                data = await resp.json()
                raw = data["choices"][0]["message"]["content"]

                # –õ–µ–≥–∫–∞ –æ—á–∏—Å—Ç–∫–∞ –≤—ñ–¥ **bold** / *italic* —ñ HTML, —è–∫—ñ GPT —ñ–Ω–∫–æ–ª–∏ –≤—Å—Ç–∞–≤–ª—è—î
                clean = re.sub(r"<[^>]+>", "", raw)
                clean = re.sub(r"\*\*([^*]+)\*\*", r"\1", clean)
                clean = re.sub(r"\*([^*]+)\*", r"\1", clean)

                return self._beautify_response(clean)

        except Exception as exc:  # noqa: BLE001
            logger.exception("GPT request failed: %s", exc)
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT üòï –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

# ---------------------------------------------------------------------------#
#                                   –ë–û–¢                                      #
# ---------------------------------------------------------------------------#
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()

# ------------------------------- HANDLERS ----------------------------------#
@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    user_name = message.from_user.first_name
    hour = datetime.now().hour
    greeting, emoji = (
        ("–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É", "üåÖ")
        if 5 <= hour < 12
        else ("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è", "‚òÄÔ∏è")
        if 12 <= hour < 17
        else ("–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞", "üåÜ")
        if 17 <= hour < 22
        else ("–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ", "üåô")
    )

    text = (
        f"{greeting}, <b>{user_name}</b>! {emoji}\n\n"
        "üéÆ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <b>MLBB Expert Chat Bot</b>!\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É <code>/go</code> —Ç–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "‚Ä¢ <code>/go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É</code>\n"
        "‚Ä¢ <code>/go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ</code>\n"
        "‚Ä¢ <code>/go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏</code>\n\n"
        "–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –ø—ñ–¥–∫–æ—Ä–∏—Ç–∏ Land of Dawn! üöÄ"
    )
    await message.answer(text)
    logger.info("Sent welcome to %s", user_name)


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    user_name = message.from_user.first_name
    query = message.text.replace("/go", "", 1).strip()

    if not query:
        await message.reply(
            "üìù –°–ø–µ—Ä—à—É –¥–æ–¥–∞–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /go.\n\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É\n"
            "‚Ä¢ /go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤"
        )
        return

    thinking_msgs = [
        f"ü§î {user_name}, –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ—ó–º –ø–∏—Ç–∞–Ω–Ω—è–º...",
        f"üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç, {user_name}!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
        f"üéØ –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏, {user_name}!",
    ]
    temp_msg = await message.reply(thinking_msgs[hash(query) % len(thinking_msgs)])

    start = time.time()
    async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
        reply = await gpt.ask(user_name, query)
    elapsed = time.time() - start

    admin_note = f"\n\n<i>‚è± {elapsed:.2f}s</i>" if message.from_user.id == ADMIN_USER_ID else ""
    try:
        await temp_msg.edit_text(reply + admin_note)
    except TelegramAPIError:
        await message.reply(reply)

    logger.info("Answered %s in %.2fs", user_name, elapsed)


# ---------------------------- ERROR HANDLER --------------------------------#
@dp.errors()
async def on_error(event, exc):
    logger.error("Handler error: %s", exc, exc_info=True)
    if hasattr(event, "message") and event.message:
        user = event.message.from_user.first_name if event.message.from_user else "–¥—Ä—É–∂–µ"
        await event.message.answer(
            f"–í–∏–±–∞—á, {user}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )


# -------------------------------- LAUNCH -----------------------------------#
async def main() -> None:
    logger.info("üöÄ  –ó–∞–ø—É—Å–∫–∞—é MLBB Expert Bot...")
    try:
        me = await bot.get_me()
        logger.info("Bot @%s is up", me.username)

        if ADMIN_USER_ID:
            try:
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB Expert Bot –∑–∞–ø—É—â–µ–Ω–æ!</b>\n@{me.username}",
                )
            except Exception:  # noqa: BLE001
                pass

        await dp.start_polling(bot)

    except (KeyboardInterrupt, SystemExit):
        logger.info("Shutdown requested by user")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

