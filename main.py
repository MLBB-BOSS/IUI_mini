#main.py 
"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4.1 (–∞–±–æ –Ω–æ–≤—ñ—à–∞)
Author: MLBB-BOSS | Date: 2025-05-26
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta # –î–æ–¥–∞–Ω–æ timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__) # –ì–æ–ª–æ–≤–Ω–∏–π –ª–æ–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")


class MLBBChatGPT:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é—Ç—å—Å—è, –æ—Ñ–æ—Ä–º–ª—é—é—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤ Telegram.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=45), # –ó–±—ñ–ª—å—à–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("Aiohttp ClientSession —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("Aiohttp ClientSession –∑–∞–∫—Ä–∏—Ç–æ.")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ MLBBChatGPT: {exc_type} {exc_val}", exc_info=True)


    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """
        üöÄ –û–Ω–æ–≤–ª–µ–Ω–∏–π –ü–†–û–ú–ü–¢ v2.2 - –ë–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ.
        """
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É –∑–∞ –ö–∏—î–≤–æ–º –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        kyiv_tz = timezone(timedelta(hours=3))  # UTC+3
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour

        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

        # –ü—Ä–æ–º–ø—Ç v2.2
        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.2 üéÆ

## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º.
–¢–≤–æ—è –º—ñ—Å—ñ—è: –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –°–ø—ñ–ª–∫—É–π—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–æ —Ç–∞ –¥—Ä—É–∂–Ω—å–æ.

## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML, —Ç–æ–º—É –í–ê–ñ–õ–ò–í–û –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –í–ê–õ–Ü–î–ù–ò–ô HTML –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏ <b>, <i>, <code>).

## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

### üéØ –°–¢–†–£–ö–¢–£–†–ê –¢–ê –ó–ú–Ü–°–¢:
1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2.  **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**:
    *   –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Å—É—Ç—ñ –∑–∞–ø–∏—Ç—É.
    *   –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤, —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π, —Ä–æ–ª–µ–π –∞–±–æ –≥—Ä–∏ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ª—ñ–Ω—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó", "–ø–æ—Ä–∞–¥—å –≥–µ—Ä–æ—è –¥–ª—è –º—ñ–¥—É"), –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π 2-3 –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤.
    *   –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ –≥–µ—Ä–æ—ó —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º (—ó—Ö–Ω—ñ –∫–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏, —Ä–æ–ª—å).
    *   –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ, –∑–≥–∞–¥–∞–π –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∞–±–æ —Å–∏–Ω–µ—Ä–≥—ñ—é –∑ —ñ–Ω—à–∏–º–∏ –≥–µ—Ä–æ—è–º–∏.
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: –ö—ñ–ª—å–∫–∞ –¥—ñ—î–≤–∏—Ö –ø–æ—Ä–∞–¥, —â–æ —Ä–æ–±–∏—Ç–∏ –≥—Ä–∞–≤—Ü—é.
4.  **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ü–æ–∑–∏—Ç–∏–≤–Ω–µ —Ç–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä—é—é—á–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.

### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–í–ê–õ–Ü–î–ù–ò–ô HTML):
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ</b>, <i>–¥–ª—è –∫—É—Ä—Å–∏–≤—É</i>, <code>–¥–ª—è –∫–æ–¥—É/–Ω–∞–∑–≤</code>. –£–°–Ü –¢–ï–ì–ò –ü–û–í–ò–ù–ù–Ü –ë–£–¢–ò –ö–û–†–ï–ö–¢–ù–û –ó–ê–ö–†–ò–¢–Ü.
-   –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—é–π —á–µ—Ä–µ–∑ "‚Ä¢ " (–∑ –ø—Ä–æ–±—ñ–ª–æ–º –ø—ñ—Å–ª—è –º–∞—Ä–∫–µ—Ä–∞).
-   –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é, –ª–µ–≥–∫–æ—é –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, –ø—Ä–∏–±–ª–∏–∑–Ω–æ 200-300 —Å–ª—ñ–≤.
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Ä–µ—á–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ü¶∏‚Äç‚ôÇÔ∏è –¥–ª—è –≥–µ—Ä–æ—ó–≤, üí° –¥–ª—è –ø–æ—Ä–∞–¥, ü§ù –¥–ª—è –∫–æ–º–±–æ).

### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
-   **–ì–µ—Ä–æ—ó**: –ó–Ω–∞–Ω–Ω—è –º–µ—Ö–∞–Ω—ñ–∫, —Ä–æ–ª–µ–π, –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–ø—ñ–∫—ñ–≤, —Å–∏–ª—å–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–µ—Ç–∏. –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–µ—Ä–æ—ó–≤, –∫–æ–ª–∏ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.
-   **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –†–æ–∑—É–º—ñ–Ω–Ω—è –ª–µ–π–Ω-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É, –∫–æ–Ω—Ç—Ä–æ–ª—é –æ–±'—î–∫—Ç—ñ–≤, —Ç—ñ–º—Ñ–∞–π—Ç-—Ç–∞–∫—Ç–∏–∫, –º–∞–∫—Ä–æ-–≥—Ä–∏.
-   **–†–∞–Ω–∫—ñ–Ω–≥ —Ç–∞ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É, –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó, –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç—ñ–ª—å—Ç—É.
-   **–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ç—á**: –ù–∞–º–∞–≥–∞–π—Å—è –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –∑–º—ñ–Ω–∏ –≤ –≥—Ä—ñ.

### ‚ùå –£–ù–ò–ö–ê–ô:
-   Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
-   –ù–ï–ó–ê–ö–†–ò–¢–ò–• –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö HTML —Ç–µ–≥—ñ–≤ (—Ü–µ —Å–ø—Ä–∏—á–∏–Ω—è—î –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è).
-   –ù–∞–¥—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –±—ñ–ª–¥—ñ–≤ (–ø—Ä–µ–¥–º–µ—Ç–∏/–µ–º–±–ª–µ–º–∏), –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —à–≤–∏–¥–∫–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤–∞—é—Ç—å. –ö—Ä–∞—â–µ —Ñ–æ–∫—É—Å—É–π—Å—è –Ω–∞ —Å—Ç–∏–ª—ñ –≥—Ä–∏.
-   –î–æ–≤–≥–∏—Ö, –º–æ–Ω–æ—Ç–æ–Ω–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É.

## –ü–†–ò–ö–õ–ê–î –°–¢–ò–õ–Æ –¢–ê –°–¢–†–£–ö–¢–£–†–ò –í–Ü–î–ü–û–í–Ü–î–Ü (–Ω–∞ –∑–∞–ø–∏—Ç "—è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó"):
"{greeting}, {user_name}! üëã

–ì—Ä–∞ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –¥—ñ–π—Å–Ω–æ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–º–∞–Ω–¥–∏! üõ°Ô∏è

ü¶∏‚Äç‚ôÇÔ∏è <b>–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ —Å–∏–ª—å–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ –¥–ª—è –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –∑–∞—Ä–∞–∑:</b>
‚Ä¢ <b>–Æ –ß–∂—É–Ω:</b> –ß—É–¥–æ–≤–∏–π –¥–ª—è –¥–æ–º—ñ–Ω–∞—Ü—ñ—ó 1–Ω–∞1 –∑–∞–≤–¥—è–∫–∏ –≤—ñ–¥—Ö—ñ–ª—É —Ç–∞ —Å–∏–ª—å–Ω–æ–º—É —É–ª—å—Ç—ñ–º–µ–π—Ç—É –¥–ª—è –±—ñ–π–æ–∫. <i>–ê–≥—Ä–µ—Å–∏–≤–Ω–∏–π –≤–∏–±—ñ—Ä.</i>
‚Ä¢ <b>–ê—Ä–∞–ª–æ—Ç—Ç:</b> –ú–∞—î –±–∞–≥–∞—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞ –º–æ–±—ñ–ª—å–Ω–æ—Å—Ç—ñ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ç–∏ –±–∞–≥–∞—Ç—å–æ—Ö –º–µ—Ç–∞-–≥–µ—Ä–æ—ó–≤. <i>–ì–∞—Ä–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö —Å—É—Ç–∏—á–æ–∫.</i>
‚Ä¢ <b>–ï–¥—ñ—Ç:</b> –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ç–∞–Ω–∫/—Å—Ç—Ä—ñ–ª–µ—Ü—å, —â–æ –º–æ–∂–µ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –ø—ñ–¥ —Å–∏—Ç—É–∞—Ü—ñ—é, —Å–∏–ª—å–Ω–∞ –≤ –ª–µ–π—Ç—ñ. <i>–ì–Ω—É—á–∫–∏–π –≤–∏–±—ñ—Ä.</i>

üí° <b>–ö–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –µ–∫—Å–ø-–ª–µ–π–Ω–µ—Ä–∞:</b>
‚Ä¢ –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ 4-–≥–æ —Ä—ñ–≤–Ω—è –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —É–ª—å—Ç—ñ–º–µ–π—Ç—É.
‚Ä¢ –°–ª—ñ–¥–∫—É–π –∑–∞ –∫–∞—Ä—Ç–æ—é, –¥–æ–ø–æ–º–∞–≥–∞–π –∫–æ–º–∞–Ω–¥—ñ –∑ –ß–µ—Ä–µ–ø–∞—Ö–æ—é/–õ–æ—Ä–¥–æ–º.
‚Ä¢ –ù–µ –±—ñ–π—Å—è —Ä–æ–∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –∑–¥–æ—Ä–æ–≤'—è–º, —è–∫—â–æ —Ü–µ –≤–∏–≥—ñ–¥–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏.

ü§ù <b>–©–æ–¥–æ –∫–æ–º–±–æ:</b> –ì–µ—Ä–æ—ó —è–∫ <i>–Æ –ß–∂—É–Ω</i> —á–∏ <i>–ê—Ä–∞–ª–æ—Ç—Ç</i> —á—É–¥–æ–≤–æ –ø—Ä–∞—Ü—é—é—Ç—å –∑ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞–º–∏ —Ç–∏–ø—É <i>–ê—Ç–ª–∞—Å</i> –∞–±–æ <i>–õ–æ–ª—ñ—Ç–∞</i>, —è–∫—ñ –∑–±–∏—Ä–∞—é—Ç—å –≤–æ—Ä–æ–≥—ñ–≤ –¥–ª—è —ó—Ö–Ω—ñ—Ö –∞—Ç–∞–∫.

–ü–∞–º'—è—Ç–∞–π, –≤–∏–±—ñ—Ä –≥–µ—Ä–æ—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø—ñ–∫—É —Ç–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–æ—Ä–æ–≥—ñ–≤. –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π —Ç–∞ –∑–Ω–∞—Ö–æ–¥—å —Å–≤—ñ–π —Å—Ç–∏–ª—å! –í–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ–º–æ–≥! üöÄ"

## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ –≤–∏—â–µ, –æ—Å–æ–±–ª–∏–≤–æ —â–æ–¥–æ –í–ê–õ–Ü–î–ù–û–ì–û HTML —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –≥–µ—Ä–æ—ó–≤, –¥–µ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ):"""

    def _beautify_response(self, text: str) -> str:
        """
        –û—Ñ–æ—Ä–º–ª—é—î —Ç–µ–∫—Å—Ç GPT –¥–ª—è Telegram: –∑–∞–º—ñ–Ω—é—î markdown/–∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–æ–¥–∞—î –µ–º–æ–¥–∑—ñ, –≤—ñ–¥—Å—Ç—É–ø–∏
        —Ç–∞ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏ <b>.
        """
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }

        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°" # Default
            # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫–ª—é—á—ñ–≤
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    break
            else: # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ —Å–µ—Ä–µ–¥ –∑–∞–≥–∞–ª—å–Ω–∏—Ö
                for key, emj in header_emojis.items():
                    if key in header_text.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"

        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+-\s+", "  ‚ó¶ ", text, flags=re.MULTILINE) 
        
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        # –ó–∞–º—ñ–Ω–∞ Markdown –Ω–∞ HTML, —è–∫—â–æ GPT —ó—Ö –≤—Å–µ –∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î
        text = re.sub(r"\*\*(?P<content>.+?)\*\*", r"<b>\g<content></b>", text)
        text = re.sub(r"\*(?P<content>.+?)\*", r"<i>\g<content></i>", text)
        
        open_b_count = len(re.findall(r"<b>", text))
        close_b_count = len(re.findall(r"</b>", text))

        if open_b_count > close_b_count:
            missing_tags = open_b_count - close_b_count
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {missing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ <b>. –î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å.")
            text += "</b>" * missing_tags
        elif close_b_count > open_b_count:
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_b_count - open_b_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ </b>.")

        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —ñ –æ—Ñ–æ—Ä–º–ª—é—î —ó—ó –¥–ª—è Telegram.
        """
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT –≤—ñ–¥ '{user_name}': '{user_query}'")
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1", # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ, –∞–±–æ "gpt-4.1", "gpt-4"
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000, 
            "temperature": 0.65, # –ó–±—ñ–ª—å—à–∏–º–æ —Ç—Ä–æ—Ö–∏ –¥–ª—è –±—ñ–ª—å—à –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            "top_p": 0.9,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2
        }

        try:
            async with self.session.post( # type: ignore
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status}). –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ!"

                result = await response.json()
                
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç."

                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{raw_gpt_text[:100]}'")
                
                beautified_text = self._beautify_response(raw_gpt_text)
                return beautified_text

        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É: '{user_query}'")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ GPT –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name} üòï –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ!"


bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start, –≤—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")
    
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"

    welcome_text = f"""
{greeting_msg}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.2!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏, –Ω–∞–¥–∞—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–µ—Ä–æ—ó–≤!

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –ø—Ä–æ—Ç–∏ –±—ñ–π—Ü—ñ–≤</code>
‚Ä¢ <code>/go –ø–æ—Ä–∞–¥—å —Å–∏–ª—å–Ω–∏—Ö –º–∞–≥—ñ–≤ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É —Å–æ–ª–æ</code>
‚Ä¢ <code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –≥–µ—Ä–æ—ó–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤ 5–Ω–∞5</code>

<b>üî• –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è v2.2:</b>
‚Ä¢ –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ñ–ª—å—à –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ–π –º–µ—Ç—ñ —Ç–∞ —Å–∏–Ω–µ—Ä–≥—ñ—ó –≥–µ—Ä–æ—ó–≤.
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML.

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    try:
        await message.answer(welcome_text)
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name} (v2.2) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}: {e}")


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go, –≤–∑–∞—î–º–æ–¥—ñ—è –∑ GPT."""
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")

    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç –≤—ñ–¥ {user_name}. –ù–∞–¥—Å–∏–ª–∞—é –ø—ñ–¥–∫–∞–∑–∫—É.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è /go, —ñ —è —Å–ø—Ä–æ–±—É—é –¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –≥–µ—Ä–æ—ó–≤!\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É –Ω–∞ —Å—Ç—Ä—ñ–ª—å—Ü—è—Ö\n"
            "‚Ä¢ /go —è–∫–∏—Ö –≥–µ—Ä–æ—ó–≤ –æ–±—Ä–∞—Ç–∏ –¥–ª—è –¥–æ–º—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ –º—ñ–¥—ñ"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —Ç–∞ –ø—ñ–¥–±–∏—Ä–∞—é –≥–µ—Ä–æ—ó–≤...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –≥–µ—Ä–æ—ó–≤ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Ç–µ–±–µ!"
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name}: {e}")

    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"

    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É MLBBChatGPT –¥–ª—è –∑–∞–ø–∏—Ç—É '{user_query}' –≤—ñ–¥ {user_name}: {e}")
        # response_text –≤–∂–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É GPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {processing_time:.2f}—Å")

    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.2 GPT</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        target_message = thinking_msg if thinking_msg else message
        if thinking_msg:
            await thinking_msg.edit_text(full_response_to_send)
        else:
            await message.reply(full_response_to_send)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} (ID: {user_id}) —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ/–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –¥–ª—è {user_name}: {e}. –¢–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100): '{full_response_to_send[:100]}'")
        if "can't parse entities" in str(e).lower():
            logger.error(f"–ü–û–ú–ò–õ–ö–ê –†–û–ó–ë–û–†–£ HTML –¥–ª—è '{user_query}'. –¢–µ–∫—Å—Ç, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–≤ –ø–æ–º–∏–ª–∫—É (–ø–µ—Ä—à—ñ 200): '{response_text[:200]}'")
            plain_text_response = re.sub(r"<[^>]+>", "", response_text) 
            fallback_message = (
                f"{plain_text_response}{admin_info}\n\n"
                f"<i>(–í–∏–±–∞—á, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML. –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–∫–∞–∑–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç. "
                f"–°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç.)</i>"
            )
            try:
                if thinking_msg:
                    await thinking_msg.edit_text(fallback_message, parse_mode=None)
                else:
                    await message.reply(fallback_message, parse_mode=None)
                logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ HTML.")
            except Exception as plain_text_e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è {user_name} –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ HTML: {plain_text_e}")
                final_fallback_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
                try:
                    if thinking_msg: await thinking_msg.edit_text(final_fallback_text, parse_mode=None)
                    else: await message.reply(final_fallback_text, parse_mode=None)
                except Exception as ff_e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ fallback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {ff_e}")
        else:
            # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ TelegramAPIError
            logger.error(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ TelegramAPIError –¥–ª—è {user_name}: {e}")
            try:
                await message.reply(f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ. (–ö–æ–¥: TG_{e.__class__.__name__})", parse_mode=None)
            except Exception as final_e:
                 logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–Ω—à—É –ø–æ–º–∏–ª–∫—É Telegram –¥–ª—è {user_name}: {final_e}")


@dp.errors()
async def error_handler(update_event, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ error_handler: {exception} –¥–ª—è update: {update_event}", exc_info=True)
    
    chat_id = None
    user_name = "–¥—Ä—É–∂–µ"

    if hasattr(update_event, 'message') and update_event.message:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user:
            user_name = update_event.message.from_user.first_name
    elif hasattr(update_event, 'callback_query') and update_event.callback_query:
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user:
            user_name = update_event.callback_query.from_user.first_name
            try: # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –≤—ñ–Ω –Ω–µ "–∑–∞–≤–∏—Å"
                await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
            except Exception: pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç—É—Ç
    
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
    
    if chat_id:
        try:
            await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name} –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")


async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini v2.2... (PID: {os.getpid()})")

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π!")

        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini v2.2 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {launch_time_kyiv}\n"
                    f"üéØ <b>–ü—Ä–æ–º–ø—Ç v2.2 –∞–∫—Ç–∏–≤–Ω–∏–π (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π)!</b>\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É (ID: {ADMIN_USER_ID}): {e}")
        
        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt).")
    except TelegramAPIError as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    finally:
        logger.info("üõë –†–æ–∑–ø–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        if bot.session and not bot.session.closed: # type: ignore
            await bot.session.close() # type: ignore
            logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.")
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())
