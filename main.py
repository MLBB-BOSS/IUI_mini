"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.
–î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è –∑ "–≤–∞—É-–µ—Ñ–µ–∫—Ç–æ–º" —Ç–∞ –æ–ø–∏—Å–æ–º –≤—ñ–¥ –®–Ü.
–ú–æ–¥–µ–ª—ñ GPT –∂–æ—Ä—Å—Ç–∫–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ –∫–æ–¥—ñ. –û–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è /go —Ç–∞ Vision.

Python 3.11+ | aiogram 3.19+ | OpenAI
Author: MLBB-BOSS | Date: 2025-05-26
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any

import base64
import json
import html

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
import aiohttp
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è Vision (–∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤): gpt-4o-mini (–∂–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–æ)")
logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π (/go, –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): gpt-4.1 (–∂–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–æ)")

# === –°–¢–ê–ù–ò FSM –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
class VisionAnalysisStates(StatesGroup):
    awaiting_profile_screenshot = State()
    awaiting_analysis_trigger = State()

# === –ü–†–û–ú–ü–¢–ò ===

# –ü—Ä–æ–º–ø—Ç –¥–ª—è Vision API (–∑ –≤–µ—Ä—Å—ñ—ó 42b0af22f24275ac7fd499dad0d6e7621c7e7268)
PROFILE_SCREENSHOT_PROMPT = """
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è Mobile Legends: Bang Bang.
–í–∏—Ç—è–≥–Ω–∏ —Ç–∞–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ —ó—ó —É –≤–∏–≥–ª—è–¥—ñ JSON –æ–±'—î–∫—Ç–∞:
- "game_nickname": –Ü–≥—Ä–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è (string).
- "mlbb_id_server": ID –≥—Ä–∞–≤—Ü—è —Ç–∞ —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ "ID (SERVER)" (string). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "123456789 (1234)".
- "current_rank": –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è (string). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "–ï–ø—ñ—á–Ω–∏–π V", "–õ–µ–≥–µ–Ω–¥–∞ III", "–ú—ñ—Ñ—ñ—á–Ω–∏–π 10 –∑—ñ—Ä–æ–∫".
- "highest_rank_season": –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –≤ —Ü—å–æ–º—É —Å–µ–∑–æ–Ω—ñ (string). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 –∑—ñ—Ä–æ–∫".
- "matches_played": –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ–≥—Ä–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤ (integer).
- "win_rate_all_matches": –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ –∑–∞ –≤—Å—ñ –º–∞—Ç—á—ñ (float, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 55.6). –Ø–∫—â–æ –Ω–µ –≤–∏–¥–Ω–æ, —Å—Ç–∞–≤ null.
- "likes_received": –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ª–∞–π–∫—ñ–≤ (integer).
- "favorite_hero_1_name": –Ü–º'—è –ø–µ—Ä—à–æ–≥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≥–µ—Ä–æ—è (string).
- "favorite_hero_1_matches": –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ –Ω–∞ –ø–µ—Ä—à–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (integer).
- "favorite_hero_1_wr": –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ –Ω–∞ –ø–µ—Ä—à–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (float).
- "favorite_hero_2_name": –Ü–º'—è –¥—Ä—É–≥–æ–≥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≥–µ—Ä–æ—è (string).
- "favorite_hero_2_matches": –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ –Ω–∞ –¥—Ä—É–≥–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (integer).
- "favorite_hero_2_wr": –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ –Ω–∞ –¥—Ä—É–≥–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (float).
- "favorite_hero_3_name": –Ü–º'—è —Ç—Ä–µ—Ç—å–æ–≥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ –≥–µ—Ä–æ—è (string).
- "favorite_hero_3_matches": –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ –Ω–∞ —Ç—Ä–µ—Ç—å–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (integer).
- "favorite_hero_3_wr": –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ –Ω–∞ —Ç—Ä–µ—Ç—å–æ–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –≥–µ—Ä–æ—ó (float).
- "squad_name": –ù–∞–∑–≤–∞ —Å–∫–≤–∞–¥—É (string), —è–∫—â–æ —î.
- "location": –õ–æ–∫–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ (string).

–í–ê–ñ–õ–ò–í–û:
1. –ü–æ–≤–µ—Ä—Ç–∞–π –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–π JSON. –ñ–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ –∞–±–æ –ø—ñ—Å–ª—è JSON.
2. –Ø–∫—â–æ —è–∫–∞—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞—á–µ–Ω–Ω—è null –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ–ª—è.
3. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∏–º –∑ —Ü–∏—Ñ—Ä–∞–º–∏. –î–ª—è —Ä–∞–Ω–≥—ñ–≤ —ñ–∑ –∑—ñ—Ä–∫–∞–º–∏, –≤–∫–∞–∑—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ú—ñ—Ñ—ñ—á–Ω–∏–π 111 ‚òÖ" –∞–±–æ "–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 1026 ‚òÖ").
4. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ç–µ–∫—Å—Ç —É–≤–∞–∂–Ω–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –Ω–µ–≤–µ–ª–∏–∫–∏–π.
"""

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó "–ª—é–¥—Å—å–∫–æ–≥–æ" –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é (–∑ –≤–µ—Ä—Å—ñ—ó v2.7/v2.8)
PROFILE_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –∫—Ä—É—Ç–∏–π —Å—Ç—Ä—ñ–º–µ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫ Mobile Legends, —è–∫–∏–π —Ä–æ–∑–º–æ–≤–ª—è—î –∑ –≥—Ä–∞–≤—Ü—è–º–∏ –Ω–∞ —ó—Ö–Ω—ñ–π –º–æ–≤—ñ. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –∞–ª–µ —è—Å–∫—Ä–∞–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è {user_name}.

–û—Å—å –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é:
- –ù—ñ–∫–Ω–µ–π–º: {game_nickname}
- –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥: {current_rank}
- –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ —Å–µ–∑–æ–Ω—É: {highest_rank_season}
- –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {matches_played}
- –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {likes_received}
- –õ–æ–∫–∞—Ü—ñ—è: {location}
- –°–∫–≤–∞–¥: {squad_name}

–ù–∞–ø–∏—à–∏ 2-4 —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–≥—Ä–æ–≤–∏–π —Å–ª–µ–Ω–≥ MLBB (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Ç–∞—â–µ—Ä", "—ñ–º–±–∞", "—Ñ–∞—Ä–º–∏—Ç—å —è–∫ –±–æ–∂–µ–Ω—å–∫–∞", "—Ä–≤–µ —Ç–æ–ø–∏", "–≤–µ—Ç–µ—Ä–∞–Ω –∫–∞—Ç–æ–∫", "—Å–∫—ñ–ª–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å", "–ø—ñ–¥–Ω—è–≤ —Ä–µ–π—Ç", "–∑–∞–ª–∏–≤–∞—î –∫–∞—Ç–∫–∏" —Ç–æ—â–æ).
–ó—Ä–æ–±–∏ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —è–∫–∏—Ö–æ—Å—å —Ü—ñ–∫–∞–≤–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ—Ñ—ñ–ª—é (–±–∞–≥–∞—Ç–æ –º–∞—Ç—á—ñ–≤, –≤–∏—Å–æ–∫–∏–π —Ä–∞–Ω–≥, –±–∞–≥–∞—Ç–æ –ª–∞–π–∫—ñ–≤).
–ì–æ–ª–æ–≤–Ω–µ ‚Äî —â–æ–± –±—É–ª–æ –¥—Ä—É–∂–Ω—å–æ, –∑ –≥—É–º–æ—Ä–æ–º (—è–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ) —ñ –ø–æ-–≥–µ–π–º–µ—Ä—Å—å–∫–∏.
–ù–µ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ, –ø—Ä–æ—Å—Ç–æ –¥–∞–π –∑–∞–≥–∞–ª—å–Ω–µ –≤—Ä–∞–∂–µ–Ω–Ω—è.
–í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äì –¢–Ü–õ–¨–ö–ò —Å–∞–º —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è, –±–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å —Ç–∏–ø—É "–ü—Ä–∏–≤—ñ—Ç, {user_name}!".
"""

class MLBBChatGPT:
    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=60), 
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ MLBBChatGPT: {exc_type} {exc_val}", exc_info=True)

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è /go (–∑ –≤–µ—Ä—Å—ñ—ó eb838b6781470a7c1c21b9c84626a716124aa967)
    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        kyiv_tz = timezone(timedelta(hours=3))
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        return f"""–¢–∏ ‚Äî IUI, –µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang.
–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–ó–∞–≤–∂–¥–∏ –¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ —è–∫–æ—Å—Ç—ñ, –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ.

# –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML, —Ç–æ–º—É –í–ê–ñ–õ–ò–í–û –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –í–ê–õ–Ü–î–ù–ò–ô HTML –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏ <b>, <i>, <code>).

# –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

## üéØ –°–¢–†–£–ö–¢–£–†–ê –¢–ê –ó–ú–Ü–°–¢:
1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: –ü–æ—á–∏–Ω–∞–π –∑ "{greeting}, {user_name}! üëã"
2.  **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**:
    *   –ß—ñ—Ç–∫–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Å—É—Ç—ñ –∑–∞–ø–∏—Ç—É.
    *   –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤, —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π, —Ä–æ–ª–µ–π –∞–±–æ –≥—Ä–∏ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ª—ñ–Ω—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø—ñ", "–∫–æ–≥–æ –≤–∑—è—Ç–∏ –≤ –º—ñ–¥", "–∫–æ–Ω—Ç—Ä–ø—ñ–∫ –ø—Ä–æ—Ç–∏ –§—Ä–∞–Ω–∫–æ"):
        *   –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π 2-3 –Ü–°–ù–£–Æ–ß–ò–•, –ê–ö–¢–£–ê–õ–¨–ù–ò–• –≥–µ—Ä–æ—ó–≤ Mobile Legends, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –∑–∞–ø–∏—Ç.
        *   –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ –≥–µ—Ä–æ—ó —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º (—ó—Ö–Ω—ñ –∫–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏, —Ä–æ–ª—å —É –∫–æ–º–∞–Ω–¥—ñ, —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∑–∞–ø–∏—Ç—É).
        *   –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ, –∑–≥–∞–¥–∞–π –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Ü–∏—Ö –≥–µ—Ä–æ—ó–≤ –∑ —ñ–Ω—à–∏–º–∏ –∞–±–æ –ø—Ä–æ —Å–∏–Ω–µ—Ä–≥—ñ—é.
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: –î–µ–∫—ñ–ª—å–∫–∞ –¥—ñ—î–≤–∏—Ö –ø–æ—Ä–∞–¥, —â–æ —Ä–æ–±–∏—Ç–∏ –≥—Ä–∞–≤—Ü—é –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—Ö—É.
4.  **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ó–∞–≤–µ—Ä—à—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä—é—é—á–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º.

## üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–í–ê–õ–Ü–î–ù–ò–ô HTML):
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É</b>, <i>–¥–ª—è –∫—É—Ä—Å–∏–≤—É</i>, <code>–¥–ª—è –∫–æ–¥—É –∞–±–æ –Ω–∞–∑–≤ –≥–µ—Ä–æ—ó–≤/–ø—Ä–µ–¥–º–µ—Ç—ñ–≤</code>. –£–°–Ü –¢–ï–ì–ò –ü–û–í–ò–ù–ù–Ü –ë–£–¢–ò –ö–û–†–ï–ö–¢–ù–û –ó–ê–ö–†–ò–¢–Ü.
-   –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—é–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞—Ä–∫–µ—Ä–∞ "‚Ä¢ " –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (–∑ –ø—Ä–æ–±—ñ–ª–æ–º –ø—ñ—Å–ª—è –º–∞—Ä–∫–µ—Ä–∞).
-   –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é, –ª–µ–≥–∫–æ—é –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, –æ–±—Å—è–≥–æ–º –ø—Ä–∏–±–ª–∏–∑–Ω–æ 200-300 —Å–ª—ñ–≤.
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Ä–µ—á–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ü¶∏‚Äç‚ôÇÔ∏è –¥–ª—è –≥–µ—Ä–æ—ó–≤, üí° –¥–ª—è –ø–æ—Ä–∞–¥, üõ°Ô∏è –¥–ª—è —Ç–∞–Ω–∫—ñ–≤, ‚öîÔ∏è –¥–ª—è –±—ñ–π—Ü—ñ–≤, üéØ –¥–ª—è —Å—Ç—Ä—ñ–ª—å—Ü—ñ–≤, üßô –¥–ª—è –º–∞–≥—ñ–≤, üí® –¥–ª—è –≤–±–∏–≤—Ü—å, ü§ù –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏).

## üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
-   **–ì–µ—Ä–æ—ó**: –ì–ª–∏–±–æ–∫–µ –∑–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤, —ó—Ö–Ω—ñ—Ö –º–µ—Ö–∞–Ω—ñ–∫, —Ä–æ–ª–µ–π, —Å–∏–ª—å–Ω–∏—Ö —Ç–∞ —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω, –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–ø—ñ–∫—ñ–≤, —Å–∏–Ω–µ—Ä–≥—ñ—ó —Ç–∞ –≥–µ—Ä–æ—ó–≤, —è–∫—ñ –∑–∞—Ä–∞–∑ —É –º–µ—Ç—ñ. –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É–π —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö –≥–µ—Ä–æ—ó–≤.
-   **–ü—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞ –ï–º–±–ª–µ–º–∏**: –ó–∞–≥–∞–ª—å–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è, –∞–ª–µ –Ω–µ —Ñ–æ–∫—É—Å—É–π—Å—è –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –±—ñ–ª–¥–∞—Ö, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —à–≤–∏–¥–∫–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è. –ö—Ä–∞—â–µ –¥–∞–≤–∞–π –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —Å—Ç–∏–ª—é –≥—Ä–∏.
-   **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –†–æ–∑—É–º—ñ–Ω–Ω—è –ª–∞–π–Ω—ñ–Ω–≥—É, —Ä–æ—Ç–∞—Ü—ñ–π, –∫–æ–Ω—Ç—Ä–æ–ª—é –æ–±'—î–∫—Ç—ñ–≤ (–ß–µ—Ä–µ–ø–∞—Ö–∞, –õ–æ—Ä–¥), —Ç—ñ–º—Ñ–∞–π—Ç-—Ç–∞–∫—Ç–∏–∫, –º–∞–∫—Ä–æ- —Ç–∞ –º—ñ–∫—Ä–æ-–≥—Ä–∏.
-   **–†–∞–Ω–≥—ñ–Ω–≥ —Ç–∞ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É, –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç—ñ–ª—å—Ç—É.
-   **–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ç—á**: –ù–∞–º–∞–≥–∞–π—Å—è –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –≤ –≥—Ä—ñ, –º–µ—Ç—É —Ç–∞ –±–∞–ª–∞–Ω—Å –≥–µ—Ä–æ—ó–≤.

## ‚ùå –£–ù–ò–ö–ê–ô:
-   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
-   –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ù–ï–ó–ê–ö–†–ò–¢–ò–• –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö HTML —Ç–µ–≥—ñ–≤ (—Ü–µ —Å–ø—Ä–∏—á–∏–Ω—è—î –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram).
-   –ù–∞–¥—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–æ –±—ñ–ª–¥–∞—Ö (–ø—Ä–µ–¥–º–µ—Ç–∏/–µ–º–±–ª–µ–º–∏).
-   –î–æ–≤–≥–∏—Ö, –º–æ–Ω–æ—Ç–æ–Ω–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É –±–µ–∑ –∞–±–∑–∞—Ü—ñ–≤ —Ç–∞ —Å–ø–∏—Å–∫—ñ–≤.
-   –í–∏–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –≥–µ—Ä–æ—ó–≤, –º–µ—Ö–∞–Ω—ñ–∫ –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.

## –ü–†–ò–ö–õ–ê–î –°–¢–ò–õ–Æ –¢–ê –°–¢–†–£–ö–¢–£–†–ò –í–Ü–î–ü–û–í–Ü–î–Ü (–Ω–∞ –∑–∞–ø–∏—Ç "–∫–æ–≥–æ –≤–∑—è—Ç–∏ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏?"):

"{greeting}, {user_name}! üëã

–•–∞—è–±—É—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º –≥–æ–ª–æ–≤–Ω–∏–º –±–æ–ª–µ–º, –∞–ª–µ —î –≥–µ—Ä–æ—ó, —è–∫—ñ —á—É–¥–æ–≤–æ –π–æ_„ÉÉ„Éî„É≥„Ç∞ –π–æ–º—É –ø—Ä–æ—Ç–∏—Å—Ç–æ—è—Ç—å! ü§∫

ü¶∏‚Äç‚ôÇÔ∏è <b>–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–ø—ñ–∫—ñ–≤:</b>
‚Ä¢ <code>–ö–∞–π—è</code>: –ô–æ–≥–æ —É–ª—å—Ç—ñ–º–µ–π—Ç <i>"–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∏–π –°—É–¥"</i> –¥–æ–∑–≤–æ–ª—è—î —Å—Ö–æ–ø–∏—Ç–∏ –•–∞—è–±—É—Å—É –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥ —á–∞—Å –π–æ–≥–æ —Ç—ñ–Ω–µ–π —Ç–∞ –≤—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–Ω–∏—â–µ–Ω–Ω—è. üõ°Ô∏è
‚Ä¢ <code>–•—É—Ñ—Ä–∞</code>: –ô–æ–≥–æ –Ω–∞–≤–∏—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é, –æ—Å–æ–±–ª–∏–≤–æ –¥—Ä—É–≥–∞ –Ω–∞–≤–∏—á–∫–∞ <i>"–°—Ç—Ä–∏–±–∞—é—á–∏–π –ú'—è—á"</i>, –º–æ–∂—É—Ç—å –∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–∏–≤–∫–∏ –•–∞—è–±—É—Å–∏ —Ç–∞ –Ω–µ –¥–∞—Ç–∏ –π–æ–º—É –≤—Ç–µ–∫—Ç–∏ –∞–±–æ –∞—Ç–∞–∫—É–≤–∞—Ç–∏. üí®
‚Ä¢ <code>–°–∞–±–µ—Ä</code>: –ó –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –±—ñ–ª–¥–æ–º –Ω–∞ –ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—è, —É–ª—å—Ç—ñ–º–µ–π—Ç –°–∞–±–µ—Ä–∞ <i>"–ü–æ—Ç—Ä—ñ–π–Ω–∏–π –ó–∞–º–∞—Ö"</i> –º–æ–∂–µ –º–∏—Ç—Ç—î–≤–æ –∑–Ω–∏—â–∏—Ç–∏ –•–∞—è–±—É—Å—É, –æ—Å–æ–±–ª–∏–≤–æ –Ω–∞ —Ä–∞–Ω–Ω—ñ—Ö —Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Å—Ç–∞–¥—ñ—è—Ö –≥—Ä–∏. ‚öîÔ∏è

üí° <b>–ö–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏:</b>
‚Ä¢ –ù–∞–º–∞–≥–∞–π—Ç–µ—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –π–æ–≥–æ –±–∞—Ñ–∏, –æ—Å–æ–±–ª–∏–≤–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.
‚Ä¢ –ö—É–ø—É–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏ –Ω–∞ –∑–∞—Ö–∏—Å—Ç, —Ç–∞–∫—ñ —è–∫ <i>"–ó–∏–º–æ–≤–∏–π –ñ–µ–∑–ª"</i> –¥–ª—è –º–∞–≥—ñ–≤ –∞–±–æ <i>"–ë–µ–∑—Å–º–µ—Ä—Ç—è"</i>.
‚Ä¢ –í–∞–∂–ª–∏–≤–∏–π —Ö–æ—Ä–æ—à–∏–π –≤—ñ–∂–Ω –Ω–∞ –∫–∞—Ä—Ç—ñ, —â–æ–± –±–∞—á–∏—Ç–∏ –π–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.

ü§ù <b>–©–æ–¥–æ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏:</b> –ö–æ–æ—Ä–¥–∏–Ω—É–π—Ç–µ —Å–≤–æ—ó –¥—ñ—ó, —â–æ–± –ª–æ–≤–∏—Ç–∏ –•–∞—è–±—É—Å—É —Ä–∞–∑–æ–º. –ì–µ—Ä–æ—ó –∑ –º–∞—Å–æ–≤–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, —è–∫ <i>–ê—Ç–ª–∞—Å</i> –∞–±–æ <i>–õ–æ–ª—ñ—Ç–∞</i>, —Ç–∞–∫–æ–∂ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–∏–º–∏.

–ü–∞–º'—è—Ç–∞–π, —â–æ —É—Å–ø—ñ—Ö –∑–∞–ª–µ–∂–∏—Ç—å –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—è, –∞ –π –≤—ñ–¥ —Ç–≤–æ—ó—Ö –Ω–∞–≤–∏—á–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏! –£—Å–ø—ñ—Ö—ñ–≤ –Ω–∞ –ø–æ–ª—è—Ö –±–∏—Ç–≤! üëç"

# –ó–ê–ü–ò–¢ –í–Ü–î {user_name}:
"{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ –≤–∏—â–µ, –æ—Å–æ–±–ª–∏–≤–æ —â–æ–¥–æ –í–ê–õ–Ü–î–ù–û–ì–û HTML —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –≥–µ—Ä–æ—ó–≤):
"""

    def _beautify_response(self, text: str) -> str:
        # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }
        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°" 
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower(): best_emoji = header_emojis.get(key, best_emoji); break
            else:
                for key, emj in header_emojis.items():
                    if key in header_text.lower(): best_emoji = emj; break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"
        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+-\s+", "  ‚ó¶ ", text, flags=re.MULTILINE) 
        text = re.sub(r"\n{3,}", "\n\n", text)
        text = re.sub(r"\*\*(?P<content>.+?)\*\*", r"<b>\g<content></b>", text)
        text = re.sub(r"\*(?P<content>.+?)\*", r"<i>\g<content></i>", text)
        open_b_count = len(re.findall(r"<b>", text))
        close_b_count = len(re.findall(r"</b>", text))
        if open_b_count > close_b_count:
            missing_tags = open_b_count - close_b_count
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {missing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ <b>. –î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å.")
            text += "</b>" * missing_tags
        elif close_b_count > open_b_count:
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_b_count - open_b_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ </b>.")
        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str: # –î–ª—è /go
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT (/go) –≤—ñ–¥ '{user_name}': '{user_query}'")
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1", 
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000, 
            "temperature": 0.65, # –Ø–∫ –±—É–ª–æ –≤ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ–º–ø—Ç—ñ /go
            "top_p": 0.9,
            "presence_penalty": 0.3, 
            "frequency_penalty": 0.2 
        }
        # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –∑ v2.8 –±–µ–∑ –∑–º—ñ–Ω)
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ–∫—Å—Ç—É –¥–ª—è GPT: temperature={payload['temperature']}")
        try:
            if not self.session or self.session.closed:
                 self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                 self.session = ClientSession(
                    timeout=ClientTimeout(total=45), 
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
            async with self.session.post( # type: ignore
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status})."
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø."
                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT (–ø–µ—Ä—à—ñ 100): '{raw_gpt_text[:100]}'")
                return self._beautify_response(raw_gpt_text)
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (—Ç–µ–∫—Å—Ç) –¥–ª—è: '{user_query}'")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥."
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –¥–ª—è '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name} üòï."

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]: # –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: '{prompt[:70]}...'")
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {self.api_key}"}
        payload = {
            "model": "gpt-4o-mini", 
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt}, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π PROFILE_SCREENSHOT_PROMPT
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                    ]
                }
            ],
            "max_tokens": 1500, # –Ø–∫ –±—É–ª–æ
            "temperature": 0.2 # –Ø–∫ –±—É–ª–æ –¥–ª—è Vision —É —Å—Ç–∞—Ä—ñ–π –≤–µ—Ä—Å—ñ—ó –ø—Ä–æ–º–ø—Ç—É (42b0af22)
        }
        # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –∑ v2.8 –±–µ–∑ –∑–º—ñ–Ω)
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Vision API: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}, temperature={payload['temperature']}")

        try:
            if not self.session or self.session.closed:
                self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è Vision –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–≤—É —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
                async with ClientSession(headers={"Authorization": f"Bearer {self.api_key}"}) as temp_session: # type: ignore
                    async with temp_session.post(
                        "https://api.openai.com/v1/chat/completions", 
                        headers=headers,
                        json=payload,
                        timeout=ClientTimeout(total=90)
                    ) as response:
                        return await self._handle_vision_response(response)
            else:
                async with self.session.post( # type: ignore
                    "https://api.openai.com/v1/chat/completions", 
                    headers=headers, 
                    json=payload,
                    timeout=ClientTimeout(total=90)
                ) as response:
                    return await self._handle_vision_response(response)
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API Timeout –ø–æ–º–∏–ª–∫–∞.")
            return {"error": "–ó–∞–ø–∏—Ç –¥–æ Vision API –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
        if response.status == 200:
            try:
                result = await response.json()
            except aiohttp.ContentTypeError: 
                raw_text_response = await response.text()
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {raw_text_response[:300]}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": raw_text_response}

            content = result.get("choices", [{}])[0].get("message", {}).get("content")
            if content:
                self.class_logger.info(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): {content[:100]}")
                json_match = re.search(r"```json\s*([\s\S]+?)\s*```", content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(1)
                else:
                    json_str = content.strip()
                
                try:
                    if not json_str.startswith("{") and "{" in json_str:
                        json_str = json_str[json_str.find("{"):]
                    if not json_str.endswith("}") and "}" in json_str:
                        json_str = json_str[:json_str.rfind("}")+1]
                    
                    return json.loads(json_str)
                except json.JSONDecodeError as e:
                    self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ Vision API: {e}. –†—è–¥–æ–∫: '{json_str[:300]}'")
                    return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API.", "raw_response": content}
            else:
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}
        else:
            error_text = await response.text()
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text[:300]}")
            return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_text[:200]}

    async def get_profile_description(self, user_name: str, profile_data: Dict[str, Any]) -> str: # –û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name}'.")
        system_prompt_text = PROFILE_DESCRIPTION_PROMPT_TEMPLATE.format(
            user_name=html.escape(user_name),
            game_nickname=html.escape(str(profile_data.get("game_nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            current_rank=html.escape(str(profile_data.get("current_rank", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            highest_rank_season=html.escape(str(profile_data.get("highest_rank_season", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            matches_played=profile_data.get("matches_played", "N/A"),
            likes_received=profile_data.get("likes_received", "N/A"),
            location=html.escape(str(profile_data.get("location", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            squad_name=html.escape(str(profile_data.get("squad_name", "–ù–µ–º–∞—î"))),
        )
        payload = {
            "model": "gpt-4.1", 
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 200,
            "temperature": 0.7,
            "top_p": 0.9,
            "presence_penalty": 0.2,
            "frequency_penalty": 0.2
        }
        # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –∑ v2.8 –±–µ–∑ –∑–º—ñ–Ω)
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é: temp={payload['temperature']}, max_tokens={payload['max_tokens']}")

        try:
            if not self.session or self.session.closed:
                 self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                 self.session = ClientSession(
                    timeout=ClientTimeout(total=30), 
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
            async with self.session.post( # type: ignore
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): {response.status} - {error_text}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –≤—ñ–¥ –®–Ü. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
                
                description_text = result["choices"][0]["message"]["content"].strip()
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é: '{description_text[:100]}'")
                return html.escape(description_text) 
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é) –¥–ª—è: '{user_name}'")
            return "<i>–û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ... –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é) –¥–ª—è '{user_name}': {e}")
            return "<i>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>"

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear() 
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"
    
    # –°–ø—Ä–æ—â–µ–Ω–µ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome_text = f"""
{greeting_msg}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.9!
–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang.

<b>üí° –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>
‚Ä¢ <b>–¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ—Ä–∞–¥–∏:</b> –ó–∞–ø–∏—Ç—É–π –±—É–¥—å-—â–æ –ø—Ä–æ –≥—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <code>/go —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è</code>.
‚Ä¢ <b>–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é:</b> –ù–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ <code>/analyzeprofile</code>, —ñ —è –π–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é —Ç–∞ –¥–∞–º –¥—Ä—É–∂–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä!

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ <code>/go</code>:</b>
‚Ä¢ <code>/go —è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –ø—Ä–æ—Ç–∏ –±—ñ–π—Ü—ñ–≤</code>
‚Ä¢ <code>/go –ø–æ—Ä–∞–¥—å —Å–∏–ª—å–Ω–∏—Ö –º–∞–≥—ñ–≤ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É —Å–æ–ª–æ</code>

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    try:
        await message.answer(welcome_text)
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name} (v2.9) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}: {e}")

@dp.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –∑ v2.8, –æ–Ω–æ–≤–ª–µ–Ω–æ –≤–µ—Ä—Å—ñ—é –±–æ—Ç–∞ –≤ admin_info)
    await state.clear()
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")
    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>"
        )
        return
    thinking_messages = [
        f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —Ç–∞ –ø—ñ–¥–±–∏—Ä–∞—é –≥–µ—Ä–æ—ó–≤...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name}: {e}")
    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {e}")
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {processing_time:.2f}—Å")
    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.9 GPT (gpt-4.1)</i>" # –ó–∞–∑–Ω–∞—á–µ–Ω–æ –º–æ–¥–µ–ª—å
    full_response_to_send = f"{response_text}{admin_info}"
    try:
        if thinking_msg: await thinking_msg.edit_text(full_response_to_send)
        else: await message.reply(full_response_to_send)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ/–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ /go –¥–ª—è {user_name}: {e}. –¢–µ–∫—Å—Ç (100): '{full_response_to_send[:100]}'")
        if "can't parse entities" in str(e).lower():
            plain_text_response = re.sub(r"<[^>]+>", "", response_text) 
            fallback_message = (f"{plain_text_response}{admin_info}\n\n<i>(–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML. –ü–æ–∫–∞–∑–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç.)</i>")
            try:
                if thinking_msg: await thinking_msg.edit_text(fallback_message, parse_mode=None)
                else: await message.reply(fallback_message, parse_mode=None)
            except Exception as plain_e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç /go –¥–ª—è {user_name}: {plain_e}")
        else:
            try: await message.reply(f"–í–∏–±–∞—á, {user_name}, –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. (–ö–æ–¥: TG_{e.__class__.__name__})", parse_mode=None)
            except Exception as final_e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É Telegram –¥–ª—è {user_name}: {final_e}")

# === –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –°–ö–†–Ü–ù–®–û–¢–Ü–í ===
# ... (cmd_analyze_profile, handle_profile_screenshot, trigger_vision_analysis_callback, 
#      delete_bot_message_callback, cancel_profile_analysis, 
#      handle_wrong_input_for_profile_screenshot - –∫–æ–¥ –∑ v2.8 –±–µ–∑ –∑–º—ñ–Ω, 
#      –∫—Ä—ñ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–µ –≤–∫–∞–∑–∞–Ω–æ –≤–µ—Ä—Å—ñ—é —Ç–∞ –º–æ–¥–µ–ª—ñ)

@dp.message(Command("analyzeprofile"))
async def cmd_analyze_profile(message: Message, state: FSMContext):
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
async def handle_profile_screenshot(message: Message, state: FSMContext):
    bot_instance = message.bot
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≤—ñ–¥ {user_name} (ID: {message.from_user.id}).")

    if not message.photo: 
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return

    photo_file_id = message.photo[-1].file_id
    
    try:
        await message.delete() 
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º: {e}")

    await state.update_data(vision_photo_file_id=photo_file_id, original_user_name=user_name)
    
    caption_text = "–°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ."
    
    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message") 
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])
    
    try:
        sent_message = await bot_instance.send_photo(
            chat_id=chat_id,
            photo=photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name} –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏. –ù–æ–≤–∏–π state: awaiting_analysis_trigger")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {e}")
        await bot_instance.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

@dp.callback_query(F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext):
    bot_instance = callback_query.bot
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    
    try:
        await callback_query.message.edit_caption( # type: ignore
            caption="‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç (gpt-4o-mini)...\nü§ñ –ì–µ–Ω–µ—Ä—É—é —Ç–∞–∫–æ–∂ –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å (gpt-4.1)...",
            reply_markup=None
        )
        await callback_query.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ –∞–Ω–∞–ª—ñ–∑...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º: {e}")

    user_data = await state.get_data()
    photo_file_id = user_data.get("vision_photo_file_id")
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")

    if not photo_file_id:
        logger.error("File_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        try:
            await callback_query.message.edit_caption(caption="–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑.", reply_markup=None) # type: ignore
        except TelegramAPIError: pass
        await state.clear()
        return

    final_caption_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    structured_data_text = ""
    profile_description = ""

    try:
        file_info = await bot_instance.get_file(photo_file_id)
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        
        downloaded_file_io = await bot_instance.download_file(file_info.file_path)
        if downloaded_file_io is None:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π PROFILE_SCREENSHOT_PROMPT
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, PROFILE_SCREENSHOT_PROMPT) 
            
            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é (JSON) –¥–ª—è {user_name}: {analysis_result_json}")
                # –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ –¥–ª—è –≤–∏–≤–æ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ Vision –ø—Ä–æ–º–ø—Ç—É
                response_parts = [f"<b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, {user_name}:</b>"]
                fields_translation = {
                    "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
                    "current_rank": "üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥", "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)",
                    "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", 
                    "win_rate_all_matches": "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–Ω—Ä–µ–π—Ç",
                    "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
                    "favorite_hero_1_name": "ü•á –¢–æ–ø 1 –≥–µ—Ä–æ–π",
                    "favorite_hero_1_matches": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ (–¢–æ–ø 1)",
                    "favorite_hero_1_wr": "üìä WR (–¢–æ–ø 1)",
                    "favorite_hero_2_name": "ü•à –¢–æ–ø 2 –≥–µ—Ä–æ–π",
                    "favorite_hero_2_matches": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ (–¢–æ–ø 2)",
                    "favorite_hero_2_wr": "üìä WR (–¢–æ–ø 2)",
                    "favorite_hero_3_name": "ü•â –¢–æ–ø 3 –≥–µ—Ä–æ–π",
                    "favorite_hero_3_matches": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ (–¢–æ–ø 3)",
                    "favorite_hero_3_wr": "üìä WR (–¢–æ–ø 3)",
                    "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥", "location": "üåç –õ–æ–∫–∞—Ü—ñ—è"
                }
                has_data = False
                for key, readable_name in fields_translation.items():
                    value = analysis_result_json.get(key)
                    if value is not None:
                        display_value = str(value)
                        if "rank" in key and ("‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower() or "—Å–ª–∞–≤–∞" in display_value.lower()):
                            if "‚òÖ" not in display_value:
                                 display_value = display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ")
                            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value)
                        if "_wr" in key or "win_rate" in key:
                            display_value += "%"
                        response_parts.append(f"<b>{readable_name}:</b> {html.escape(display_value)}")
                        has_data = True
                    # –ù–µ –¥–æ–¥–∞—î–º–æ "–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, –±–æ –ø—Ä–æ–º–ø—Ç Vision —Ç–µ–ø–µ—Ä –º–∞—î –±–∞–≥–∞—Ç–æ –ø–æ–ª—ñ–≤
                
                if not has_data and analysis_result_json.get("raw_response"):
                     response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.</i>")
                elif not has_data:
                     response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.</i>")
                structured_data_text = "\n".join(response_parts)

                profile_description = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
                final_caption_text = f"{profile_description}\n\n{structured_data_text}"

            else: 
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É.') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é (JSON) –¥–ª—è {user_name}: {error_msg}")
                final_caption_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {e}")
        final_caption_text = f"–î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
    
    delete_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑", callback_data="delete_bot_message")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
    
    try:
        await bot_instance.edit_message_caption( # type: ignore
            chat_id=chat_id,
            message_id=message_id, # type: ignore
            caption=final_caption_text,
            reply_markup=keyboard
        )
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É: {e}. –ù–∞–¥—Å–∏–ª–∞—é –Ω–æ–≤–µ.")
        try:
            await bot_instance.send_photo(chat_id=chat_id, photo=photo_file_id, caption=final_caption_text, reply_markup=keyboard) # type: ignore
        except Exception as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º: {send_err}")
            await bot_instance.send_message(chat_id, final_caption_text)

    await state.clear()

@dp.callback_query(F.data == "delete_bot_message")
async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext):
    # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
    try:
        await callback_query.message.delete() # type: ignore
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        current_state = await state.get_state()
        if current_state == VisionAnalysisStates.awaiting_analysis_trigger.state: # type: ignore
            logger.info("–ü—Ä–µ–≤'—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, –æ—á–∏—â—É—é —Å—Ç–∞–Ω.")
            await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot, Command("cancel"))
@dp.message(VisionAnalysisStates.awaiting_analysis_trigger, Command("cancel"))
async def cancel_profile_analysis(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    
    user_data = await state.get_data()
    bot_message_id = user_data.get("bot_message_id_for_analysis")
    if bot_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É.")
        except TelegramAPIError:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ (ID: {bot_message_id}) –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ.")
            
    await state.clear()
    await message.reply("–ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go.")

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot)
@dp.message(VisionAnalysisStates.awaiting_analysis_trigger)
async def handle_wrong_input_for_profile_screenshot(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
    if message.text and message.text.lower() == "/cancel":
        await cancel_profile_analysis(message, state)
        return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        user_data = await state.get_data() 
        bot_message_id = user_data.get("bot_message_id_for_analysis")
        if bot_message_id:
            try: await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
            except TelegramAPIError: pass
        await state.clear()
        await cmd_go(message, state) 
    elif message.text:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç —É —Å—Ç–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É. –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        await message.reply("–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ –¥—ñ—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.")
    else: 
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

# === –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–ú–ò–õ–û–ö ===
@dp.errors()
async def error_handler(update_event, exception: Exception):
    # ... (–∫–æ–¥ –∑ v2.8, –±–µ–∑ –∑–º—ñ–Ω)
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ error_handler: {exception} –¥–ª—è update: {update_event}", exc_info=True)
    chat_id = None
    user_name = "–¥—Ä—É–∂–µ"
    if hasattr(update_event, 'message') and update_event.message:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user: user_name = update_event.message.from_user.first_name
    elif hasattr(update_event, 'callback_query') and update_event.callback_query:
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user: user_name = update_event.callback_query.from_user.first_name
        try: await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except Exception: pass 
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
    if chat_id:
        try: await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except Exception as e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É: {e}")
    else: logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id.")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main() -> None:
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini v2.9... (PID: {os.getpid()})") 
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini v2.9 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n" 
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {launch_time_kyiv}\n"
                    f"üéØ <b>–û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è /go —Ç–∞ Vision!</b>\n"
                    f"üî© –ú–æ–¥–µ–ª—ñ: Vision: <code>gpt-4o-mini</code>, –¢–µ–∫—Å—Ç/–û–ø–∏—Å: <code>gpt-4.1</code> (–∂–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω—ñ)\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É: {e}")
        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt: logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except TelegramAPIError as e: logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}", exc_info=True)
    except Exception as e: logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        if bot.session and hasattr(bot.session, "close") and not bot.session.closed: # type: ignore
             await bot.session.close() # type: ignore
             logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Bot –∑–∞–∫—Ä–∏—Ç–æ.")
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
