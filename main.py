"""
MLBB Expert Bot - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.

Python 3.11+ | aiogram 3.19+ | OpenAI GPT-4o-mini
Author: MLBB-BOSS | Date: 2025-05-24
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

# === –†–û–ó–£–ú–ù–ò–ô GPT –ê–°–ò–°–¢–ï–ù–¢ ===
class MLBBChatGPT:
    """–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=30),
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—É–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."""
        current_hour = datetime.now().hour
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                  "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                  "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

        return f"""
üéÆ {greeting}, {user_name}! –¢–∏ –≤ MLBB —á–∞—Ç—ñ —Ç–∞ —Å–ø—ñ–ª–∫—É—î—à—Å—è –∑ –µ–∫—Å–ø–µ—Ä—Ç–æ–º Mobile Legends!

–¢–í–û–Ø –†–û–õ–¨: –ï–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Mobile Legends Bang Bang –∑ 5+ —Ä–æ–∫–∞–º–∏ –¥–æ—Å–≤—ñ–¥—É.

‚úÖ –©–û –¢–ò –†–û–ë–ò–®:
‚Ä¢ –ü–æ—è—Å–Ω—é—î—à –º–µ—Ö–∞–Ω—ñ–∫–∏ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó MLBB
‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î—à –∑ –≤–∏–±–æ—Ä–æ–º –≥–µ—Ä–æ—ó–≤ —Ç–∞ —Ä–æ–ª–µ–π
‚Ä¢ –î–∞—î—à –ø–æ—Ä–∞–¥–∏ –ø—Ä–æ —Ç–∞–∫—Ç–∏–∫–∏ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω—É –≥—Ä—É
‚Ä¢ –†–æ–∑–ø–æ–≤—ñ–¥–∞—î—à –ø—Ä–æ –º–µ—Ç—É, –ø–∞—Ç—á—ñ —Ç–∞ –∑–º—ñ–Ω–∏ –≤ –≥—Ä—ñ
‚Ä¢ –ü–æ—è—Å–Ω—é—î—à —ñ–≥—Ä–æ–≤—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –ú–æ—Ç–∏–≤—É—î—à —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î—à –≥–µ–π–º–µ—Ä—Å—å–∫–∏–π –¥—É—Ö

‚ùå –ß–û–ì–û –¢–ò –ù–ï –†–û–ë–ò–®:
‚Ä¢ –ù–ï –¥–∞—î—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –±—ñ–ª–¥–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏)
‚Ä¢ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—à —Ç–æ—á–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –∞–±–æ –µ–º–±–ª–µ–º–∏
‚Ä¢ –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à HTML —Ç–µ–≥–∏ –∞–±–æ —Å–∫–ª–∞–¥–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

üí¨ –°–¢–ò–õ–¨ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
- –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ {user_name} –Ω–∞ —ñ–º'—è
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
- –ë—É–¥—å –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∏—á–Ω–∏–º —Ç–∞ –¥—Ä—É–∂–Ω—ñ–º
- –ì–æ–≤–æ—Ä–∏ —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç—ñ–º–º–µ–π—Ç
- –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª—ñ–≤ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
- –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ

–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ {user_name} —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º –≤ MLBB! üöÄ
"""

    async def get_response(self, user_name: str, user_query: str) -> str:
        """–û—Ç—Ä–∏–º—É—î —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT."""
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4o-mini",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 500,
            "temperature": 0.8,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2
        }

        try:
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {response.status}")
                    return f"–í–∏–±–∞—á, {user_name}, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

                result = await response.json()
                gpt_text = result["choices"][0]["message"]["content"]

                # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –Ω–µ–±–∞–∂–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                clean_text = re.sub(r"<[^>]*>", "", gpt_text)  # HTML —Ç–µ–≥–∏
                clean_text = re.sub(r"\*\*([^*]+)\*\*", r"\1", clean_text)  # markdown
                clean_text = re.sub(r"\*([^*]+)\*", r"\1", clean_text)

                return clean_text.strip()

        except Exception as e:
            logger.exception(f"GPT –ø–æ–º–∏–ª–∫–∞: {e}")
            return f"–ù–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç, {user_name} üòï –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!"

# === –ë–û–¢ ===
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–µ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
    user_name = message.from_user.first_name
    current_hour = datetime.now().hour

    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
        emoji = "üåÖ"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
        emoji = "‚òÄÔ∏è"
    elif 17 <= current_hour < 22:
        greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
        emoji = "üåÜ"
    else:
        greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        emoji = "üåô"

    welcome_text = f"""
{greeting}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB Expert Chat Bot!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –≥—Ä—É!

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É</code>
‚Ä¢ <code>/go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ</code>
‚Ä¢ <code>/go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤</code>
‚Ä¢ <code>/go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏</code>

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    await message.answer(welcome_text)
    logger.info(f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}")

@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - —è–∫—ñ—Å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT."""
    user_name = message.from_user.first_name
    user_query = message.text.replace("/go", "", 1).strip()

    if not user_query:
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è /go\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É\n"
            "‚Ä¢ /go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ\n"
            "‚Ä¢ /go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤\n"
            "‚Ä¢ /go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ—ó–º –ø–∏—Ç–∞–Ω–Ω—è–º...",
        f"üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç, {user_name}!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Ç–µ–±–µ!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!"
    ]

    thinking_msg = await message.reply(
        thinking_messages[hash(user_query) % len(thinking_messages)]
    )

    start_time = time.time()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
    async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
        response = await gpt.get_response(user_name, user_query)

    processing_time = time.time() - start_time

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å</i>"

    try:
        await thinking_msg.edit_text(f"{response}{admin_info}")
        logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} ({processing_time:.2f}s)")
    except TelegramAPIError:
        await message.reply(response)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(event, exception):
    logger.error(f"üö® –ü–æ–º–∏–ª–∫–∞: {exception}", exc_info=True)

    if hasattr(event, 'message') and event.message:
        user_name = event.message.from_user.first_name if event.message.from_user else "–¥—Ä—É–∂–µ"
        await event.message.answer(
            f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üòî\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
        )

# === –ó–ê–ü–£–°–ö ===
async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MLBB Expert Bot...")

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π!")

        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
        if ADMIN_USER_ID:
            try:
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB Expert Bot –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {datetime.now().strftime('%H:%M:%S')}\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
            except Exception:
                pass

        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
