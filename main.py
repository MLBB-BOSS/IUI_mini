import asyncio
import logging
import os
from datetime import datetime, timezone, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID, logger
from handlers.general_handlers import (
    register_general_handlers, 
    set_bot_commands,
    error_handler as general_error_handler
)
from handlers.vision_handlers import register_vision_handlers
from handlers.registration_handler import register_registration_handlers
# –ú–∏ –º–æ–∂–µ–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —ñ–º–ø–æ—Ä—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—É—Ç
# from handlers.general_handlers import cmd_go


async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    bot_version = "v3.0.2 (Router-Fix)"
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini {bot_version}... (PID: {os.getpid()})")

    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await set_bot_commands(bot)

    #  –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∞ –∑–º—ñ–Ω–∞: —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∏ –ü–ï–†–ï–î –∑–∞–≥–∞–ª—å–Ω–∏–º–∏
    register_registration_handlers(dp)
    
    # –¢–µ–ø–µ—Ä —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–µ—à—Ç—É —Ä–æ—É—Ç–µ—Ä—ñ–≤
    # –ú–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ `dp` –∑–∞–º—ñ—Å—Ç—å `cmd_go`, –æ—Å–∫—ñ–ª—å–∫–∏ `vision_handlers` —Ç–µ–ø–µ—Ä –±—É–¥–µ —Å–∞–º —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏
    register_vision_handlers(dp) 
    register_general_handlers(dp)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    @dp.errors()
    async def global_error_handler_wrapper(event: types.ErrorEvent):
        """
        Global error handler wrapper that catches unhandled exceptions.
        It calls the main error handling logic from general_handlers.
        'bot' instance is taken from the outer scope of main().
        """
        logger.debug(f"Global error wrapper caught exception: {event.exception} in update: {event.update}")
        await general_error_handler(event, bot)

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                
                admin_message_lines = [
                    f"ü§ñ <b>MLBB IUI mini {bot_version} –∑–∞–ø—É—â–µ–Ω–æ!</b>",
                    "",
                    f"üÜî @{bot_info.username}",
                    f"‚è∞ {launch_time_kyiv}",
                    "‚ú® <b>–ó–º—ñ–Ω–∏:</b>",
                    "  ‚Ä¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Ä—è–¥–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ—É—Ç–µ—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–æ–º–∞–Ω–¥.",
                    "üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                ]
                admin_message = "\n".join(admin_message_lines)
                
                await bot.send_message(str(ADMIN_USER_ID), admin_message, parse_mode=ParseMode.HTML)
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É (ID: {ADMIN_USER_ID}): {e}", exc_info=True)

        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt).")
    except TelegramAPIError as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        if bot and hasattr(bot, 'session') and bot.session and not bot.session.closed:
            try:
                await bot.session.close()
                logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ Bot –∑–∞–∫—Ä–∏—Ç–æ.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó HTTP –∫–ª—ñ—î–Ω—Ç–∞ Bot: {e}", exc_info=True)
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
