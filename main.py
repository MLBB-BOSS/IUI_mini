import asyncio
import logging
import os
from datetime import datetime, timezone, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø—Ä–æ—î–∫—Ç—É
from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID, logger, ASYNC_DATABASE_URL
# ‚ùóÔ∏è –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞–ø—Ä—è–º—É, —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ "—Å–∞–Ω—ñ—Ç–∞—Ä–Ω—É" —á–∏—Å—Ç–∫—É
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
# üÜï –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
from database.init_db import init_db
from handlers.general_handlers import (
    register_general_handlers, 
    set_bot_commands,
    error_handler as general_error_handler,
    cmd_go
)
from handlers.vision_handlers import register_vision_handlers
from handlers.registration_handler import register_registration_handlers


async def sanitize_database():
    """
    –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ player_id.
    """
    logger.info("ü©∫ Starting database sanitization process...")
    engine = create_async_engine(ASYNC_DATABASE_URL)
    async with engine.connect() as conn:
        try:
            # –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            async with conn.begin():
                # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ player_id, —è–∫—ñ –º–∞—é—Ç—å –¥—É–±–ª—ñ–∫–∞—Ç–∏
                find_duplicates_sql = text("""
                    SELECT player_id, COUNT(*)
                    FROM users
                    GROUP BY player_id
                    HAVING COUNT(*) > 1
                """)
                duplicates_result = await conn.execute(find_duplicates_sql)
                duplicate_player_ids = [row[0] for row in duplicates_result.all()]

                if not duplicate_player_ids:
                    logger.info("‚úÖ No duplicate player_id found. Database is clean.")
                else:
                    logger.warning(f"Found duplicate player_ids: {duplicate_player_ids}. Proceeding with cleanup...")
                    
                    # 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏, –∫—Ä—ñ–º –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `ctid` - —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä—è–¥–∫–∞ –≤ PostgreSQL
                    cleanup_sql = text("""
                        DELETE FROM users
                        WHERE ctid IN (
                            SELECT ctid
                            FROM (
                                SELECT 
                                    ctid,
                                    ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY created_at DESC) as rn
                                FROM users
                                WHERE player_id = ANY(:player_ids)
                            ) as sub
                            WHERE rn > 1
                        )
                    """)
                    result = await conn.execute(cleanup_sql, {"player_ids": duplicate_player_ids})
                    logger.info(f"‚úÖ Successfully deleted {result.rowcount} duplicate user entries.")

            # 3. –ü—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è (–∞–±–æ —è–∫—â–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –±—É–ª–æ) –∑–Ω–æ–≤—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å
            # –¶–µ–π –∫–æ–¥ –≤–∑—è—Ç–æ –∑ init_db.py –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            async with conn.begin():
                logger.info("Attempting to create unique index on 'player_id' after sanitization...")
                add_unique_index_sql = text("CREATE UNIQUE INDEX IF NOT EXISTS uq_users_player_id ON users (player_id)")
                await conn.execute(add_unique_index_sql)
                logger.info("‚úÖ Successfully ensured unique index exists for 'player_id'.")

        except Exception as e:
            logger.error(f"‚ùå Critical error during database sanitization: {e}", exc_info=True)
            # –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –∑–∞–ø—É—Å–∫, –∞–ª–µ –ª–æ–≥—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
        finally:
            await conn.close()

    await engine.dispose()
    logger.info("ü©∫ Database sanitization process finished.")


async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ—Ä—Å—ñ—é —Ç–∞ –æ–ø–∏—Å
    bot_version = "v3.3.0 (Resilience)"
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini {bot_version}... (PID: {os.getpid()})")

    # ‚ùóÔ∏è –í–∏–∫–æ–Ω—É—î–º–æ —Å–∞–Ω—ñ—Ç–∞—Ä–Ω—É –æ–±—Ä–æ–±–∫—É —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    await sanitize_database()
    await init_db()

    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await set_bot_commands(bot)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
    register_registration_handlers(dp)
    register_vision_handlers(dp, cmd_go_handler_func=cmd_go) 
    register_general_handlers(dp)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    @dp.errors()
    async def global_error_handler_wrapper(event: types.ErrorEvent):
        logger.debug(f"Global error wrapper caught exception: {event.exception} in update: {event.update}")
        await general_error_handler(event, bot)

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                
                # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –æ–ø–∏—Å –∑–º—ñ–Ω
                admin_message_lines = [
                    f"ü§ñ <b>MLBB IUI mini {bot_version} –∑–∞–ø—É—â–µ–Ω–æ!</b>",
                    "",
                    f"üÜî @{bot_info.username}",
                    f"‚è∞ {launch_time_kyiv}",
                    "‚ú® <b>–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</b>",
                    "  ‚Ä¢ –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ Cloudinary –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.",
                    "  ‚Ä¢ –ü—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–ø–µ—Ä –Ω–µ–≤—Ä–∞–∑–ª–∏–≤–∏–π –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—ñ–≤ Heroku.",
                    "üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                ]
                admin_message = "\n".join(admin_message_lines)
                
                await bot.send_message(str(ADMIN_USER_ID), admin_message, parse_mode=ParseMode.HTML)
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É (ID: {ADMIN_USER_ID}): {e}", exc_info=True)

        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt).")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        if bot and hasattr(bot, 'session') and bot.session and not bot.session.closed:
            try:
                await bot.session.close()
                logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ Bot –∑–∞–∫—Ä–∏—Ç–æ.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó HTTP –∫–ª—ñ—î–Ω—Ç–∞ Bot: {e}", exc_info=True)
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
