"""
main.py
–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—á–∞ –≤–µ—Ä—Å—ñ—è Telegram-–±–æ—Ç–∞ –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ aiogram 3.19+ —Ç–∞ Python 3.11+.
–°—Ç–≤–æ—Ä–µ–Ω–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–≤—ñ—Ç–æ–≤–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ —è–∫–æ—Å—Ç—ñ, —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó, PEP 8, –¥–æ–∫–ª–∞–¥–Ω–∏—Ö docstrings —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫.
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from typing import Any

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s]: %(message)s"
)
logger = logging.getLogger(__name__)

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ---
TELEGRAM_BOT_TOKEN: str | None = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in environment variables.")

__all__ = ["TELEGRAM_BOT_TOKEN"]

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot: Bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp: Dispatcher = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.
    :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await message.answer(
        "–í—ñ—Ç–∞—é! ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.\n"
        "–¶–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏.\n\n"
        "–°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ ‚Äî —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∂–µ –≥–æ—Ç–æ–≤–∞!"
    )


@dp.errors()
async def global_error_handler(update: Any, exception: Exception) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–Ω—è—Ç–∫—ñ–≤. –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º—É—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
    :param update: –û–Ω–æ–≤–ª–µ–Ω–Ω—è, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–æ –ø–æ–º–∏–ª–∫—É.
    :param exception: –í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫.
    """
    logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {exception}", exc_info=True)
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        await dp.start_polling(bot)
    except Exception as exc:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É polling: {exc}", exc_info=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (KeyboardInterrupt/SystemExit)")
