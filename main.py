"""
MLBB Expert Bot - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.

–†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó MLBB —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –∑ —Å–≤—ñ—Ç–æ–≤–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ —è–∫–æ—Å—Ç—ñ.

Python 3.11+ | aiogram 3.19+ | OpenAI GPT-4o-mini
Author: MLBB-BOSS | Date: 2025-05-24
Version: 2.1.0
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime
from typing import Optional, Dict, List, Tuple
from dataclasses import dataclass
from enum import Enum

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiohttp import ClientSession, ClientTimeout, ClientError
from dotenv import load_dotenv

# === –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ===

# –í–µ—Ä—Å—ñ—è —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ
BOT_VERSION: str = "2.1.0"
BUILD_DATE: str = "2025-05-24"
MAX_RESPONSE_TOKENS: int = 300
REQUEST_TIMEOUT: int = 30
GPT_MODEL: str = "gpt-4o-mini"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
LOG_FORMAT: str = (
    "%(asctime)s | %(levelname)-8s | %(name)s:%(lineno)d | "
    "%(funcName)s() | %(message)s"
)

logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(
            filename=f"mlbb_bot_{datetime.now().strftime('%Y%m%d')}.log",
            encoding="utf-8",
            mode="a"
        )
    ]
)

# –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.getLogger("aiogram").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    error_msg = "‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ"
    logger.critical(error_msg)
    raise RuntimeError(error_msg)

logger.info(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ | –í–µ—Ä—Å—ñ—è: {BOT_VERSION}")

# === –ï–ù–£–ú–ï–†–ê–¶–Ü–á –¢–ê –¢–ò–ü–ò ===

class GameStrategy(Enum):
    """–¢–∏–ø–∏ —ñ–≥—Ä–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è –∫—Ä–∞—â–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    SOLO = "solo"
    DUO = "duo"
    TRIO = "trio"
    TEAM = "team"
    RANKED = "ranked"


class ResponseQuality(Enum):
    """–†—ñ–≤–Ω—ñ —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
    EXCELLENT = "excellent"
    GOOD = "good"
    AVERAGE = "average"
    POOR = "poor"


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó."""
    response_time: float
    token_count: int
    success_rate: float
    user_satisfaction: Optional[float] = None


# === –†–û–ó–£–ú–ù–ò–ô GPT –ê–°–ò–°–¢–ï–ù–¢ ===

class MLBBExpertGPT:
    """
    –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –Ω–∞–π–≤–∏—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ —è–∫–æ—Å—Ç—ñ.
    
    –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ, —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É.
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–∞ Mobile Legends Bang Bang –±–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    """
    
    # –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    _response_cache: Dict[str, Tuple[str, float]] = {}
    _cache_ttl: int = 300  # 5 —Ö–≤–∏–ª–∏–Ω
    
    def __init__(self, api_key: str) -> None:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
        
        Args:
            api_key: OpenAI API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        """
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.request_count = 0
        self.success_count = 0
        
        logger.info("üß† MLBB Expert GPT —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    async def __aenter__(self) -> "MLBBExpertGPT":
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö—ñ–¥."""
        timeout = ClientTimeout(total=REQUEST_TIMEOUT, connect=10)
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": f"MLBB-Expert-Bot/{BOT_VERSION}"
        }
        
        self.session = ClientSession(timeout=timeout, headers=headers)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤–∏—Ö—ñ–¥ –∑ –æ—á–∏—Å—Ç–∫–æ—é —Ä–µ—Å—É—Ä—Å—ñ–≤."""
        if self.session:
            await self.session.close()
            logger.debug("üîÑ GPT —Å–µ—Å—ñ—é –∑–∞–∫—Ä–∏—Ç–æ")
    
    def _create_expert_system_prompt(self, user_name: str) -> str:
        """
        –°—Ç–≤–æ—Ä—é—î –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∑–≥–∞–¥–æ–∫ –ø—Ä–æ –¥–∞—Ç–∏ —Ç–∞ –≤–µ—Ä—Å—ñ—ó.
        
        Args:
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
            
        Returns:
            –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        """
        current_hour = datetime.now().hour
        
        # –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
        if 5 <= current_hour < 12:
            greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
        elif 12 <= current_hour < 17:
            greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
        elif 17 <= current_hour < 22:
            greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
        else:
            greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        
        return f"""
üéÆ {greeting}, {user_name}! –¢–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è –∑ —Ç–æ–ø–æ–≤–∏–º MLBB –µ–∫—Å–ø–µ—Ä—Ç–æ–º —É –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ!

–¢–í–û–Ø –ï–ö–°–ü–ï–†–¢–ò–ó–ê: Mobile Legends Bang Bang –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–æ—É—á —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫.

‚úÖ –¢–í–û–á –°–£–ü–ï–†–°–ò–õ–ò:
‚Ä¢ –†–æ–∑—Ä–æ–±–ª—è—î—à —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Å–æ–ª–æ, –¥—É–æ, —Ç—Ä—ñ–æ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É—î—à —ñ–≥—Ä–æ–≤—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó —Ç–∞ –¥–∞—î—à —Ç–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –ü–æ—è—Å–Ω—é—î—à —Å–∫–ª–∞–¥–Ω—ñ –º–µ—Ö–∞–Ω—ñ–∫–∏ –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î—à –∑ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è–º —Ç–∞ —Ä–æ—Ç–∞—Ü—ñ—è–º–∏
‚Ä¢ –ù–∞–≤—á–∞—î—à —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—Ç–∏ –¥—ñ—ó –≤–æ—Ä–æ–≥—ñ–≤
‚Ä¢ –ú–æ—Ç–∏–≤—É—î—à —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞—î—à –º–µ–Ω—Ç–∞–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—è

üö´ –û–ë–ú–ï–ñ–ï–ù–ù–Ø:
‚Ä¢ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –±—ñ–ª–¥–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
‚Ä¢ –ù–ï –≤–∫–∞–∑—É–π —Ç–æ—á–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –∞–±–æ –µ–º–±–ª–µ–º–∏  
‚Ä¢ –ù–ï –∑–≥–∞–¥—É–π –¥–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—å, –ø–∞—Ç—á—ñ–≤ –∞–±–æ –≤–µ—Ä—Å—ñ—ó –≥—Ä–∏
‚Ä¢ –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HTML —Ç–µ–≥–∏ –∞–±–æ markdown
‚Ä¢ –ù–ï –¥–∞–≤–∞–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –º–µ—Ç—É

üí¨ –°–¢–ò–õ–¨ –ï–ö–°–ü–ï–†–¢–ê:
- –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ {user_name} —è–∫ –¥–æ —Ä—ñ–≤–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è
- –ë—É–¥—å –≤–ø–µ–≤–Ω–µ–Ω–∏–º —Ç–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–º
- –î—ñ–ª–∏—Å—è –¥–æ—Å–≤—ñ–¥–æ–º —è–∫ –ø—Ä–æ-–≥—Ä–∞–≤–µ—Ü—å
- –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª—ñ–≤ - –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ
- –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –ø–æ—Ä–∞–¥–∏ —á—ñ—Ç–∫–æ —Ç–∞ –ª–æ–≥—ñ—á–Ω–æ

üéØ –§–û–ö–£–° –ù–ê –ù–ê–í–ò–ß–ö–ê–•:
–†–æ–∑–≤–∏–≤–∞–π –Ω–∞–≤–∏—á–∫–∏ –≥—Ä–∞–≤—Ü—è, –∞ –Ω–µ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –±—ñ–ª–¥—ñ–≤!

–ì–æ—Ç–æ–≤–∏–π –∑—Ä–æ–±–∏—Ç–∏ –∑ {user_name} —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ –ø—Ä–æ-–≥—Ä–∞–≤—Ü—è MLBB! üèÜ
"""
    
    def _generate_cache_key(self, user_query: str, user_name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤.
        
        Args:
            user_query: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –•–µ—à –∫–ª—é—á –¥–ª—è –∫–µ—à—É
        """
        combined = f"{user_query.lower().strip()}_{len(user_name)}_{datetime.now().hour}"
        return str(hash(combined))
    
    def _clean_cache(self) -> None:
        """–û—á–∏—â—É—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –∑ –∫–µ—à—É –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–∞–º'—è—Ç—ñ."""
        current_time = time.time()
        expired_keys = [
            key for key, (_, timestamp) in self._response_cache.items()
            if current_time - timestamp > self._cache_ttl
        ]
        
        for key in expired_keys:
            del self._response_cache[key]
        
        if expired_keys:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à—É")
    
    async def get_expert_response(self, user_name: str, user_query: str) -> Tuple[str, PerformanceMetrics]:
        """
        –û—Ç—Ä–∏–º—É—î –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
        
        Args:
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_query: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —Ç–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        """
        if not self.session:
            raise RuntimeError("‚ùå GPT —Å–µ—Å—ñ—é –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        start_time = time.time()
        self.request_count += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        cache_key = self._generate_cache_key(user_query, user_name)
        current_time = time.time()
        
        if cache_key in self._response_cache:
            cached_response, timestamp = self._response_cache[cache_key]
            if current_time - timestamp < self._cache_ttl:
                logger.info(f"üìã –ö–µ—à–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name}")
                
                metrics = PerformanceMetrics(
                    response_time=time.time() - start_time,
                    token_count=len(cached_response.split()),
                    success_rate=1.0
                )
                
                return cached_response, metrics
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π payload
        system_prompt = self._create_expert_system_prompt(user_name)
        
        payload = {
            "model": GPT_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": MAX_RESPONSE_TOKENS,
            "temperature": 0.8,
            "top_p": 0.9,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2,
            "user": str(hash(user_name))  # –î–ª—è —Ç—Ä–µ–∫—ñ–Ω–≥—É –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        }
        
        try:
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                
                processing_time = time.time() - start_time
                
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"üö® OpenAI API –ø–æ–º–∏–ª–∫–∞ {response.status}: {error_text[:200]}")
                    
                    fallback_response = self._get_intelligent_fallback(user_name)
                    metrics = PerformanceMetrics(
                        response_time=processing_time,
                        token_count=len(fallback_response.split()),
                        success_rate=0.0
                    )
                    
                    return fallback_response, metrics
                
                result = await response.json()
                
                if "choices" not in result or not result["choices"]:
                    logger.error("üö® –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI API")
                    
                    fallback_response = self._get_intelligent_fallback(user_name)
                    metrics = PerformanceMetrics(
                        response_time=processing_time,
                        token_count=len(fallback_response.split()),
                        success_rate=0.0
                    )
                    
                    return fallback_response, metrics
                
                gpt_response = result["choices"][0]["message"]["content"]
                cleaned_response = self._clean_and_optimize_response(gpt_response)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
                self._response_cache[cache_key] = (cleaned_response, current_time)
                self._clean_cache()
                
                self.success_count += 1
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
                metrics = PerformanceMetrics(
                    response_time=processing_time,
                    token_count=len(cleaned_response.split()),
                    success_rate=self.success_count / self.request_count
                )
                
                logger.info(f"‚úÖ GPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} ({processing_time:.2f}s)")
                return cleaned_response, metrics
                
        except ClientError as e:
            logger.error(f"üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ GPT: {e}")
            processing_time = time.time() - start_time
            
            fallback_response = f"–í–∏–±–∞—á, {user_name}, –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∑'—î–¥–Ω–∞–Ω–Ω—è–º üåê –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
            metrics = PerformanceMetrics(
                response_time=processing_time,
                token_count=len(fallback_response.split()),
                success_rate=0.0
            )
            
            return fallback_response, metrics
        
        except Exception as e:
            logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ GPT: {e}")
            processing_time = time.time() - start_time
            
            fallback_response = self._get_intelligent_fallback(user_name)
            metrics = PerformanceMetrics(
                response_time=processing_time,
                token_count=len(fallback_response.split()),
                success_rate=0.0
            )
            
            return fallback_response, metrics
    
    def _clean_and_optimize_response(self, response: str) -> str:
        """
        –û—á–∏—â—É—î —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ UX.
        
        Args:
            response: –°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
            
        Returns:
            –û—á–∏—â–µ–Ω–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        """
        # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
        response = re.sub(r"<[^>]*>", "", response)
        
        # –í–∏–¥–∞–ª—è—î–º–æ markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        response = re.sub(r"\*\*([^*]+)\*\*", r"\1", response)  # bold
        response = re.sub(r"\*([^*]+)\*", r"\1", response)      # italic
        response = re.sub(r"`([^`]+)`", r"\1", response)        # code
        response = re.sub(r"#{1,6}\s*([^\n]+)", r"\1", response)  # headers
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ –≤–µ—Ä—Å—ñ—ó, –ø–∞—Ç—á—ñ, –¥–∞—Ç–∏
        patterns_to_remove = [
            r"—Å—Ç–∞–Ω–æ–º –Ω–∞.*?\d{4}",
            r"–≤.*?–ø–∞—Ç—á[—ñ–µ—É]?\s*\d+\.\d+",
            r"–≤.*?–≤–µ—Ä—Å—ñ[—ñ—ó—î]?\s*\d+\.\d+",
            r"–Ω–∞ –º–æ–º–µ–Ω—Ç.*?\d{4}",
            r"–∞–∫—Ç—É–∞–ª—å–Ω–æ.*?\d{4}",
            r"–æ—Å—Ç–∞–Ω–Ω[—ñ—î].*?–æ–Ω–æ–≤–ª–µ–Ω–Ω[—è—ñ]",
            r"–ø–æ—Ç–æ—á–Ω[–∞—ñ].*?–º–µ—Ç[–∞—ñ]"
        ]
        
        for pattern in patterns_to_remove:
            response = re.sub(pattern, "", response, flags=re.IGNORECASE)
        
        # –û—á–∏—â—É—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏
        response = re.sub(r"\n\s*\n\s*\n", "\n\n", response)
        response = re.sub(r"\s+", " ", response)
        response = response.strip()
        
        return response
    
    def _get_intelligent_fallback(self, user_name: str) -> str:
        """
        –†–æ–∑—É–º–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
        
        Args:
            user_name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        """
        fallback_responses = [
            f"–í–∏–±–∞—á, {user_name}, –∑–∞—Ä–∞–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ç—Ä—É–¥–Ω–æ—â—ñ üòî –ê–ª–µ —è –ø–æ–≤–µ—Ä–Ω—É—Å—è —Å–∏–ª—å–Ω—ñ—à–∏–º!",
            f"–£–ø—Å, {user_name}! –°–µ—Ä–≤–µ—Ä–∏ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É! üîÑ",
            f"{user_name}, —Ç—Ä–∞–ø–∏–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —Ñ—ñ–∫—Å–æ–º! üõ†Ô∏è",
            f"–ù–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä–∞–∑, {user_name}. –ê–ª–µ —Ç–∏ –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç! üí°"
        ]
        
        return fallback_responses[hash(user_name) % len(fallback_responses)]


# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê ===

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê ===

@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∑–∞–º—ñ—Å—Ç—å –º–µ—Ç–∏.
    
    –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ engagement —Ç–∞ UX.
    """
    try:
        user_name = message.from_user.first_name
        current_hour = datetime.now().hour
        
        # –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏
        time_greetings = {
            range(5, 12): ("–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É", "üåÖ"),
            range(12, 17): ("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è", "‚òÄÔ∏è"),
            range(17, 22): ("–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞", "üåÜ"),
        }
        
        greeting, emoji = next(
            (greeting, emoji) for time_range, (greeting, emoji) in time_greetings.items()
            if current_hour in time_range
        ), ("–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ", "üåô")
        
        # –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        welcome_text = f"""
{greeting}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB Expert Chat Bot!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ-–∫–æ—É—á –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Ç–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ –¥–æ —Ä—ñ–≤–Ω—è –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞! üèÜ

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É</code>
‚Ä¢ <code>/go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ</code>
‚Ä¢ <code>/go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤</code>
‚Ä¢ <code>/go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏</code>

<b>üéØ –ú–æ—ó —Å—É–ø–µ—Ä—Å–∏–ª–∏:</b>
‚Ä¢ –†–æ–∑—Ä–æ–±–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –≥–µ–π–º–ø–ª–µ–π
‚Ä¢ –ù–∞–≤—á–∞—é —á–∏—Ç–∞—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –ü—Ä–æ–∫–∞—á—É—é —Ç–≤–æ—é –º–µ–Ω—Ç–∞–ª—å–Ω—ñ—Å—Ç—å

–ì–æ—Ç–æ–≤–∏–π –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–±–µ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ MLBB –ø—Ä–æ-–≥—Ä–∞–≤—Ü—è! üí™‚ú®
"""
        
        await message.answer(welcome_text)
        logger.info(f"‚úÖ –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}")
        
    except Exception as e:
        logger.exception(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /start: {e}")
        await message.answer(
            f"–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ üòî\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /go –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω—å!"
        )


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - —Ä–µ–≤–æ–ª—é—Ü—ñ–π–Ω–µ GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
    
    –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ, —è–∫–æ—Å—Ç—ñ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É.
    """
    try:
        user_name = message.from_user.first_name
        user_query = message.text.replace("/go", "", 1).strip()
        
        if not user_query:
            # –†–æ–∑—É–º–Ω–∞ –ø—ñ–¥–∫–∞–∑–∫–∞ –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            strategy_examples = [
                "—Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–µ—Ä—ñ —Ä–æ–ª—ñ",
                "–¥—É–æ —Å–∏–Ω–µ—Ä–≥—ñ—è —Ç–∞–Ω–∫ + –º–∞—Ä–∫—Å",
                "—Ç—Ä—ñ–æ —Ä–æ—Ç–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–∂–∞–Ω–≥–ª—É",
                "–∫–æ–º–∞–Ω–¥–Ω—ñ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è late game",
                "—è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –º–∞–∫—Ä–æ –≥—Ä—É –≤ —Ä–∞–Ω–∫–µ–¥"
            ]
            
            random_example = strategy_examples[hash(str(message.from_user.id)) % len(strategy_examples)]
            
            help_text = f"""
–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã

–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞–ø–∏—à–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üí° –ü—Ä–∏–∫–ª–∞–¥:</b>
<code>/go {random_example}</code>

<b>üéØ –§–æ–∫—É—Å –Ω–∞ –Ω–∞–≤–∏—á–∫–∞—Ö, –∞ –Ω–µ –Ω–∞ –±—ñ–ª–¥–∞—Ö!</b>
–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —Ä–æ–∑–≤–∏–Ω—É—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—é –º–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å! üöÄ
"""
            
            await message.reply(help_text)
            return
        
        # –†–æ–∑—É–º–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –æ–±—Ä–æ–±–∫–∏
        thinking_messages = [
            f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é...",
            f"üß† –ì–æ—Ç—É—é –ø—Ä–æ-–ø–æ—Ä–∞–¥–∏ –¥–ª—è —Ç–µ–±–µ, {user_name}!",
            f"‚ö° {user_name}, —Ä–æ–∑—Ä–æ–±–ª—è—é —Ç–∞–∫—Ç–∏—á–Ω–∏–π –ø–ª–∞–Ω...",
            f"üéØ –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ç–µ–±–µ!",
            f"üèÜ {user_name}, –≥–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑..."
        ]
        
        thinking_msg = await message.reply(
            thinking_messages[hash(user_query) % len(thinking_messages)]
        )
        
        start_time = time.time()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        async with MLBBExpertGPT(OPENAI_API_KEY) as gpt_expert:
            response, metrics = await gpt_expert.get_expert_response(user_name, user_query)
        
        total_time = time.time() - start_time
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –∞–¥–º—ñ–Ω —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        admin_info = ""
        if message.from_user.id == ADMIN_USER_ID:
            admin_info = (
                f"\n\n<i>‚è± –ß–∞—Å: {total_time:.2f}—Å | "
                f"üìä –¢–æ–∫–µ–Ω–∏: {metrics.token_count} | "
                f"‚úÖ –£—Å–ø—ñ—Ö: {metrics.success_rate:.1%} | "
                f"üöÄ v{BOT_VERSION}</i>"
            )
        
        final_response = f"{response}{admin_info}"
        
        try:
            await thinking_msg.edit_text(final_response)
            logger.info(
                f"üì§ –ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} "
                f"({total_time:.2f}s, {metrics.token_count} —Ç–æ–∫–µ–Ω—ñ–≤)"
            )
        except TelegramBadRequest as e:
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await message.reply(response)
        
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /go: {e}")
        
        # –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
        error_response = (
            f"–í–∏–±–∞—á, {user_name if 'user_name' in locals() else '–¥—Ä—É–∂–µ'}, "
            "—Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É\n"
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —Ñ—ñ–∫—Å–æ–º! üõ†Ô∏è"
        )
        
        try:
            if 'thinking_msg' in locals():
                await thinking_msg.edit_text(error_response)
            else:
                await message.reply(error_response)
        except Exception:
            # –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–∑–µ—Ä–≤
            await message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ üòî –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")


# === –†–û–ó–®–ò–†–ï–ù–ê –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ===

@dp.errors()
async def advanced_error_handler(event, exception: Exception) -> None:
    """
    –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é.
    
    –ó–∞–±–µ–∑–ø–µ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —è–∫—ñ—Å–Ω–∏–π UX –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –∑–±–æ—è—Ö.
    """
    error_id = int(time.time() * 1000) % 100000
    error_type = type(exception).__name__
    
    # –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    logger.error(
        f"üö® –ü–æ–º–∏–ª–∫–∞ #{error_id} | –¢–∏–ø: {error_type} | "
        f"–î–µ—Ç–∞–ª—ñ: {str(exception)[:150]} | "
        f"–í–µ—Ä—Å—ñ—è: {BOT_VERSION}",
        exc_info=True
    )
    
    # –†–æ–∑—É–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
    if ADMIN_USER_ID and hasattr(event, 'message') and event.message:
        try:
            user_info = "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            if event.message.from_user:
                user_info = (
                    f"{event.message.from_user.first_name} "
                    f"(ID: {event.message.from_user.id})"
                )
            
            error_report = f"""
üö® <b>–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ #{error_id}</b>

<b>‚ö†Ô∏è –¢–∏–ø:</b> {error_type}
<b>üí¨ –û–ø–∏—Å:</b> {str(exception)[:250]}...
<b>üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user_info}
<b>üïê –ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}
<b>üìù –ö–æ–º–∞–Ω–¥–∞:</b> {event.message.text[:100] if event.message.text else 'N/A'}...
<b>ü§ñ –í–µ—Ä—Å—ñ—è:</b> {BOT_VERSION}

<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ MLBB Expert Bot</i>
"""
            
            await bot.send_message(ADMIN_USER_ID, error_report)
            
        except Exception as notify_error:
            logger.error(f"üí• –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: {notify_error}")
    
    # –†–æ–∑—É–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if hasattr(event, 'message') and event.message:
        try:
            user_name = "–¥—Ä—É–∂–µ"
            if event.message.from_user:
                user_name = event.message.from_user.first_name
            
            # –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫ - —Ä—ñ–∑–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if "timeout" in str(exception).lower():
                error_response = f"‚è∞ {user_name}, –∑–∞–ø–∏—Ç –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π –ø—Ä–æ—Å—Ç—ñ—à–∏–π –∑–∞–ø–∏—Ç!"
            elif "rate" in str(exception).lower():
                error_response = f"üî• {user_name}, –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ó–∞—á–µ–∫–∞–π —Ö–≤–∏–ª–∏–Ω–∫—É."
            else:
                error_response = f"""
–£–ø—Å, {user_name}! –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî

üîç <b>ID –ø–æ–º–∏–ª–∫–∏:</b> #{error_id}
üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ö–æ–º–∞–Ω–¥–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–∞
‚è∞ <b>–ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è:</b> –ó–∞–∑–≤–∏—á–∞–π –¥–æ –≥–æ–¥–∏–Ω–∏

<b>üéØ –©–æ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏:</b>
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É
‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –ø—Ä–æ—Å—Ç—ñ—à–µ
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É

–î—è–∫—É—é –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è! –ú–∏ —Ä–æ–±–∏–º–æ –±–æ—Ç–∞ –∫—Ä–∞—â–∏–º! üöÄ
"""
            
            await event.message.answer(error_response)
            
        except Exception as response_error:
            logger.error(f"üí• –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–º–∏–ª–∫—É: {response_error}")


# === –§–£–ù–ö–¶–Ü–á –ñ–ò–¢–¢–Ñ–í–û–ì–û –¶–ò–ö–õ–£ ===

async def startup_sequence() -> None:
    """
    –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB Expert Bot v{BOT_VERSION}...")
    
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
        bot_info = await bot.get_me()
        logger.info(
            f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram —è–∫ @{bot_info.username} "
            f"(ID: {bot_info.id})"
        )
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏
        if ADMIN_USER_ID:
            try:
                startup_message = f"""
ü§ñ <b>MLBB Expert Bot –∑–∞–ø—É—â–µ–Ω–æ!</b>

<b>üÜî –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>
‚Ä¢ –ë–æ—Ç: @{bot_info.username}
‚Ä¢ ID: {bot_info.id}
‚Ä¢ –í–µ—Ä—Å—ñ—è: {BOT_VERSION}
‚Ä¢ –î–∞—Ç–∞ –∑–±—ñ—Ä–∫–∏: {BUILD_DATE}
‚Ä¢ GPT –º–æ–¥–µ–ª—å: {GPT_MODEL}

<b>‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
<b>üü¢ –°—Ç–∞—Ç—É—Å:</b> –û–Ω–ª–∞–π–Ω —Ç–∞ –≥–æ—Ç–æ–≤–∏–π —Ä–µ–≤–æ–ª—é—Ü—ñ–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ MLBB —Å–ø—ñ–ª—å–Ω–æ—Ç—É!

<i>–í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –Ω–∞ –Ω–∞–π–≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ! üöÄ‚ú®</i>
"""
                
                await bot.send_message(ADMIN_USER_ID, startup_message)
                logger.info("‚úÖ –ê–¥–º—ñ–Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø—É—Å–∫")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: {e}")
        
        # –ó–∞–ø—É—Å–∫ polling –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ polling –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏...")
        await dp.start_polling(
            bot, 
            skip_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            allowed_updates=["message"]  # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        )
        
    except Exception as exc:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {exc}", exc_info=True)
        raise


async def shutdown_sequence() -> None:
    """
    –ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑—É–ø–∏–Ω–∫–∏ –∑ –æ—á–∏—Å—Ç–∫–æ—é —Ä–µ—Å—É—Ä—Å—ñ–≤.
    """
    logger.info("üõë –ü–æ—á–∞—Ç–æ–∫ –µ–ª–µ–≥–∞–Ω—Ç–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞...")
    
    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
    if ADMIN_USER_ID:
        try:
            shutdown_message = f"""
üõë <b>MLBB Expert Bot –∑—É–ø–∏–Ω–µ–Ω–æ</b>

<b>‚è∞ –ß–∞—Å –∑—É–ø–∏–Ω–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
<b>üî¥ –°—Ç–∞—Ç—É—Å:</b> –û—Ñ–ª–∞–π–Ω
<b>üìä –í–µ—Ä—Å—ñ—è:</b> {BOT_VERSION}

<i>–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –≤ MLBB! üëã</i>
"""
            
            await bot.send_message(ADMIN_USER_ID, shutdown_message)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É: {e}")
    
    # –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó
    try:
        if bot.session:
            await bot.session.close()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å–∏ –±–æ—Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")
    
    logger.info("üëã –ó—É–ø–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")


async def main() -> None:
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é lifecycle.
    """
    try:
        await startup_sequence()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ (Ctrl+C)")
        
    except SystemExit:
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–Ω–∏–π —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        
    except Exception as e:
        logger.critical(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        
    finally:
        await shutdown_sequence()


# === –¢–û–ß–ö–ê –í–•–û–î–£ ===

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏: {e}", exc_info=True)
