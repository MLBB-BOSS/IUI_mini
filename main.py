"""
–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è Telegram-–±–æ—Ç–∞ –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏.
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è GPT –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.
Python 3.11+ | aiogram 3.19+ | OpenAI API
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional, Union
from dataclasses import dataclass, field

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, User, Chat, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# --- Enhanced Logging Configuration ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s:%(lineno)d | %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("mlbb_bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# --- Environment Variables ---
load_dotenv()

TELEGRAM_BOT_TOKEN: str | None = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str | None = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

# Validation
for var_name, var_value in [
    ("TELEGRAM_BOT_TOKEN", TELEGRAM_BOT_TOKEN),
    ("OPENAI_API_KEY", OPENAI_API_KEY)
]:
    if not var_value:
        logger.error(f"{var_name} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ environment variables!")
        raise RuntimeError(f"{var_name} is required.")

__all__ = ["TELEGRAM_BOT_TOKEN", "OPENAI_API_KEY", "ADMIN_USER_ID"]


@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
    user_id: int
    first_name: str
    username: Optional[str] = None
    last_name: Optional[str] = None
    language_code: Optional[str] = "uk"
    is_premium: bool = False
    join_date: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    message_count: int = 0
    favorite_heroes: List[str] = field(default_factory=list)
    mlbb_rank: Optional[str] = None


@dataclass
class ChatContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è GPT."""
    chat_id: int
    chat_type: str
    title: Optional[str] = None
    member_count: int = 0
    last_activity: datetime = field(default_factory=lambda: datetime.now(timezone.utc))


class MLBBDatabase:
    """–ü—Ä–æ—Å—Ç–∏–π in-memory storage –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    
    def __init__(self) -> None:
        self.users: Dict[int, UserProfile] = {}
        self.chats: Dict[int, ChatContext] = {}
        logger.info("üìä MLBB Database —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def get_or_create_user(self, user: User) -> UserProfile:
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        if user.id not in self.users:
            self.users[user.id] = UserProfile(
                user_id=user.id,
                first_name=user.first_name,
                username=user.username,
                last_name=user.last_name,
                language_code=user.language_code,
                is_premium=user.is_premium or False
            )
            logger.info(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user.first_name}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ
        profile = self.users[user.id]
        profile.first_name = user.first_name
        profile.username = user.username
        profile.last_name = user.last_name
        profile.message_count += 1
        
        return profile
    
    def get_or_create_chat(self, chat: Chat) -> ChatContext:
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É."""
        if chat.id not in self.chats:
            self.chats[chat.id] = ChatContext(
                chat_id=chat.id,
                chat_type=chat.type,
                title=chat.title
            )
            logger.info(f"üí¨ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç—É: {chat.title or chat.id}")
        
        context = self.chats[chat.id]
        context.last_activity = datetime.now(timezone.utc)
        return context


class MLBBAssistant:
    """–†–æ–∑—É–º–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""
    
    MLBB_HEROES = [
        "Alucard", "Miya", "Saber", "Alice", "Nana", "Tigreal", "Akai", "Franco",
        "Bane", "Bruno", "Clint", "Rafaela", "Eudora", "Zilong", "Fanny", "Layla",
        "Minotaur", "Lolita", "Hayabusa", "Freya", "Gord", "Natalia", "Kagura",
        "Chou", "Sun", "Alpha", "Ruby", "Yi Sun-shin", "Moskov", "Johnson", "Cyclops",
        "Estes", "Hilda", "Aurora", "Lapu-Lapu", "Vexana", "Roger", "Karrie", "Gatotkaca",
        "Harley", "Irithel", "Grock", "Argus", "Odette", "Lancelot", "Diggie", "Hylos",
        "Zhask", "Helcurt", "Pharsa", "Lesley", "Angela", "Gusion", "Valir", "Martis",
        "Uranus", "Hanabi", "Chang'e", "Kaja", "Selena", "Aldous", "Claude", "Vale",
        "Leomord", "Lunox", "Belerick", "Kimmy", "Harith", "Minsitthar", "Kadita",
        "Faramis", "Badang", "Khufra", "Granger", "Guinevere", "Esmeralda", "Terizla",
        "X.Borg", "Ling", "Wan Wan", "Silvanna", "Cecilion", "Carmilla", "Atlas",
        "Popol and Kupa", "Luo Yi", "Yu Zhong", "Mathilda", "Paquito", "Gloo", "Yve",
        "Benedetta", "Brody", "Phoveus", "Natan", "Aulus", "Floryn", "Valentina",
        "Aamon", "Edith", "Yin", "Melissa", "Xavier", "Julian", "Novaria", "Joy"
    ]
    
    RANKS = [
        "Warrior", "Elite", "Master", "Grandmaster", "Epic", 
        "Legend", "Mythic", "Mythical Glory", "Mythical Immortal"
    ]
    
    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        logger.info("ü§ñ MLBB Assistant —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    async def __aenter__(self):
        """Async context manager entry."""
        self.session = ClientSession(
            timeout=ClientTimeout(total=30, connect=10),
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        if self.session:
            await self.session.close()
    
    def _create_personalized_context(
        self, 
        user_profile: UserProfile, 
        chat_context: ChatContext
    ) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT."""
        full_name = f"{user_profile.first_name}"
        if user_profile.last_name:
            full_name += f" {user_profile.last_name}"
        
        username_info = f" (@{user_profile.username})" if user_profile.username else ""
        premium_status = " üëë Premium" if user_profile.is_premium else ""
        
        context_parts = [
            f"üéÆ –¢–∏ —Ä–æ–∑–º–æ–≤–ª—è—î—à –∑ {full_name}{username_info}{premium_status}",
            f"üì± –¶–µ {chat_context.chat_type} —á–∞—Ç MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏",
            f"üí¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ {user_profile.message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
            "üèÜ Mobile Legends: Bang Bang - —Ç–≤–æ—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è"
        ]
        
        if chat_context.title:
            context_parts.append(f"üí≠ –ù–∞–∑–≤–∞ —á–∞—Ç—É: {chat_context.title}")
        
        if user_profile.mlbb_rank:
            context_parts.append(f"üèÖ –†–∞–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_profile.mlbb_rank}")
        
        if user_profile.favorite_heroes:
            heroes_list = ", ".join(user_profile.favorite_heroes[:3])
            context_parts.append(f"‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó: {heroes_list}")
        
        return "\n".join(context_parts)
    
    async def get_smart_response(
        self, 
        user_query: str, 
        user_profile: UserProfile, 
        chat_context: ChatContext
    ) -> str:
        """–û—Ç—Ä–∏–º—É—î —Ä–æ–∑—É–º–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""
        if not self.session:
            raise RuntimeError("Session –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        personalized_context = self._create_personalized_context(user_profile, chat_context)
        
        system_prompt = f"""
{personalized_context}

–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Mobile Legends: Bang Bang –∑ –¥—Ä—É–∂–Ω—ñ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–¢–í–û–á –ü–†–ò–ù–¶–ò–ü–ò:
‚úÖ –ó–∞–≤–∂–¥–∏ –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —ñ–º'—è
‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
‚úÖ –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –ø–æ MLBB
‚úÖ –ë—É–¥—å –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∏—á–Ω–∏–º —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º
‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—É—á–∞—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Å–ª–µ–Ω–≥ –≥–µ–π–º–µ—Ä—ñ–≤
‚úÖ –ü—Ä–æ–ø–æ–Ω—É–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –±—ñ–ª–¥–∏ –≥–µ—Ä–æ—ó–≤, —Ç–∞–∫—Ç–∏–∫–∏

–ó–ê–ë–û–†–û–ù–ï–ù–û:
‚ùå HTML —Ç–µ–≥–∏ –∞–±–æ markdown
‚ùå –î–æ–≤–≥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º–∞–∫—Å–∏–º—É–º 300 —Å–ª—ñ–≤)
‚ùå –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ MLBB

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç–∞–∫, –Ω—ñ–±–∏ —Ç–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç—ñ–º–º–µ–π—Ç –ø–æ MLBB!
"""
        
        payload = {
            "model": "gpt-4o-mini",  # –ë—ñ–ª—å—à –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 400,
            "temperature": 0.8,
            "presence_penalty": 0.3,
            "frequency_penalty": 0.2
        }
        
        try:
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ {response.status}: {error_text}")
                    return f"–í–∏–±–∞—á, {user_profile.first_name}, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ üòî"
                
                result = await response.json()
                gpt_response = result["choices"][0]["message"]["content"]
                
                # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö —Ç–µ–≥—ñ–≤
                clean_response = re.sub(r"<[^>]*>", "", gpt_response)
                clean_response = re.sub(r"\*\*([^*]+)\*\*", r"\1", clean_response)  # markdown bold
                clean_response = re.sub(r"\*([^*]+)\*", r"\1", clean_response)      # markdown italic
                
                return clean_response.strip()
                
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ GPT –∑–∞–ø–∏—Ç—É: {e}")
            return f"–ü—Ä–æ–±–∞—á, {user_profile.first_name}, –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç üòï"


# --- Bot Initialization ---
bot: Bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp: Dispatcher = Dispatcher()
db: MLBBDatabase = MLBBDatabase()


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""
    user_profile = db.get_or_create_user(message.from_user)
    chat_context = db.get_or_create_chat(message.chat)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –¥–æ–±–∏ –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    current_hour = datetime.now().hour
    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
    elif 17 <= current_hour < 22:
        greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
    else:
        greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    name = user_profile.first_name
    premium_icon = " üëë" if user_profile.is_premium else ""
    
    welcome_text = f"""
{greeting}, <b>{name}</b>{premium_icon}! üéÆ

üî• –í—ñ—Ç–∞—é –≤ MLBB Assistant Bot - —Ç–≤–æ—î–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–º—ñ—á–Ω–∏–∫—É –ø–æ Mobile Legends!

<b>üöÄ –©–æ —è –≤–º—ñ—é:</b>
‚Ä¢ üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ –∑–∞–ø–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /go
‚Ä¢ üèÜ –î–æ–ø–æ–º–∞–≥–∞—é –∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏ —Ç–∞ –±—ñ–ª–¥–∞–º–∏
‚Ä¢ üìä –ê–Ω–∞–ª—ñ–∑—É—é –º–µ—Ç—É —Ç–∞ –≥–µ—Ä—ñ–≤
‚Ä¢ üéØ –î–∞—é –ø–æ—Ä–∞–¥–∏ –ø–æ —Ä–∞–Ω–∫–æ–≤–∏—Ö –º–∞—Ç—á–∞—Ö

<b>üé™ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
‚Ä¢ /heroes - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤
‚Ä¢ /ranks - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥—ñ–≤
‚Ä¢ /tips - –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ /stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<i>–ì–æ—Ç–æ–≤–∏–π –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏? –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /go —Ç–∞ –∑–∞–¥–∞–π —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è! üí™</i>
"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üèÜ –ì–µ—Ä–æ—ó", callback_data="show_heroes"),
            InlineKeyboardButton(text="üìä –†–∞–Ω–≥–∏", callback_data="show_ranks")
        ],
        [
            InlineKeyboardButton(text="üí° –ü–æ—Ä–∞–¥–∏", callback_data="show_tips"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
        ]
    ])
    
    try:
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {name} (ID: {user_profile.user_id})")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ GPT –∑–∞–ø–∏—Ç—ñ–≤ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""
    user_profile = db.get_or_create_user(message.from_user)
    chat_context = db.get_or_create_chat(message.chat)
    
    user_query = message.text.replace("/go", "", 1).strip()
    
    if not user_query:
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, {user_profile.first_name}! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go\n\n"
            "<i>–ü—Ä–∏–∫–ª–∞–¥: /go —è–∫ –≥—Ä–∞—Ç–∏ –∑–∞ Ling?</i>"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –±–æ—Ç –¥—É–º–∞—î
    thinking_msg = await message.reply(
        f"ü§î {user_profile.first_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç...\n"
        "‚ö° GPT –≥–æ—Ç—É—î –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!"
    )
    
    start_time = time.time()
    
    async with MLBBAssistant(OPENAI_API_KEY) as assistant:
        response = await assistant.get_smart_response(
            user_query, user_profile, chat_context
        )
    
    processing_time = time.time() - start_time
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    footer = ""
    if message.from_user.id == ADMIN_USER_ID:
        footer = f"\n\n<i>‚è± –û–±—Ä–æ–±–∫–∞: {processing_time:.2f}—Å</i>"
    
    try:
        await thinking_msg.edit_text(f"{response}{footer}")
        logger.info(f"üì§ GPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_profile.first_name}")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.reply(response)


@dp.message(Command("heroes"))
async def cmd_heroes(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ MLBB."""
    user_profile = db.get_or_create_user(message.from_user)
    
    heroes_text = f"üèÜ <b>–ì–µ—Ä–æ—ó Mobile Legends, {user_profile.first_name}!</b>\n\n"
    
    # –ì—Ä—É–ø—É—î–º–æ –≥–µ—Ä–æ—ó–≤ –ø–æ —Ä–æ–ª—è—Ö (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
    heroes_by_role = {
        "üó° Assassin": ["Alucard", "Saber", "Natalia", "Hayabusa", "Fanny", "Lancelot", "Gusion", "Selena", "Helcurt", "Leomord", "Ling", "Benedetta", "Aamon", "Yin"],
        "üèπ Marksman": ["Miya", "Bruno", "Clint", "Layla", "Moskov", "Karrie", "Irithel", "Lesley", "Hanabi", "Claude", "Granger", "Wan Wan", "Brody", "Natan", "Melissa"],
        "‚öîÔ∏è Fighter": ["Tigreal", "Akai", "Freya", "Chou", "Sun", "Alpha", "Ruby", "Lapu-Lapu", "Roger", "Argus", "Martis", "Aldous", "Leomord", "Terizla", "X.Borg", "Silvanna", "Yu Zhong", "Paquito", "Aulus", "Phoveus", "Edith", "Julian"],
        "üõ° Tank": ["Franco", "Minotaur", "Lolita", "Johnson", "Gatotkaca", "Grock", "Hylos", "Uranus", "Belerick", "Khufra", "Atlas", "Baxia"],
        "üîÆ Mage": ["Alice", "Nana", "Eudora", "Gord", "Kagura", "Cyclops", "Aurora", "Vexana", "Harley", "Pharsa", "Valir", "Chang'e", "Lunox", "Kimmy", "Harith", "Kadita", "Zhask", "Luo Yi", "Yve", "Valentina", "Xavier", "Novaria"],
        "üíö Support": ["Rafaela", "Estes", "Diggie", "Angela", "Kaja", "Faramis", "Carmilla", "Mathilda", "Floryn", "Joy"]
    }
    
    for role, heroes in heroes_by_role.items():
        heroes_text += f"<b>{role}:</b>\n"
        heroes_text += ", ".join(heroes[:8])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 8 –≥–µ—Ä–æ—ó–≤ –∫–æ–∂–Ω–æ—ó —Ä–æ–ª—ñ
        if len(heroes) > 8:
            heroes_text += f" <i>—Ç–∞ —â–µ {len(heroes) - 8}...</i>"
        heroes_text += "\n\n"
    
    heroes_text += "<i>üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /go [—ñ–º'—è –≥–µ—Ä–æ—è], —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ!</i>"
    
    await message.answer(heroes_text)


@dp.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_profile = db.get_or_create_user(message.from_user)
    
    days_since_join = (datetime.now(timezone.utc) - user_profile.join_date).days
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_profile.first_name}</b>

üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>
‚Ä¢ ID: <code>{user_profile.user_id}</code>
‚Ä¢ –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {days_since_join} –¥–Ω—ñ–≤ —Ç–æ–º—É
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {user_profile.message_count}
‚Ä¢ Premium: {"‚úÖ" if user_profile.is_premium else "‚ùå"}

üéÆ <b>MLBB –î–∞–Ω—ñ:</b>
‚Ä¢ –†–∞–Ω–≥: {user_profile.mlbb_rank or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
‚Ä¢ –£–ª—é–±–ª–µ–Ω—ñ –≥–µ—Ä–æ—ó: {len(user_profile.favorite_heroes)}

üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å/–¥–µ–Ω—å: {user_profile.message_count / max(days_since_join, 1):.1f}
"""
    
    await message.answer(stats_text)


@dp.message(F.text.contains("—Ä–∞–Ω–≥") | F.text.contains("rank"))
async def handle_rank_mention(message: Message) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–≥—É—î –Ω–∞ –∑–≥–∞–¥–∫–∏ —Ä–∞–Ω–≥—É."""
    user_profile = db.get_or_create_user(message.from_user)
    
    # –®—É–∫–∞—î–º–æ —Ä–∞–Ω–≥ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    text_lower = message.text.lower()
    found_rank = None
    
    for rank in MLBBAssistant.RANKS:
        if rank.lower() in text_lower:
            found_rank = rank
            break
    
    if found_rank and not user_profile.mlbb_rank:
        user_profile.mlbb_rank = found_rank
        await message.reply(
            f"üèÖ –ö—Ä—É—Ç–æ, {user_profile.first_name}! "
            f"–ó–∞–ø–∞–º'—è—Ç–∞–≤ —â–æ —Ç–∏ {found_rank}! üí™"
        )


@dp.errors()
async def global_error_handler(event: Any, exception: Exception) -> Any:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    error_id = int(time.time())
    logger.error(
        f"üö® –ü–æ–º–∏–ª–∫–∞ #{error_id}: {type(exception).__name__}: {exception}",
        exc_info=True
    )
    
    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    if ADMIN_USER_ID and hasattr(event, 'message'):
        try:
            await bot.send_message(
                ADMIN_USER_ID,
                f"üö® <b>–ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ #{error_id}</b>\n\n"
                f"<b>–¢–∏–ø:</b> {type(exception).__name__}\n"
                f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {str(exception)[:500]}\n"
                f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {event.message.from_user.first_name if event.message else 'Unknown'}"
            )
        except Exception as notify_error:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: {notify_error}")


async def startup_sequence() -> None:
    """–ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MLBB Bot...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —è–∫ @{bot_info.username}")
        
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫
        if ADMIN_USER_ID:
            try:
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB Bot –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n"
                    f"üÜî –ë–æ—Ç: @{bot_info.username}\n"
                    f"üü¢ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫: {e}")
        
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as exc:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {exc}", exc_info=True)
        raise


async def shutdown_sequence() -> None:
    """–ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞."""
    logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ MLBB Bot...")
    
    if ADMIN_USER_ID:
        try:
            await bot.send_message(
                ADMIN_USER_ID,
                f"üõë <b>MLBB Bot –∑—É–ø–∏–Ω–µ–Ω–æ</b>\n\n"
                f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n"
                f"üî¥ –°—Ç–∞—Ç—É—Å: –û—Ñ–ª–∞–π–Ω"
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É: {e}")
    
    await bot.session.close()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É."""
    try:
        await startup_sequence()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C)")
    except SystemExit:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é")
    except Exception as e:
        logger.critical(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    finally:
        await shutdown_sequence()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
