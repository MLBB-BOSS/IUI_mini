"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4.1
Author: MLBB-BOSS | Date: 2025-05-26
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s" # –î–æ–¥–∞–Ω–æ %(name)s –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")


class MLBBChatGPT:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é—Ç—å—Å—è, –æ—Ñ–æ—Ä–º–ª—é—é—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤ Telegram.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}") # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –ª–æ–≥–µ—Ä –¥–ª—è –∫–ª–∞—Å—É

    async def __aenter__(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é —Ç—É—Ç, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ —Å–≤—ñ–∂–æ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É `async with`
        self.session = ClientSession(
            timeout=ClientTimeout(total=45), # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.logger.debug("ClientSession —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
            self.logger.debug("ClientSession –∑–∞–∫—Ä–∏—Ç–æ")
        if exc_type:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ MLBBChatGPT: {exc_type} {exc_val}")

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """
        üöÄ –†–ï–í–û–õ–Æ–¶–Ü–ô–ù–ò–ô –ü–†–û–ú–ü–¢ v2.1 - –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≥–µ—Ä–æ—è—Ö —Ç–∞ –∫–æ–º–±–æ!
        """
        kyiv_tz = timezone(timedelta(hours=3))
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour

        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.1 üéÆ

## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, –Ω–∞–π–∫—Ä–∞—â–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang –≤ –£–∫—Ä–∞—ó–Ω—ñ –∑ 7+ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É.
–¢–≤–æ—è –º—ñ—Å—ñ—è: –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ì–µ–Ω–µ—Ä—É–π –¢–Ü–õ–¨–ö–ò –í–ê–õ–Ü–î–ù–ò–ô HTML. –ö–æ–∂–µ–Ω —Ç–µ–≥ <b> –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π </b>.

## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML, —Ç–æ–º—É –í–°–Ü —Ç–µ–≥–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä–∏—Ç—ñ)
- –ú–æ–≤–∞: –≤–∏–∫–ª—é—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

### üéØ –û–ë–û–í'–Ø–ó–ö–û–í–ê –°–¢–†–£–ö–¢–£–†–ê:
1. **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2. **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è. 
   - –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π, —Ä–æ–ª–µ–π, –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤ –∞–±–æ –≥—Ä–∏ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ª—ñ–Ω—ñ—ó, –û–ë–û–í'–Ø–ó–ö–û–í–û –Ω–∞–≤–µ–¥–∏ 2-3 –ø—Ä–∏–∫–ª–∞–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ü¶∏‚Äç‚ôÇÔ∏è <b>–Æ –ß–∂—É–Ω</b>, ü¶∏‚Äç‚ôÄÔ∏è <b>–ï—Å–º–µ—Ä–∞–ª—å–¥–∞</b>). 
   - –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Å–∞–º–µ —Ü—ñ –≥–µ—Ä–æ—ó –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó.
   - –ó–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó.
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: —â–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑.
4. **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ø—ñ–¥–±–∞–¥—å–æ—Ä–µ–Ω–Ω—è –¥–æ –¥—ñ–π.

### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>. –ó–ê–í–ñ–î–ò –ó–ê–ö–†–ò–í–ê–ô –¢–ï–ì–ò.
- –°–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ "‚Ä¢" (–∑ –ø—Ä–æ–±—ñ–ª–æ–º –ø—ñ—Å–ª—è).
- –ú–∞–∫—Å–∏–º—É–º 250-300 —Å–ª—ñ–≤.
- –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ (ü¶∏‚Äç‚ôÇÔ∏è, üí°, ü§ù).

### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
- **–ì–µ—Ä–æ—ó**: –º–µ—Ö–∞–Ω—ñ–∫–∏, —Ä–æ–ª—ñ, –∫–æ–Ω—Ç—Ä–ø—ñ–∫–∏, –º–µ—Ç–∞. –ó–ê–í–ñ–î–ò –ø—Ä–æ–ø–æ–Ω—É–π –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–µ—Ä–æ—ó–≤.
- **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –ª–µ–π–Ω-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –æ–±'—î–∫—Ç–∏, —Ç—ñ–º—Ñ–∞–π—Ç–∏.
- **–†–∞–Ω–∫—ñ–Ω–≥**: —Ç–∞–∫—Ç–∏–∫–∏, –∞–¥–∞–ø—Ç–∞—Ü—ñ—è.
- **–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, —Ç—ñ–ª—å—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å.
- **–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ç—á**: –≤—Ä–∞—Ö–æ–≤—É–π —Ç—Ä–µ–Ω–¥–∏.

### ‚ùå –ó–ê–ë–û–†–û–ù–ï–ù–û:
- Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
- –ù–ï–ó–ê–ö–†–ò–¢–Ü HTML –¢–ï–ì–ò (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `<b>—Ç–µ–∫—Å—Ç` –±–µ–∑ `</b>`). –¶–µ —Å–ø—Ä–∏—á–∏–Ω—è—î –ø–æ–º–∏–ª–∫–∏.
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –±—ñ–ª–¥–∏ (–ø—Ä–µ–¥–º–µ—Ç–∏/–µ–º–±–ª–µ–º–∏).
- –î–æ–≤–≥—ñ —Å—É—Ü—ñ–ª—å–Ω—ñ —Ç–µ–∫—Å—Ç–∏.
- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.

### üß† –ü–†–ò–ù–¶–ò–ü–ò –ú–ò–°–õ–ï–ù–ù–Ø:
1. **–ê–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç**.
2. **–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≥–µ—Ä–æ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏.
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ—Å—Ç—å**.
4. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å**.
5. **–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å**.
6. **–í–ê–õ–Ü–î–ù–ò–ô HTML**: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—Å—ñ —Ç–µ–≥–∏ <b>, <i>, <code> –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä–∏—Ç—ñ.

## –ü–†–ò–ö–õ–ê–î –Ü–î–ï–ê–õ–¨–ù–û–á –í–Ü–î–ü–û–í–Ü–î–Ü (–Ω–∞ –∑–∞–ø–∏—Ç "—è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó"):
"{greeting}, {user_name}! üëã

–ì—Ä–∞ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó ‚Äì —Ü–µ —Ç–≤—ñ–π —à–∞–Ω—Å —Å—Ç–∞—Ç–∏ –æ–ø–æ—Ä–æ—é –∫–æ–º–∞–Ω–¥–∏! üõ°Ô∏è

ü¶∏‚Äç‚ôÇÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≥–µ—Ä–æ—ó –¥–ª—è –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó:</b>
‚Ä¢ <b>–Æ –ß–∂—É–Ω:</b> –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π –≤ 1–Ω–∞1. <i>–Ü–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è –∞–≥—Ä–µ—Å—ñ—ó.</i>
‚Ä¢ <b>–ï—Å–º–µ—Ä–∞–ª—å–¥–∞:</b> –ù–µ–π–º–æ–≤—ñ—Ä–Ω–∞ –≤–∏–∂–∏–≤–∞–Ω—ñ—Å—Ç—å. <i>–ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä –ø—Ä–æ—Ç–∏ —â–∏—Ç—ñ–≤.</i>

üí° <b>–ö–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏:</b>
‚Ä¢ <b>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Ñ–∞—Ä–º.</b>
‚Ä¢ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ä—Ç–∏.</b>

ü§ù <b>–ü—Ä–∏–∫–ª–∞–¥ —Å–∏–Ω–µ—Ä–≥—ñ—ó:</b>
–Ø–∫—â–æ —É –∫–æ–º–∞–Ω–¥—ñ —î <i>–ê—Ç–ª–∞—Å</i>, –≥–µ—Ä–æ—ó —è–∫ <i>–Æ –ß–∂—É–Ω</i> –º–æ–∂—É—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª.

<b>–¢–≤—ñ–π —É—Å–ø—ñ—Ö</b> ‚Äì —Ü–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è —Ç–µ—Ä–ø—ñ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ì–æ—Ç–æ–≤–∏–π –¥–æ–º—ñ–Ω—É–≤–∞—Ç–∏? üöÄ"

## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–í–ê–ñ–õ–ò–í–û: –¥–æ—Ç—Ä–∏–º—É–π—Å—è –í–°–Ü–• —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤, –æ—Å–æ–±–ª–∏–≤–æ —â–æ–¥–æ –í–ê–õ–Ü–î–ù–û–ì–û HTML —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç–µ–≥—ñ–≤ <b>, <i>, <code>):"""

    def _beautify_response(self, text: str) -> str:
        """
        –û—Ñ–æ—Ä–º–ª—é—î —Ç–µ–∫—Å—Ç GPT –¥–ª—è Telegram: –∑–∞–º—ñ–Ω—é—î markdown/–∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–æ–¥–∞—î –µ–º–æ–¥–∑—ñ, –≤—ñ–¥—Å—Ç—É–ø–∏
        —Ç–∞ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏ <b>.
        """
        self.logger.debug(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è beautify (–ø–µ—Ä—à—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤): {text[:300]}")
        # –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π MLBB
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç",
            "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨", "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ",
            "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", 
            "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä",
            "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }

        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°"
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    break
            else:
                for key, emj in header_emojis.items():
                    if key in header_text.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"

        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^<b>(.+?)</b>[:\s]*", lambda m: replace_header(m) if ':' in m.group(0) else m.group(0), text, flags=re.MULTILINE)
        
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+-\s+", "  ‚ó¶ ", text, flags=re.MULTILINE)
        
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text) # –ó–∞–º—ñ–Ω–∞ Markdown **bold** –Ω–∞ <b>bold</b>
        text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)     # –ó–∞–º—ñ–Ω–∞ Markdown *italic* –Ω–∞ <i>italic</i>
        
        # –°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ —Ç–µ–≥–∏ <b>
        open_b_count = text.count("<b>")
        close_b_count = text.count("</b>")

        if open_b_count > close_b_count:
            missing_closing_tags = open_b_count - close_b_count
            self.logger.warning(
                f"–í–∏—è–≤–ª–µ–Ω–æ {missing_closing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ <b>. "
                f"–î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å —Ç–µ–∫—Å—Ç—É. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 300): {text[:300]}"
            )
            text += "</b>" * missing_closing_tags
        elif close_b_count > open_b_count:
            # –¶—è —Å–∏—Ç—É–∞—Ü—ñ—è –º–µ–Ω—à —ñ–º–æ–≤—ñ—Ä–Ω–∞ –¥–ª—è –ø–æ–º–∏–ª–∫–∏ "Can't find end tag"
            self.logger.warning(
                f"–í–∏—è–≤–ª–µ–Ω–æ {close_b_count - open_b_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ </b>. "
                f"–¶–µ –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 300): {text[:300]}"
            )
            # –ù–∞—Ä–∞–∑—ñ –Ω–µ —Ä–æ–±–∏–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –¥–ª—è –∑–∞–π–≤–∏—Ö </b>, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Å–∫–ª–∞–¥–Ω—ñ—à–µ

        self.logger.debug(f"–¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è beautify (–ø–µ—Ä—à—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤): {text[:300]}")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —ñ –æ—Ñ–æ—Ä–º–ª—é—î —ó—ó –¥–ª—è Telegram.
        """
        self.logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT –≤—ñ–¥ {user_name}: '{user_query}'")
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4-turbo", # –ê–±–æ —ñ–Ω—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000,
            "temperature": 0.65,
            "top_p": 0.9,
            "presence_penalty": 0.1,
            "frequency_penalty": 0.15
        }

        try:
            if not self.session or self.session.closed:
                self.logger.warning("Aiohttp —Å–µ—Å—ñ—è –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                # –¶–µ–π –±–ª–æ–∫ —Ç—É—Ç –¥–ª—è –±–µ–∑–ø–µ–∫–∏, –∞–ª–µ __aenter__ –º–∞—î –∫–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
                self.session = ClientSession( 
                    timeout=ClientTimeout(total=45),
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )

            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status}). –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ!"

                result = await response.json()
                
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç."

                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT (–ø–µ—Ä—à—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤): {raw_gpt_text[:300]}")
                
                beautified_text = self._beautify_response(raw_gpt_text)
                return beautified_text

        except asyncio.TimeoutError:
            self.logger.error(f"OpenAI API Timeout –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É: {user_query}")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
        except Exception as e:
            self.logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ GPT –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name} üòï –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ!"


bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–µ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
    
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"

    welcome_text = f"""
{greeting_msg}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.1!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –≥—Ä—É, –Ω–∞–¥–∞—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–µ—Ä–æ—ó–≤!

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –ø—Ä–æ—Ç–∏ –±—ñ–π—Ü—ñ–≤</code>
‚Ä¢ <code>/go –ø–æ—Ä–∞–¥—å —Å–∏–ª—å–Ω–∏—Ö –º–∞–≥—ñ–≤ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É —Å–æ–ª–æ</code>
‚Ä¢ <code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –≥–µ—Ä–æ—ó–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤ 5–Ω–∞5</code>
‚Ä¢ <code>/go —è–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –æ–±'—î–∫—Ç–∏ –≥—Ä–∞—é—á–∏ –∑–∞ –ª—ñ—Å–Ω–∏–∫–∞</code>

<b>üî• –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è v2.1:</b>
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—é—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–µ—Ä–æ—ó–≤!
‚Ä¢ –ü–æ—Ä–∞–¥–∏ —Å—Ç–∞–ª–∏ –±—ñ–ª—å—à –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ —Ç–∞ –º–µ–Ω—à "—Å—É—Ö–∏–º–∏".
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ–π –º–µ—Ç—ñ —Ç–∞ —Å–∏–Ω–µ—Ä–≥—ñ—ó –≥–µ—Ä–æ—ó–≤.
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    await message.answer(welcome_text)
    logger.info(f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name} (v2.1) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - —è–∫—ñ—Å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT –∑ –∫—Ä–∞—Å–∏–≤–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º."""
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_query = message.text.replace("/go", "", 1).strip()

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")

    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç –≤—ñ–¥ {user_name}. –ù–∞–¥—Å–∏–ª–∞—é –ø—ñ–¥–∫–∞–∑–∫—É.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è /go, —ñ —è —Å–ø—Ä–æ–±—É—é –¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –≥–µ—Ä–æ—ó–≤!\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É –Ω–∞ —Å—Ç—Ä—ñ–ª—å—Ü—è—Ö\n"
            "‚Ä¢ /go —è–∫–∏—Ö –≥–µ—Ä–æ—ó–≤ –æ–±—Ä–∞—Ç–∏ –¥–ª—è –¥–æ–º—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ –º—ñ–¥—ñ"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —Ç–∞ –ø—ñ–¥–±–∏—Ä–∞—é –≥–µ—Ä–æ—ó–≤...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –≥–µ—Ä–æ—ó–≤ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Ç–µ–±–µ!"
    ]
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è –±—ñ–ª—å—à —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name}: {e}")
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ thinking_msg, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        thinking_msg = None


    start_time = time.time()
    response_text = "" # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É

    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É MLBBChatGPT –¥–ª—è –∑–∞–ø–∏—Ç—É '{user_query}': {e}")
        response_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è —Å–µ—Ä–π–æ–∑–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –†–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω—ñ."


    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É GPT –¥–ª—è '{user_query}': {processing_time:.2f}—Å")

    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.1 Enhanced GPT-4T</i>"
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        if thinking_msg:
            await thinking_msg.edit_text(full_response_to_send)
        else: # –Ø–∫—â–æ thinking_msg –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ
            await message.reply(full_response_to_send)
        logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} (ID: {user_id}) —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ/–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ. –ó–∞–ø–∏—Ç: '{user_query}'")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ/–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_name}: {e}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–µ—Ä—à—ñ 300): '{full_response_to_send[:300]}'")
        if "can't parse entities" in str(e).lower():
            logger.error(f"–ü–û–ú–ò–õ–ö–ê –†–û–ó–ë–û–†–£ HTML –¥–ª—è –∑–∞–ø–∏—Ç—É '{user_query}'. –¢–µ–∫—Å—Ç, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–≤ –ø–æ–º–∏–ª–∫—É (–ø–µ—Ä—à—ñ 500): {response_text[:500]}")
            plain_text_response = re.sub(r"<[^>]+>", "", response_text) # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ HTML —Ç–µ–≥–∏
            fallback_message = (
                f"{plain_text_response}{admin_info}\n\n"
                f"<i>(–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML. –ü–æ–∫–∞–∑–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç. "
                f"–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —è–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è.)</i>"
            )
            try:
                if thinking_msg: # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ thinking_msg –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
                    await thinking_msg.edit_text(fallback_message, parse_mode=None) # parse_mode=None –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                else: # –ê–±–æ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await message.reply(fallback_message, parse_mode=None)
                logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ HTML.")
            except Exception as plain_text_e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è {user_name} –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ HTML: {plain_text_e}")
                # –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                final_fallback_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
                if thinking_msg: await thinking_msg.edit_text(final_fallback_text, parse_mode=None)
                else: await message.reply(final_fallback_text, parse_mode=None)
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ TelegramAPIError, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —è–∫ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è)
            try:
                await message.reply(full_response_to_send) # –¶–µ –º–æ–∂–µ –∑–Ω–æ–≤—É —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ç–∞ —Å–∞–º–∞
                logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–Ω–µ –ø–æ–≤'—è–∑–∞–Ω–æ—ó –∑ HTML).")
            except Exception as final_e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} –Ω–∞–≤—ñ—Ç—å –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: {final_e}")
                final_fallback_text = f"–í–∏–±–∞—á, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
                if thinking_msg: await thinking_msg.edit_text(final_fallback_text, parse_mode=None)
                else: await message.reply(final_fallback_text, parse_mode=None)


@dp.errors()
async def error_handler(update_event, exception: Exception):
    logger.error(f"üö® –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –ø–æ–º–∏–ª–æ–∫: {exception} –¥–ª—è update: {update_event}", exc_info=True)
    
    chat_id = None
    user_name = "–¥—Ä—É–∂–µ"

    if hasattr(update_event, 'message') and update_event.message:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user:
            user_name = update_event.message.from_user.first_name
    elif hasattr(update_event, 'callback_query') and update_event.callback_query:
        # –Ø–∫—â–æ —É –≤–∞—Å —î callback_query, –æ–±—Ä–æ–±–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—à–æ—é
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user:
            user_name = update_event.callback_query.from_user.first_name
            # –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback_query
            # await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=True)
    
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
    
    if chat_id:
        try:
            await bot.send_message(chat_id, error_message_text, parse_mode=None) # parse_mode=None –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        except Exception as e:
            logger.error(f"üö® –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name} –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        logger.warning("üö® –°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–ª–∞—Å—è, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini v2.1... (PID: {os.getpid()})")

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π!")

        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini v2.1 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {launch_time_kyiv}\n"
                    f"üéØ <b>–ü—Ä–æ–º–ø—Ç v2.1 –∞–∫—Ç–∏–≤–Ω–∏–π (–∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–µ—Ä–æ—è—Ö —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º HTML)!</b>\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
                logger.info(f"‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É (ID: {ADMIN_USER_ID}): {e}")
        
        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt)")
    except TelegramAPIError as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"üí• –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
    finally:
        logger.info("üõë –†–æ–∑–ø–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        if bot.session and not bot.session.closed:
            await bot.session.close()
            logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.")
        # –Ø–∫—â–æ Dispatcher —Å—Ç–≤–æ—Ä—é—î –≤–ª–∞—Å–Ω—É —Å–µ—Å—ñ—é –∞–±–æ —Ä–µ—Å—É—Ä—Å–∏, –≤–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—ñ —Ç—É—Ç,
        # –∞–ª–µ –∑–∞–∑–≤–∏—á–∞–π aiogram –∫–µ—Ä—É—î —Ü–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ start_polling.
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ INFO –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É)
    # logging.getLogger('aiogram').setLevel(logging.DEBUG) 
    # logging.getLogger('aiohttp').setLevel(logging.DEBUG)
    asyncio.run(main())
