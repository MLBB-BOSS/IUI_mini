"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.
–î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4o (–∞–±–æ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –¥–ª—è Vision)
Author: MLBB-BOSS | Date: 2025-05-26
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any

# –ù–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è Vision
import base64
import json
import html # –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö

from aiogram import Bot, Dispatcher, F # –î–æ–¥–∞–Ω–æ F –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
import aiohttp # –Ø–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è type hint
from aiohttp import ClientSession, ClientTimeout # ClientTimeout –≤–∂–µ –±—É–≤
from dotenv import load_dotenv

# –ù–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è FSM
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Vision –º–æ–¥–µ–ª—ñ
VISION_MODEL_NAME: str = os.getenv("VISION_MODEL_NAME", "gpt-4o")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–æ–¥–µ–ª—å –¥–ª—è Vision: {VISION_MODEL_NAME}")

# === –°–¢–ê–ù–ò FSM –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
class VisionAnalysisStates(StatesGroup):
    awaiting_profile_screenshot = State()

# === –ü–†–û–ú–ü–¢ –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ü–†–û–§–Ü–õ–Æ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π) ===
PROFILE_SCREENSHOT_PROMPT = """
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ –≥—Ä–∏ Mobile Legends: Bang Bang.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —É–≤–∞–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–¥–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è.
–í–∏—Ç—è–≥–Ω–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ —ó—ó –í–ò–ö–õ–Æ–ß–ù–û —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ JSON –æ–±'—î–∫—Ç–∞.
–ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ –∞–±–æ –ø—ñ—Å–ª—è JSON, —Ç—ñ–ª—å–∫–∏ —Å–∞–º JSON.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ç–∞–∫–æ—é:
{
  "game_nickname": "string –∞–±–æ null, —è–∫—â–æ –Ω–µ –≤–∏–¥–Ω–æ",
  "mlbb_id_server": "string —É —Ñ–æ—Ä–º–∞—Ç—ñ 'ID (SERVER)' –∞–±–æ null, —è–∫—â–æ –Ω–µ –≤–∏–¥–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '123456789 (1234)')",
  "current_rank": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ï–ø—ñ—á–Ω–∏–π V', '–õ–µ–≥–µ–Ω–¥–∞ III', '–ú—ñ—Ñ—ñ—á–Ω–∏–π 10 –∑—ñ—Ä–æ–∫') –∞–±–æ null",
  "highest_rank_season": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 267 –∑—ñ—Ä–æ–∫', '–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 1111 –∑—ñ—Ä–æ–∫') –∞–±–æ null",
  "matches_played": "int –∞–±–æ null",
  "likes_received": "int –∞–±–æ null",
  "location": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Ukraine/Dnipropetrovs'k') –∞–±–æ null",
  "squad_name": "string (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'IS Iron Spirit.') –∞–±–æ null"
}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –¢–û–ß–ù–û–°–¢–Ü:
1.  **–¶–∏—Ñ—Ä–∏ —Ç–∞ –ó—ñ—Ä–∫–∏:** –î—É–∂–µ —É–≤–∞–∂–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π –£–°–Ü —Ü–∏—Ñ—Ä–∏ –≤ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö —Ä–∞–Ω–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '1111' –∑—ñ—Ä–æ–∫, –∞ –Ω–µ '111'). –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é.
2.  **–ü–æ—Ç–æ—á–Ω–∏–π –†–∞–Ω–≥:** –¶–µ —Ä–∞–Ω–≥, —ñ–∫–æ–Ω–∫–∞ —è–∫–æ–≥–æ –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–π–±—ñ–ª—å—à–∞ —ñ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –ø—ñ–¥ –±–ª–æ–∫–æ–º ID/–°–µ—Ä–≤–µ—Ä, –∑ –ø—ñ–¥–ø–∏—Å–æ–º "Current Rank". –ù–µ –ø–ª—É—Ç–∞–π –π–æ–≥–æ –∑ "Highest Rank" –∞–±–æ "Mythical Glory Medal". –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —Ç–∞–º —ñ–∫–æ–Ω–∫–∞ –ï–ø—ñ–∫–∞ V, —Ç–æ —Ç–∞–∫ —ñ –ø–∏—à–∏ "–ï–ø—ñ—á–Ω–∏–π V".
3.  **–ù–∞–π–≤–∏—â–∏–π –†–∞–Ω–≥ –°–µ–∑–æ–Ω—É:** –¶–µ —Ä–∞–Ω–≥, —ñ–∫–æ–Ω–∫–∞ —è–∫–æ–≥–æ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –±—ñ–ª—è –ø—ñ–¥–ø–∏—Å—É "Highest Rank". –ß–∞—Å—Ç–æ –≤—ñ–Ω –º–∞—î –ø–æ–∫–∞–∑–Ω–∏–∫ –∑—ñ—Ä–æ–∫ –ø–æ—Ä—É—á (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ‚òÖ267 –∞–±–æ ‚òÖ1111).
4.  **–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –î–∞–Ω–∏—Ö:** –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ª–æ–∫–∞—Ü—ñ—è) –¥—ñ–π—Å–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π null.

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∏–º. –Ø–∫—â–æ —è–∫–∞—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞—á–µ–Ω–Ω—è null –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ–ª—è.
–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ç–µ–∫—Å—Ç —É–≤–∞–∂–Ω–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –Ω–µ–≤–µ–ª–∏–∫–∏–π –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–∫—Ä–∏—Ç–∏–π.
–î–ª—è —Ä–∞–Ω–≥—ñ–≤, —è–∫—â–æ –±–∞—á–∏—à —Ä–∏–º—Å—å–∫—ñ —Ü–∏—Ñ—Ä–∏ –¢–ê –∑—ñ—Ä–∫–∏, –≤–∫–∞–∑—É–π —ó—Ö —Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ú—ñ—Ñ—ñ—á–Ω–∏–π III 15 –∑—ñ—Ä–æ–∫", "–õ–µ–≥–µ–Ω–¥–∞ V 2 –∑—ñ—Ä–∫–∏").
"""
class MLBBChatGPT:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω—å.
    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é—Ç—å—Å—è, –æ—Ñ–æ—Ä–º–ª—é—é—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤ Telegram.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

    async def __aenter__(self):
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Å—ñ—ó, –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–∫—Ä–∏—Ç–∏–π —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö
        self.session = ClientSession(
            timeout=ClientTimeout(total=60), 
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("Aiohttp ClientSession —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("Aiohttp ClientSession –∑–∞–∫—Ä–∏—Ç–æ.")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ MLBBChatGPT: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        # –ö–æ–¥ –∑ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
        kyiv_tz = timezone(timedelta(hours=3))
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        # –ü—Ä–æ–º–ø—Ç v2.2 (–∞–±–æ v2.3, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–Ω–æ–≤–∏–≤ –π–æ–≥–æ —É —Å–≤–æ—î–º—É —Ñ–∞–π–ª—ñ)
        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.3 üéÆ
## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang. –¢–≤–æ—è –≥–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ç–æ—á–Ω—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
–í–ê–ñ–õ–ò–í–û: –ù–µ –≤–∏–≥–∞–¥—É–π —ñ–º–µ–Ω–∞ –≥–µ—Ä–æ—ó–≤ –∞–±–æ –º–µ—Ö–∞–Ω—ñ–∫–∏. –Ø–∫—â–æ —Ç–∏ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –Ω–∞ 100% –≤ —ñ–º–µ–Ω—ñ –≥–µ—Ä–æ—è –∞–±–æ –¥–µ—Ç–∞–ª—ñ, –∫—Ä–∞—â–µ –∑–∞–∑–Ω–∞—á —Ü–µ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø –≥–µ—Ä–æ—è/—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≤—ñ–¥–æ–º—ñ –Ω–∞–∑–≤–∏ –≥–µ—Ä–æ—ó–≤ –∑ Mobile Legends: Bang Bang.
## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (HTML, –í–ê–õ–Ü–î–ù–ò–ô HTML –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô).
## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô
### üéØ –°–¢–†–£–ö–¢–£–†–ê –¢–ê –ó–ú–Ü–°–¢:
1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2.  **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**:
    *   –ß—ñ—Ç–∫–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Å—É—Ç—ñ –∑–∞–ø–∏—Ç—É, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—Ä—É.
    *   –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤: –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π 2-3 –Ü–°–ù–£–Æ–ß–ò–•, –ê–ö–¢–£–ê–õ–¨–ù–ò–• –≥–µ—Ä–æ—ó–≤ Mobile Legends.
    *   –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ —Ä–µ–∞–ª—å–Ω—ñ –≥–µ—Ä–æ—ó —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º.
    *   –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ, –∑–≥–∞–¥–∞–π –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó.
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: –î–µ–∫—ñ–ª—å–∫–∞ –¥—ñ—î–≤–∏—Ö –ø–æ—Ä–∞–¥.
4.  **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ü–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–í–ê–õ–Ü–î–ù–ò–ô HTML):
-   –¢–Ü–õ–¨–ö–ò HTML: <b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>. –ó–ê–í–ñ–î–ò –ö–û–†–ï–ö–¢–ù–û –ó–ê–ö–†–ò–í–ê–ô –¢–ï–ì–ò.
-   –°–ø–∏—Å–∫–∏: "‚Ä¢ ".
-   –û–±—Å—è–≥: ~200-300 —Å–ª—ñ–≤.
-   –ï–º–æ–¥–∑—ñ: –¥–æ—Ä–µ—á–Ω–æ (ü¶∏‚Äç‚ôÇÔ∏è, üí°, ü§ù).
### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB (–¢–Ü–õ–¨–ö–ò –§–ê–ö–¢–ò–ß–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø):
-   **–ì–µ—Ä–æ—ó**: –¢–Ü–õ–¨–ö–ò –Ü–°–ù–£–Æ–ß–Ü –≥–µ—Ä–æ—ó, —ó—Ö –º–µ—Ö–∞–Ω—ñ–∫–∏, —Ä–æ–ª—ñ, –∫–æ–Ω—Ç—Ä–ø—ñ–∫–∏.
-   **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –†–∞–Ω–∫—ñ–Ω–≥, –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è, –ü–∞—Ç—á**: –∞–∫—Ç—É–∞–ª—å–Ω–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è.
### ‚ùå –ö–ê–¢–ï–ì–û–†–ò–ß–ù–û –ó–ê–ë–û–†–û–ù–ï–ù–û:
-   –í–ò–ì–ê–î–£–í–ê–¢–ò —ñ–º–µ–Ω–∞ –≥–µ—Ä–æ—ó–≤, –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ, –ø—Ä–µ–¥–º–µ—Ç–∏ –∞–±–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ —ñ–≥—Ä–æ–≤—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ. –¶–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ –ø—Ä–∞–≤–∏–ª–æ.
-   –ù–∞–¥–∞–≤–∞—Ç–∏ –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É –∞–±–æ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
-   Markdown, –ù–ï–ó–ê–ö–†–ò–¢–Ü HTML —Ç–µ–≥–∏.
## –ü–†–ò–ö–õ–ê–î –°–¢–ò–õ–Æ (–∑–∞–ø–∏—Ç "–∫–æ–Ω—Ç—Ä–ø—ñ–∫ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏"):
"{greeting}, {user_name}! üëã
–•–∞—è–±—É—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–º —Å—É–ø–µ—Ä–Ω–∏–∫–æ–º, –∞–ª–µ —î –≥–µ—Ä–æ—ó, —è–∫—ñ –¥–æ–±—Ä–µ –π–æ–º—É –ø—Ä–æ—Ç–∏—Å—Ç–æ—è—Ç—å! ü§∫
ü¶∏‚Äç‚ôÇÔ∏è <b>–ö–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –ø—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏:</b>
‚Ä¢ <b>–ö–∞–π—è (Kaja):</b> –ô–æ–≥–æ —É–ª—å—Ç—ñ–º–µ–π—Ç <i>"Divine Judgment"</i> –¥–æ–∑–≤–æ–ª—è—î —Å—Ö–æ–ø–∏—Ç–∏ –•–∞—è–±—É—Å—É –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥ —á–∞—Å –π–æ–≥–æ —Ç—ñ–Ω–µ–π —Ç–∞ –≤—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–æ –∫–æ–º–∞–Ω–¥–∏.
‚Ä¢ <b>–•—É—Ñ—Ä–∞ (Khufra):</b> –ô–æ–≥–æ –Ω–∞–≤–∏—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é, –æ—Å–æ–±–ª–∏–≤–æ <i>"Bouncing Ball"</i>, –º–æ–∂—É—Ç—å –∑—É–ø–∏–Ω–∏—Ç–∏ –•–∞—è–±—É—Å—É —Ç–∞ –Ω–µ –¥–∞—Ç–∏ –π–æ–º—É –≤—Ç–µ–∫—Ç–∏.
‚Ä¢ <b>–°–∞–±–µ—Ä (Saber):</b> –ó –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –±—ñ–ª–¥–æ–º, —É–ª—å—Ç—ñ–º–µ–π—Ç –°–∞–±–µ—Ä–∞ <i>"Triple Sweep"</i> –º–æ–∂–µ —à–≤–∏–¥–∫–æ –∑–Ω–∏—â–∏—Ç–∏ –•–∞—è–±—É—Å—É –¥–æ —Ç–æ–≥–æ, —è–∫ –≤—ñ–Ω –∑–∞–≤–¥–∞—Å—Ç—å –±–∞–≥–∞—Ç–æ —à–∫–æ–¥–∏.
üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ü—Ä–æ—Ç–∏ –•–∞—è–±—É—Å–∏ –≤–∞–∂–ª–∏–≤–∏–π —Ö–æ—Ä–æ—à–∏–π –≤—ñ–∂–Ω –Ω–∞ –∫–∞—Ä—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–∞ —Ä–µ–∞–∫—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –π–æ–≥–æ –ø–æ—è–≤—É.
–ü–∞–º'—è—Ç–∞–π, —â–æ —É—Å–ø—ñ—Ö –∑–∞–ª–µ–∂–∏—Ç—å –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –≥–µ—Ä–æ—è, –∞ –π –≤—ñ–¥ —Ç–≤–æ—ó—Ö –Ω–∞–≤–∏—á–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏! –£—Å–ø—ñ—Ö—ñ–≤! üëç"
## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"
–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ü–ê–ú'–Ø–¢–ê–ô: –ë–ï–ó –í–ò–ì–ê–î–û–ö, —Ç—ñ–ª—å–∫–∏ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –≥–µ—Ä–æ—ó —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –≤–∞–ª—ñ–¥–Ω–∏–π HTML):"""


    def _beautify_response(self, text: str) -> str:
        # –ö–æ–¥ –∑ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
        self.class_logger.debug(f"Beautify: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }
        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°" 
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower(): best_emoji = header_emojis.get(key, best_emoji); break
            else:
                for key, emj in header_emojis.items():
                    if key in header_text.lower(): best_emoji = emj; break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"
        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+-\s+", "  ‚ó¶ ", text, flags=re.MULTILINE) 
        text = re.sub(r"\n{3,}", "\n\n", text)
        text = re.sub(r"\*\*(?P<content>.+?)\*\*", r"<b>\g<content></b>", text)
        text = re.sub(r"\*(?P<content>.+?)\*", r"<i>\g<content></i>", text)
        open_b_count = len(re.findall(r"<b>", text))
        close_b_count = len(re.findall(r"</b>", text))
        if open_b_count > close_b_count:
            missing_tags = open_b_count - close_b_count
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {missing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ <b>. –î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å.")
            text += "</b>" * missing_tags
        elif close_b_count > open_b_count:
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_b_count - open_b_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ </b>.")
        self.class_logger.debug(f"Beautify: –¢–µ–∫—Å—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): '{text[:100]}'")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        # –ö–æ–¥ –∑ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è–º–∏ –º–æ–¥–µ–ª—ñ/–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –æ–±–≥–æ–≤–æ—Ä–µ–Ω—å
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT –≤—ñ–¥ '{user_name}': '{user_query}'")
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1", # –ê–±–æ "gpt-4.1", —è–∫—â–æ —Ü–µ –Ω–∞–∑–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó, —è–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000, 
            "temperature": 0.65, # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ, —è–∫ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏
            "top_p": 0.9,
            "presence_penalty": 0.3, # –ó–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            "frequency_penalty": 0.2 # –ó–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ–∫—Å—Ç—É –¥–ª—è GPT: temperature={payload['temperature']}")
        try:
            if not self.session or self.session.closed:
                 self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                 self.session = ClientSession(
                    timeout=ClientTimeout(total=45), 
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
            async with self.session.post( # type: ignore
                "https://api.openai.com/v1/chat/completions", json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status})."
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø."
                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.class_logger.info(f"–°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT (–ø–µ—Ä—à—ñ 100): '{raw_gpt_text[:100]}'")
                return self._beautify_response(raw_gpt_text)
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (—Ç–µ–∫—Å—Ç) –¥–ª—è: '{user_query}'")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥."
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –¥–ª—è '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name} üòï."

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ Vision API. –ü—Ä–æ–º–ø—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: '{prompt[:70]}...'")
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {self.api_key}"}
        payload = {
            "model": VISION_MODEL_NAME, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É –∑ .env
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                    ]
                }
            ],
            "max_tokens": 1500,     # –í–∫–∞–∑–∞–Ω–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
            "temperature": 0.3      # –í–∫–∞–∑–∞–Ω–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
        }
        self.class_logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Vision API: –º–æ–¥–µ–ª—å={VISION_MODEL_NAME}, max_tokens={payload['max_tokens']}, temperature={payload['temperature']}")

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
            if not self.session or self.session.closed:
                self.class_logger.warning("Aiohttp —Å–µ—Å—ñ—è –¥–ª—è Vision –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–≤—É —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                async with ClientSession(headers={"Authorization": f"Bearer {self.api_key}"}) as temp_session:
                    async with temp_session.post(
                        "https://api.openai.com/v1/chat/completions", 
                        headers=headers, # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ, –±–æ —Å–µ—Å—ñ—è –Ω–æ–≤–∞
                        json=payload,
                        timeout=ClientTimeout(total=90) # –¢–∞–π–º–∞—É—Ç –¥–ª—è Vision –∑–∞–ø–∏—Ç—É
                    ) as response:
                        return await self._handle_vision_response(response)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é –∫–ª–∞—Å—É
                async with self.session.post(
                    "https://api.openai.com/v1/chat/completions", 
                    headers=headers, # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∂–µ —î –≤ self.session, –∞–ª–µ –º–æ–∂–Ω–∞ —ñ —Ç—É—Ç –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
                    json=payload,
                    timeout=ClientTimeout(total=90) # –¢–∞–π–º–∞—É—Ç –¥–ª—è Vision –∑–∞–ø–∏—Ç—É
                ) as response:
                    return await self._handle_vision_response(response)
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API Timeout –ø–æ–º–∏–ª–∫–∞.")
            return {"error": "–ó–∞–ø–∏—Ç –¥–æ Vision API –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Vision API."""
        if response.status == 200:
            try:
                result = await response.json()
            except aiohttp.ContentTypeError: # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ JSON
                raw_text_response = await response.text()
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {raw_text_response[:300]}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": raw_text_response}

            content = result.get("choices", [{}])[0].get("message", {}).get("content")
            if content:
                self.class_logger.info(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): {content[:100]}")
                json_match = re.search(r"```json\s*([\s\S]+?)\s*```", content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(1)
                else:
                    json_str = content.strip()
                
                try:
                    # –ë–∞–∑–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è JSON —Ä—è–¥–∫–∞
                    if not json_str.startswith("{") and "{" in json_str:
                        json_str = json_str[json_str.find("{"):]
                    if not json_str.endswith("}") and "}" in json_str:
                        json_str = json_str[:json_str.rfind("}")+1]
                    
                    return json.loads(json_str)
                except json.JSONDecodeError as e:
                    self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ Vision API: {e}. –†—è–¥–æ–∫: '{json_str[:300]}'")
                    return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API.", "raw_response": content}
            else:
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}
        else:
            error_text = await response.text()
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text[:300]}")
            return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_text[:200]}

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear() 
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"
    welcome_text = f"""
{greeting_msg}, <b>{user_name}</b>! {emoji}
üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.4!
–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang.
<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
‚Ä¢ –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: <code>/go —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è</code>
‚Ä¢ –î–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é: <code>/analyzeprofile</code> (–ø–æ—Ç—ñ–º –Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç)
<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ <code>/go</code>:</b>
‚Ä¢ <code>/go —è–∫ –≥—Ä–∞—Ç–∏ –Ω–∞ –µ–∫—Å–ø –ª—ñ–Ω—ñ—ó –ø—Ä–æ—Ç–∏ –±—ñ–π—Ü—ñ–≤</code>
‚Ä¢ <code>/go –ø–æ—Ä–∞–¥—å —Å–∏–ª—å–Ω–∏—Ö –º–∞–≥—ñ–≤ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É —Å–æ–ª–æ</code>
<b>üî• –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è v2.4:</b>
‚Ä¢ –î–æ–¥–∞–Ω–æ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é!
‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π Vision API.
‚Ä¢ –ó–º–µ–Ω—à–µ–Ω–æ "–≤–∏–≥–∞–¥—É–≤–∞–Ω–Ω—è" –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –≥–µ—Ä–æ—ó–≤ —É —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö.
–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®"""
    try:
        await message.answer(welcome_text)
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name} (v2.4) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}: {e}")

@dp.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext):
    await state.clear()
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query}'")
    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name}.")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "<code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>"
        )
        return
    thinking_messages = [
        f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —Ç–∞ –ø—ñ–¥–±–∏—Ä–∞—é –≥–µ—Ä–æ—ó–≤...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!",
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 'thinking_msg' –¥–ª—è {user_name}: {e}")
    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {e}")
    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {processing_time:.2f}—Å")
    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.4 GPT (temp:0.4)</i>"
    full_response_to_send = f"{response_text}{admin_info}"
    try:
        if thinking_msg: await thinking_msg.edit_text(full_response_to_send)
        else: await message.reply(full_response_to_send)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ/–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ /go –¥–ª—è {user_name}: {e}. –¢–µ–∫—Å—Ç (100): '{full_response_to_send[:100]}'")
        if "can't parse entities" in str(e).lower():
            plain_text_response = re.sub(r"<[^>]+>", "", response_text) 
            fallback_message = (f"{plain_text_response}{admin_info}\n\n<i>(–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML. –ü–æ–∫–∞–∑–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç.)</i>")
            try:
                if thinking_msg: await thinking_msg.edit_text(fallback_message, parse_mode=None)
                else: await message.reply(fallback_message, parse_mode=None)
            except Exception as plain_e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç /go –¥–ª—è {user_name}: {plain_e}")
        else:
            try: await message.reply(f"–í–∏–±–∞—á, {user_name}, –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. (–ö–æ–¥: TG_{e.__class__.__name__})", parse_mode=None)
            except Exception as final_e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É Telegram –¥–ª—è {user_name}: {final_e}")

# === –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –°–ö–†–Ü–ù–®–û–¢–Ü–í ===
@dp.message(Command("analyzeprofile"))
async def cmd_analyze_profile(message: Message, state: FSMContext):
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile.")
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends, —ñ —è —Å–ø—Ä–æ–±—É—é –π–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
async def handle_profile_screenshot(message: Message, state: FSMContext):
    bot_instance = message.bot # –û—Ç—Ä–∏–º—É—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≤—ñ–¥ {user_name} (ID: {user_id}).")

    if not message.photo:
        await message.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return

    processing_msg = await message.reply("‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.")
    photo = message.photo[-1]
    try:
        file_info = await bot_instance.get_file(photo.file_id)
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram.")
        
        downloaded_file_io = await bot_instance.download_file(file_info.file_path)
        if downloaded_file_io is None:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram.")
            
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            analysis_result = await gpt_analyzer.analyze_image_with_vision(image_base64, PROFILE_SCREENSHOT_PROMPT)
        
        try: await bot_instance.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except TelegramAPIError: logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É.")

        if analysis_result and "error" not in analysis_result:
            logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {analysis_result}")
            response_parts = [f"<b>–ê–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, {user_name}:</b>"]
            fields_translation = {
                "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º", "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
                "current_rank": "üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥", "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)",
                "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
                "location": "üåç –õ–æ–∫–∞—Ü—ñ—è", "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥"
            }
            has_data = False
            for key, readable_name in fields_translation.items():
                value = analysis_result.get(key)
                if value is not None:
                    response_parts.append(f"<b>{readable_name}:</b> {html.escape(str(value))}")
                    has_data = True
                else:
                     response_parts.append(f"<b>{readable_name}:</b> <i>–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ</i>")
            if not has_data and analysis_result.get("raw_response"):
                 response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–±–æ –≤–æ–Ω–∞ –Ω–µ—á—ñ—Ç–∫–∞.</i>")
            elif not has_data:
                 response_parts.append(f"\n<i>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –∞–±–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—ñ–Ω —á—ñ—Ç–∫–∏–π.</i>")
            await message.reply("\n".join(response_parts))
        else:
            error_msg = analysis_result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É.') if analysis_result else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.'
            details = analysis_result.get('details', '') if analysis_result else ''
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {error_msg} {details}")
            await message.reply(
                f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.\n"
                f"<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"
            )
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {e}")
        try: await bot_instance.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception: pass
        await message.reply(f"–î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        await state.clear()

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot, Command("cancel"))
async def cancel_profile_analysis(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} —Å–∫–∞—Å—É–≤–∞–≤ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    await state.clear()
    await message.reply("–ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /go.")

@dp.message(VisionAnalysisStates.awaiting_profile_screenshot)
async def handle_wrong_input_for_profile_screenshot(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "/cancel": # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ /cancel —è–∫ —Ç–µ–∫—Å—Ç—É
        await cancel_profile_analysis(message, state)
        return
    if message.text and message.text.startswith("/go"):
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –≤–≤—ñ–≤ /go —É —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–∫–∞—Å–æ–≤—É—é —Å—Ç–∞–Ω —ñ –≤–∏–∫–æ–Ω—É—é /go.")
        await state.clear()
        await cmd_go(message, state)
    elif message.text:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–æ–ø–æ–Ω—É—é —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ.")
        await message.reply("–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É.")
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç) —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

# === –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–ú–ò–õ–û–ö ===
@dp.errors()
async def error_handler(update_event, exception: Exception):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ error_handler: {exception} –¥–ª—è update: {update_event}", exc_info=True)
    chat_id = None
    user_name = "–¥—Ä—É–∂–µ"
    if hasattr(update_event, 'message') and update_event.message:
        chat_id = update_event.message.chat.id
        if update_event.message.from_user: user_name = update_event.message.from_user.first_name
    elif hasattr(update_event, 'callback_query') and update_event.callback_query:
        chat_id = update_event.callback_query.message.chat.id
        if update_event.callback_query.from_user: user_name = update_event.callback_query.from_user.first_name
        try: await update_event.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞...", show_alert=False)
        except Exception: pass 
    error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
    if chat_id:
        try: await bot.send_message(chat_id, error_message_text, parse_mode=None)
        except Exception as e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º–Ω—É –ø–æ–º–∏–ª–∫—É: {e}")
    else: logger.warning("–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id.")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main() -> None:
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini v2.4... (PID: {os.getpid()})")
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
        if ADMIN_USER_ID:
            try:
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini v2.4 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {launch_time_kyiv}\n"
                    f"üéØ <b>–ü—Ä–æ–º–ø—Ç v2.3, Vision (–ø—Ä–æ—Ñ—ñ–ª—å /analyzeprofile) –∞–∫—Ç–∏–≤–Ω—ñ!</b>\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e: logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É: {e}")
        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt: logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except TelegramAPIError as e: logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}", exc_info=True)
    except Exception as e: logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ–π...")
        # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —ñ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞
        # Aiogram 3.x –∑–∞–∑–≤–∏—á–∞–π —Å–∞–º –∫–µ—Ä—É—î —Å–µ—Å—ñ—î—é –±–æ—Ç–∞, –∞–ª–µ –¥–ª—è ClientSession, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≤—Ä—É—á–Ω—É, –ø–æ—Ç—Ä—ñ–±–Ω–µ —è–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è.
        # –£ –Ω–∞—Å MLBBChatGPT –∫–µ—Ä—É—î —Å–≤–æ—î—é —Å–µ—Å—ñ—î—é —á–µ—Ä–µ–∑ __aexit__.
        # –°–µ—Å—ñ—è —Å–∞–º–æ–≥–æ Bot (bot.session) –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ polling –∞–±–æ —è–≤–Ω–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
        if bot.session and hasattr(bot.session, "close") and not bot.session.closed: # type: ignore
             await bot.session.close() # type: ignore
             logger.info("–°–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Bot –∑–∞–∫—Ä–∏—Ç–æ.")
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
