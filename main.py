"""
main.py
–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è Telegram-–±–æ—Ç–∞ –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ aiogram 3.19+ —Ç–∞ Python 3.11+.
–î–æ–¥–∞—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø–æ –∫–æ–º–∞–Ω–¥—ñ /vision.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
- –î–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ TELEGRAM_BOT_TOKEN —ñ OPENAI_API_KEY —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (Heroku Config Vars –∞–±–æ .env).
- –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ (—Ñ–æ—Ç–æ/—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏) –¥–æ 10 –ú–ë.
- –í—ñ–¥–ø–æ–≤—ñ–¥—å GPT –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ HTML.
"""

import asyncio
import logging
import os
from typing import Any

from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiohttp import ClientSession
from dotenv import load_dotenv

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s]: %(message)s"
)
logger = logging.getLogger(__name__)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
load_dotenv()

TELEGRAM_BOT_TOKEN: str | None = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str | None = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in environment variables.")

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! Vision-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    raise RuntimeError("OPENAI_API_KEY is required in environment variables.")

__all__ = ["TELEGRAM_BOT_TOKEN", "OPENAI_API_KEY"]

bot: Bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp: Dispatcher = Dispatcher()
router: Router = Router()


# =======================
# Vision –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
# =======================
async def analyze_image_with_vision(image_bytes: bytes) -> str:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ GPT-4 Vision (OpenAI API) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∞–Ω–∞–ª—ñ–∑.
    :param image_bytes: –ë–∞–π—Ç-–∫–æ–Ω—Ç–µ–Ω—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    :return: –¢–µ–∫—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    import base64
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")
    data_uri = f"data:image/jpeg;base64,{image_base64}"

    vision_prompt = (
        "–¶–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ Mobile Legends: Bang Bang.\n"
        "–û–ø–∏—à–∏, —â–æ —Å–∞–º–µ –Ω–∞ –Ω—å–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–æ, —è–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ —ñ–≥—Ä–æ–≤—ñ –¥–∞–Ω—ñ –≤–∏–¥–Ω–æ, "
        "—Ç–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É –ø–æ—Ä–∞–¥—É –≥—Ä–∞–≤—Ü—é. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
    )
    messages = [
        {
            "role": "system",
            "content": "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ —ñ–≥—Ä–æ–≤–∏—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ Mobile Legends."
        },
        {
            "role": "user",
            "content": f"{vision_prompt}\n\n–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (base64):\n{data_uri}"
        },
    ]
    payload = {
        "model": "gpt-4-vision-preview",
        "messages": messages,
        "max_tokens": 512,
        "temperature": 0.4,
    }
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    async with ClientSession() as session:
        try:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=40
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Vision API error: {response.status} - {error_text}")
                    return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                result = await response.json()
                return result["choices"][0]["message"]["content"].strip()
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {e}")
            return "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞."


# ===========================
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /vision
# ===========================
@router.message(Command("vision"))
async def cmd_vision_instruct(message: Message) -> None:
    """
    –Ü–Ω—Å—Ç—Ä—É–∫—Ç—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.
    """
    await message.reply(
        "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ –º–∞—Ç—á—É MLBB —è–∫ —Ñ–æ—Ç–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT-4 Vision —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        reply_to_message_id=message.message_id,
        parse_mode=None
    )


# ===============================
# –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤
# ===============================
@router.message(
    lambda m: m.reply_to_message and m.reply_to_message.text and "/vision" in m.reply_to_message.text,
    lambda m: m.photo
)
async def handle_vision_screenshot(message: Message) -> None:
    """
    –ü—Ä–∏–π–º–∞—î —Å–∫—Ä—ñ–Ω—à–æ—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ /vision, –∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ —á–µ—Ä–µ–∑ GPT-4 Vision —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é.
    """
    photo = message.photo[-1]  # –ù–∞–π—è–∫—ñ—Å–Ω—ñ—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    try:
        file = await bot.get_file(photo.file_id)
        image_bytes_io = await bot.download_file(file.file_path)
        image_bytes = await image_bytes_io.read()
        if len(image_bytes) > 10 * 1024 * 1024:
            await message.reply("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë).")
            return

        await message.reply("‚è≥ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.", parse_mode=None)

        vision_result = await analyze_image_with_vision(image_bytes)
        await message.reply(vision_result, parse_mode=None)

    except Exception as exc:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {exc}")
        await message.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.", parse_mode=None)


# =========================
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π error handler
# =========================
@dp.errors()
async def global_error_handler(event: Any, exception: Exception) -> Any:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–Ω—è—Ç–∫—ñ–≤. –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º—É—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
    :param event: –ü–æ–¥—ñ—è, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–∞ –ø–æ–º–∏–ª–∫—É.
    :param exception: –í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫.
    """
    logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {exception}", exc_info=True)
    # –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É


# =========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =========================
async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    dp.include_router(router)
    try:
        await dp.start_polling(bot)
    except Exception as exc:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É polling: {exc}", exc_info=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (KeyboardInterrupt/SystemExit)")
