import asyncio

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import TELEGRAM_BOT_TOKEN, logger, ADMIN_USER_ID
from handlers.general_handlers import register_general_handlers, error_handler
from handlers.vision_handlers import register_vision_handlers
import database
from lobby_manager import check_expired_lobbies

async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç–∞ —Ñ–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ."""
    bot_version = "v3.0.0 (Party Manager 3.0)"
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini {bot_version}...")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    database.initialize_database()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    register_general_handlers(dp)
    register_vision_handlers(dp)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    dp.errors.register(error_handler)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–±—ñ
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(check_expired_lobbies, 'interval', minutes=1, args=(bot,))
    scheduler.start()
    logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–±—ñ –∑–∞–ø—É—â–µ–Ω–æ.")

    try:
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!")
        if ADMIN_USER_ID:
            await bot.send_message(str(ADMIN_USER_ID), f"ü§ñ <b>MLBB IUI mini {bot_version} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>")

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ polling
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–†–æ–∑–ø–æ—á–∏–Ω–∞—é polling...")
        await dp.start_polling(bot)

    finally:
        scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
        await bot.session.close()
        logger.info("–°–µ—Å—ñ—é –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ. –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ–ø–µ—Ä–µ–±–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)
