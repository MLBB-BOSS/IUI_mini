"""
main.py
–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—á–∞ –≤–µ—Ä—Å—ñ—è Telegram-–±–æ—Ç–∞ –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ aiogram 3.19+ —Ç–∞ Python 3.11+.
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è GPT –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /go.
"""

import asyncio
import logging
import os
from typing import Any

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiohttp import ClientSession
from dotenv import load_dotenv

# --- Logging setup ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s]: %(message)s"
)
logger = logging.getLogger(__name__)

# --- Load env vars ---
load_dotenv()

TELEGRAM_BOT_TOKEN: str | None = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str | None = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in environment variables.")

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! GPT-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    raise RuntimeError("OPENAI_API_KEY is required in environment variables.")

__all__ = ["TELEGRAM_BOT_TOKEN", "OPENAI_API_KEY"]

bot: Bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp: Dispatcher = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.
    :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await message.answer(
        "–í—ñ—Ç–∞—é! ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.\n"
        "–¶–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è MLBB-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏.\n\n"
        "–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /go <–≤–∞—à –∑–∞–ø–∏—Ç>, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT!",
        parse_mode=None  # –í–∏–º–∏–∫–∞—î–º–æ HTML, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º —ñ–∑ —Ç–µ–≥–∞–º–∏
    )


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /go, –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ GPT-4 —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    :param message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_query = message.text.replace("/go", "", 1).strip()

    if not user_query:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go.", parse_mode=None)
        return

    await message.reply("GPT –æ–±—Ä–æ–±–ª—è—î –≤–∞—à –∑–∞–ø–∏—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...", parse_mode=None)

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": "–í–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Mobile Legends Bang Bang. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HTML-—Ç–µ–≥–∏."},
            {"role": "user", "content": user_query}
        ],
        "max_tokens": 200,
        "temperature": 0.7
    }

    async with ClientSession() as session:
        try:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload,
                headers=headers
            ) as response:
                if response.status != 200:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ API OpenAI: {response.status}")
                    await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT.", parse_mode=None)
                    return

                result = await response.json()
                gpt_response = result["choices"][0]["message"]["content"]
                # –í–∏—Ä—ñ–∑–∞—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ HTML-—Ç–µ–≥–∏ (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ GPT —ó—Ö –¥–æ–¥–∞–≤)
                import re
                clean_resp = re.sub(r"<[^>]*>", "", gpt_response)
                await message.reply(f"GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:\n\n{clean_resp}", parse_mode=None)

        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É OpenAI API: {e}")
            await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT.", parse_mode=None)


@dp.errors()
async def global_error_handler(event: Any, exception: Exception) -> Any:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–Ω—è—Ç–∫—ñ–≤. –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º—É—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
    :param event: –ü–æ–¥—ñ—è, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–∞ –ø–æ–º–∏–ª–∫—É.
    :param exception: –í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫.
    """
    logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {exception}", exc_info=True)
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        await dp.start_polling(bot)
    except Exception as exc:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É polling: {exc}", exc_info=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (KeyboardInterrupt/SystemExit)")
