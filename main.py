"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.
–î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è –∑ "–≤–∞—É-–µ—Ñ–µ–∫—Ç–æ–º" —Ç–∞ –æ–ø–∏—Å–æ–º –≤—ñ–¥ –®–Ü.
–ú–æ–¥–µ–ª—ñ GPT –∂–æ—Ä—Å—Ç–∫–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ –∫–æ–¥—ñ. –û–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è /go —Ç–∞ Vision.
–†–ï–í–û–õ–Æ–¶–Ü–ô–ù–ò–ô –ü–†–û–ú–ü–¢ v3.0 –¥–ª—è –Ω–∞–¥—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∞–Ω–≥—ñ–≤ —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4o-mini (Vision) + gpt-4.1 (Text)
Author: MLBB-BOSS | Date: 2025-05-26 | Vision Prompt v3.0
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any, List, Union

import base64
import json
import html

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
import aiohttp
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

logger.info("üéØ –ú–æ–¥–µ–ª—å –¥–ª—è Vision (–∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤): gpt-4o-mini (Vision Prompt v3.0)")
logger.info("üí¨ –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π (/go, –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): gpt-4.1")

# === –°–¢–ê–ù–ò FSM –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
class VisionAnalysisStates(StatesGroup):
    awaiting_profile_screenshot = State()
    awaiting_analysis_trigger = State()

# === –ü–†–û–ú–ü–¢–ò ===

# –†–ï–í–û–õ–Æ–¶–Ü–ô–ù–ò–ô –ü–†–û–ú–ü–¢ –¥–ª—è Vision API v3.0 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
PROFILE_SCREENSHOT_PROMPT = """
üéØ –¢–ò ‚Äî –ï–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–Ü–¢–ò–ö MOBILE LEGENDS: BANG BANG üéØ

–ì–û–õ–û–í–ù–ê –ú–Ü–°–Ü–Ø: –ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–¥—Ç–æ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è —Ç–∞ –≤–∏—Ç—è–≥—Ç–∏ –ú–ê–ö–°–ò–ú–£–ú —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª–∞.

=== –ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–Ü–ó–£ (–ü–û–ö–†–û–ö–û–í–û) ===

üîç –ö–†–û–ö 1: –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –¢–ò–ü–£ –°–ö–†–Ü–ù–®–û–¢–ê
- –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω –ø—Ä–æ—Ñ—ñ–ª—é MLBB (–Ω–µ –º–∞—Ç—á, –Ω–µ –º–∞–≥–∞–∑–∏–Ω, –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
- –®—É–∫–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏: –∞–≤–∞—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è, —Ñ–æ–Ω, —Ä–∞–Ω–≥–æ–≤–∏–π –∑–Ω–∞—á–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéÆ –ö–†–û–ö 2: –Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–Ø –ù–Ü–ö–ù–ï–ô–ú–£
- –ó–Ω–∞—Ö–æ–¥—å—Å—è –∑–∞–∑–≤–∏—á–∞–π –∑–≤–µ—Ä—Ö—É, –±—ñ–ª—è –∞–≤–∞—Ç–∞—Ä–∞
- –ú–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–∑–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É: –±—ñ–ª–∏–π, –∑–æ–ª–æ—Ç–∏–π, —Å–∏–Ω—ñ–π
- –Ü–≥–Ω–æ—Ä—É–π –±—É–¥—å-—è–∫—ñ —Å–∏–º–≤–æ–ª–∏ –∫–ª–∞–Ω—ñ–≤/–≥—ñ–ª—å–¥—ñ–π

üÜî –ö–†–û–ö 3: –ü–û–®–£–ö ID –¢–ê –°–ï–†–í–ï–†–ê  
- –§–æ—Ä–º–∞—Ç: "123456789 (1234)" –∞–±–æ –ø—Ä–æ—Å—Ç–æ "123456789"
- –ó–∞–∑–≤–∏—á–∞–π –ø—ñ–¥ –Ω—ñ–∫–Ω–µ–π–º–æ–º, –º–µ–Ω—à–∏–π —à—Ä–∏—Ñ—Ç
- –ú–æ–∂–µ –±—É—Ç–∏ –≤ –¥—É–∂–∫–∞—Ö –∞–±–æ –±–µ–∑ –Ω–∏—Ö

üèÜ –ö–†–û–ö 4: –ê–ù–ê–õ–Ü–ó –ü–û–¢–û–ß–ù–û–ì–û –†–ê–ù–ì–£ (–ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï!)
–£–í–ê–ì–ê! –¶–µ –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∞ —á–∞—Å—Ç–∏–Ω–∞. –î–æ—Ç—Ä–∏–º—É–π—Å—è —Ü—å–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:

–ê) –ó–ù–ê–ô–î–ò –†–ê–ù–ì–û–í–ò–ô –ó–ù–ê–ß–û–ö (–∑–∞–∑–≤–∏—á–∞–π –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)
–ë) –í–ò–ó–ù–ê–ß –ö–ê–¢–ï–ì–û–†–Ü–Æ –†–ê–ù–ì–£:
   ‚Ä¢ WARRIOR (–í–æ—ó–Ω) - —Å—ñ—Ä–∏–π/–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π –∑–Ω–∞—á–æ–∫
   ‚Ä¢ ELITE (–ï–ª—ñ—Ç–∞) - –∑–µ–ª–µ–Ω–∏–π –∑–Ω–∞—á–æ–∫  
   ‚Ä¢ MASTER (–ú–∞–π—Å—Ç–µ—Ä) - —Å–∏–Ω—ñ–π –∑–Ω–∞—á–æ–∫
   ‚Ä¢ GRANDMASTER (–ì—Ä–∞–Ω–¥ –ú–∞–π—Å—Ç–µ—Ä) - —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π –∑–Ω–∞—á–æ–∫
   ‚Ä¢ EPIC (–ï–ø—ñ–∫) - –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π/–∑–æ–ª–æ—Ç–∏–π –∑–Ω–∞—á–æ–∫ + –†–ò–ú–°–¨–ö–Ü –¶–ò–§–†–ò (V, IV, III, II, I)
   ‚Ä¢ LEGEND (–õ–µ–≥–µ–Ω–¥–∞) - —á–µ—Ä–≤–æ–Ω–∏–π –∑–Ω–∞—á–æ–∫ + –†–ò–ú–°–¨–ö–Ü –¶–ò–§–†–ò (V, IV, III, II, I)  
   ‚Ä¢ MYTHIC (–ú—ñ—Ñ—ñ–∫) - —Ç–µ–º–Ω–æ-—Å–∏–Ω—ñ–π/—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π + –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –û–ß–û–ö
   ‚Ä¢ MYTHICAL GLORY (–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞) - –∑–æ–ª–æ—Ç–∏–π/—Ä–∞–π–¥—É–∂–Ω–∏–π + –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –ó–Ü–†–û–ö (‚òÖ)

–í) –í–ò–ó–ù–ê–ß –ü–Ü–î–†–ê–ù–ì:
   - –î–ª—è –ï–ø—ñ–∫/–õ–µ–≥–µ–Ω–¥–∞: —Ä–∏–º—Å—å–∫–∞ —Ü–∏—Ñ—Ä–∞ (V –Ω–∞–π–Ω–∏–∂—á–∏–π, I –Ω–∞–π–≤–∏—â–∏–π)
   - –î–ª—è –ú—ñ—Ñ—ñ–∫: —á–∏—Å–ª–æ –æ—á–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25 –æ—á–æ–∫, 150 –æ—á–æ–∫)
   - –î–ª—è –ú—ñ—Ñ—ñ—á–Ω–æ—ó –°–ª–∞–≤–∏: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫ (‚òÖ)

–ì) –ó–ù–ê–ô–î–ò –ü–†–û–ì–†–ï–° –£ –ü–û–¢–û–ß–ù–û–ú–£ –†–ê–ù–ó–Ü:
   - –ó—ñ—Ä–æ—á–∫–∏ (‚òÖ) –¥–ª—è –ø–æ–∫–∞–∑—É –ø—Ä–æ–≥—Ä–µ—Å—É –≤ –º–µ–∂–∞—Ö –ø—ñ–¥—Ä–∞–Ω–≥—É
   - –î–ª—è –ï–ø—ñ–∫/–õ–µ–≥–µ–Ω–¥–∞: 0-5 –∑—ñ—Ä–æ–∫
   - –õ—ñ—á–∏–ª—å–Ω–∏–∫ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä—É—á –∑—ñ –∑–Ω–∞—á–∫–æ–º –∞–±–æ –ø—ñ–¥ –Ω–∏–º

üåü –ö–†–û–ö 5: –ù–ê–ô–í–ò–©–ò–ô –†–ê–ù–ì –°–ï–ó–û–ù–£
- –®—É–∫–∞–π –Ω–∞–ø–∏—Å "Highest Rank" –∞–±–æ "–ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥"
- –ú–æ–∂–µ –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–º –±–ª–æ–∫–æ–º –ø—Ä–∞–≤–æ—Ä—É—á
- –§–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –ø–æ—Ç–æ—á–Ω–æ–º—É —Ä–∞–Ω–≥—É

‚öîÔ∏è –ö–†–û–ö 6: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–¢–ß–Ü–í
- –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤ (Total Matches)
- –ú–æ–∂–µ –±—É—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ "1,234" –∞–±–æ "1234"

üëç –ö–†–û–ö 7: –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –õ–ê–ô–ö–Ü–í  
- –ó–∞–∑–≤–∏—á–∞–π –ø–æ—Ä—É—á –∑ —ñ–∫–æ–Ω–∫–æ—é —Å–µ—Ä—Ü—è –∞–±–æ –ø–∞–ª—å—Ü—è –≤–≥–æ—Ä—É
- –ß–∏—Å–ª–æ, –º–æ–∂–µ –±—É—Ç–∏ –∑ –∫–æ–º–∞–º–∏

üõ°Ô∏è –ö–†–û–ö 8: –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–ö–í–ê–î
- –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏/–∫–ª–∞–Ω—É –ø—ñ–¥ –Ω—ñ–∫–Ω–µ–π–º–æ–º
- –ú–æ–∂–µ –º–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∞–±–æ —Ç–µ–≥–∏

üåç –ö–†–û–ö 9: –õ–û–ö–ê–¶–Ü–Ø/–†–ï–ì–Ü–û–ù
- –ù–∞–∑–≤–∞ –∫—Ä–∞—ó–Ω–∏ –∞–±–æ –º—ñ—Å—Ç–∞
- –ú–æ–∂–µ –±—É—Ç–∏ –∑ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º

=== –§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü ===
–û–ë–û–í'–Ø–ó–ö–û–í–û –ø–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–π JSON –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É:

{
  "game_nickname": "—Ç–æ—á–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è –∞–±–æ null",
  "mlbb_id_server": "ID (—Å–µ—Ä–≤–µ—Ä) –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '123456789 (1234)' –∞–±–æ null",
  "current_rank": "–¢–û–ß–ù–ò–ô –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥ –∑ —É—Å—ñ–º–∞ –¥–µ—Ç–∞–ª—è–º–∏ –∞–±–æ null",
  "highest_rank_season": "–Ω–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ —Å–µ–∑–æ–Ω—É –∞–±–æ null", 
  "matches_played": —á–∏—Å–ª–æ_–º–∞—Ç—á—ñ–≤_–∞–±–æ_null,
  "likes_received": —á–∏—Å–ª–æ_–ª–∞–π–∫—ñ–≤_–∞–±–æ_null,
  "squad_name": "–Ω–∞–∑–≤–∞ —Å–∫–≤–∞–¥—É –∞–±–æ null",
  "location": "–ª–æ–∫–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è –∞–±–æ null",
  "additional_info": {
    "avatar_border": "—Ç–∏–ø —Ä–∞–º–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∞–±–æ null",
    "title": "—Ç–∏—Ç—É–ª –≥—Ä–∞–≤—Ü—è –∞–±–æ null", 
    "vip_level": "VIP —Ä—ñ–≤–µ–Ω—å –∞–±–æ null",
    "battle_points": "–∫—ñ–ª—å–∫—ñ—Å—Ç—å BP –∞–±–æ null",
    "diamonds": "–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–º–∞–Ω—Ç—ñ–≤ –∞–±–æ null",
    "tickets": "–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –∞–±–æ null"
  }
}

=== –ü–†–ò–ö–õ–ê–î–ò –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –†–ê–ù–ì–Ü–í ===

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
- "–ï–ø—ñ–∫ V 3‚òÖ" (–ï–ø—ñ–∫ –ø'—è—Ç–∏–π —Ä—ñ–≤–µ–Ω—å, 3 –∑—ñ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—É)
- "–õ–µ–≥–µ–Ω–¥–∞ II 1‚òÖ" (–õ–µ–≥–µ–Ω–¥–∞ –¥—Ä—É–≥–∏–π —Ä—ñ–≤–µ–Ω—å, 1 –∑—ñ—Ä–∫–∞)
- "–ú—ñ—Ñ—ñ–∫ 25 –æ—á–æ–∫" (–ú—ñ—Ñ—ñ–∫ –∑ 25 –æ—á–∫–∞–º–∏)
- "–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ 150‚òÖ" (–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ –∑—ñ 150 –∑—ñ—Ä–∫–∞–º–∏)

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
- "–ï–ø—ñ–∫ X" (—Ä–∏–º—Å—å–∫–æ—ó —Ü–∏—Ñ—Ä–∏ X –≤ –ï–ø—ñ–∫—É –Ω–µ —ñ—Å–Ω—É—î)
- "–õ–µ–≥–µ–Ω–¥–∞ VII" (–º–∞–∫—Å–∏–º—É–º V —Ä—ñ–≤–Ω—ñ–≤)
- "–ú—ñ—Ñ—ñ—á–Ω–∞ –°–ª–∞–≤–∞ –æ—á–æ–∫" (–º–∞—î –±—É—Ç–∏ –∑—ñ—Ä–∫–∏ ‚òÖ)

=== –û–°–û–ë–õ–ò–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á ===

üéØ –ü–†–Ü–û–†–ò–¢–ï–¢–ò –¢–û–ß–ù–û–°–¢–Ü:
1. –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥ - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ!
2. –ù—ñ–∫–Ω–µ–π–º —Ç–∞ ID
3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

üîç –Ø–ö–©–û –©–û–°–¨ –ù–ï–ß–Ü–¢–ö–û:
- –ö—Ä–∞—â–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ null, –Ω—ñ–∂ –≤–≥–∞–¥—É–≤–∞—Ç–∏
- –Ø–∫—â–æ —Ä–∞–Ω–≥ –≤–∏–¥–Ω–æ —á–∞—Å—Ç–∫–æ–≤–æ, –æ–ø–∏—à–∏ —Ç–µ, —â–æ —Ç–æ—á–Ω–æ —Ä–æ–∑—Ä—ñ–∑–Ω—è—î—à

üö´ –ß–û–ì–û –ù–ï –†–û–ë–ò–¢–ò:
- –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –æ–∫—Ä—ñ–º JSON
- –ù–µ –≤–∏–≥–∞–¥—É–π –¥–∞–Ω—ñ, —è–∫—ñ –Ω–µ –≤–∏–¥–Ω–æ
- –ù–µ –ø–ª—É—Ç–∞–π –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –Ω–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥
- –ù–µ —ñ–≥–Ω–æ—Ä—É–π —Ä–∏–º—Å—å–∫—ñ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑—ñ—Ä–∫–∏

–ê–ù–ê–õ–Ü–ó–£–ô –†–ï–¢–ï–õ–¨–ù–û –¢–ê –ü–û–í–ï–†–¢–ê–ô –¢–û–ß–ù–ò–ô JSON! üéÆ
"""

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó "–ª—é–¥—Å—å–∫–æ–≥–æ" –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é
PROFILE_DESCRIPTION_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Å—Ç—Ä—ñ–º–µ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫ Mobile Legends, —è–∫–∏–π —Ä–æ–∑–º–æ–≤–ª—è—î –∑ –≥—Ä–∞–≤—Ü—è–º–∏ –Ω–∞ —ó—Ö–Ω—ñ–π –º–æ–≤—ñ. 
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –¥—Ä—É–∂–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≥—Ä–∞–≤—Ü—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–≥—Ä–æ–≤–∏–π —Å–ª–µ–Ω–≥.

–û—Å—å –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é:
- –ù—ñ–∫–Ω–µ–π–º: {game_nickname}
- –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥: {current_rank}
- –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ —Å–µ–∑–æ–Ω—É: {highest_rank_season}
- –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ: {matches_played}
- –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {likes_received}
- –õ–æ–∫–∞—Ü—ñ—è: {location}
- –°–∫–≤–∞–¥: {squad_name}
- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {additional_info}

–ù–∞–ø–∏—à–∏ 2-4 —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ —ñ–≥—Ä–æ–≤–∏–º —Å–ª–µ–Ω–≥–æ–º MLBB (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Ç–∞—â–µ—Ä", "—ñ–º–±–∞", "—Ñ–∞—Ä–º–∏—Ç—å", "—Ä–∞–Ω–∫ –∞–ø", "–º–µ–π–Ω"). 
–ó—Ä–æ–±–∏ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ü—ñ–∫–∞–≤–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö: –≤–∏—Å–æ–∫–∏–π —Ä–∞–Ω–≥, –±–∞–≥–∞—Ç–æ –º–∞—Ç—á—ñ–≤, –∫—Ä—É—Ç—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è.
–ì–æ–ª–æ–≤–Ω–µ ‚Äî —â–æ–± –±—É–ª–æ –¥—Ä—É–∂–Ω—å–æ, –∑ –≥—É–º–æ—Ä–æ–º —ñ –ø–æ-–≥–µ–π–º–µ—Ä—Å—å–∫–∏.

–í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî –¢–Ü–õ–¨–ö–ò —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è, –±–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å.
"""


class MLBBChatGPT:
    """
    –£–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤.
    
    –í–µ—Ä—Å—ñ—ó –º–æ–¥–µ–ª–µ–π:
    - Vision API: gpt-4o-mini (–∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤)
    - Text API: gpt-4.1 (—Ç–µ–∫—Å—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –æ–ø–∏—Å–∏)
    """
    
    def __init__(self, api_key: str) -> None:
        self.api_key: str = api_key
        self.session: Optional[ClientSession] = None
        self.class_logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=60), 
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        self.class_logger.debug("MLBBChatGPT —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and not self.session.closed:
            await self.session.close()
            self.class_logger.debug("MLBBChatGPT —Å–µ—Å—ñ—è –∑–∞–∫—Ä–∏—Ç–∞")
        if exc_type:
            self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ MLBBChatGPT: {exc_type} {exc_val}", exc_info=True)

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—É–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π /go."""
        kyiv_tz = timezone(timedelta(hours=3))
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour
        
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
                   
        return f"""–¢–∏ ‚Äî IUI, –µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang.
–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–ó–∞–≤–∂–¥–∏ –¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ —è–∫–æ—Å—Ç—ñ, –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ.

# –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()} ({current_time_kyiv.strftime('%H:%M')} –∑–∞ –ö–∏—î–≤–æ–º)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML, —Ç–æ–º—É –í–ê–ñ–õ–ò–í–û –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –í–ê–õ–Ü–î–ù–ò–ô HTML –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏ <b>, <i>, <code>).

# –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

## üéØ –°–¢–†–£–ö–¢–£–†–ê –¢–ê –ó–ú–Ü–°–¢:
1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: –ü–æ—á–∏–Ω–∞–π –∑ "{greeting}, {user_name}! üëã"
2.  **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**:
    *   –ß—ñ—Ç–∫–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Å—É—Ç—ñ –∑–∞–ø–∏—Ç—É.
    *   –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤, —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π, —Ä–æ–ª–µ–π –∞–±–æ –≥—Ä–∏ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ª—ñ–Ω—ñ—ó:
        *   –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π 2-3 –Ü–°–ù–£–Æ–ß–ò–•, –ê–ö–¢–£–ê–õ–¨–ù–ò–• –≥–µ—Ä–æ—ó–≤ Mobile Legends, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –∑–∞–ø–∏—Ç.
        *   –ö–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ –≥–µ—Ä–æ—ó —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º (—ó—Ö–Ω—ñ –∫–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏, —Ä–æ–ª—å —É –∫–æ–º–∞–Ω–¥—ñ).
        *   –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ, –∑–≥–∞–¥–∞–π –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Ü–∏—Ö –≥–µ—Ä–æ—ó–≤ –∑ —ñ–Ω—à–∏–º–∏ –∞–±–æ –ø—Ä–æ —Å–∏–Ω–µ—Ä–≥—ñ—é.
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: –î–µ–∫—ñ–ª—å–∫–∞ –¥—ñ—î–≤–∏—Ö –ø–æ—Ä–∞–¥, —â–æ —Ä–æ–±–∏—Ç–∏ –≥—Ä–∞–≤—Ü—é –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—Ö—É.
4.  **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ó–∞–≤–µ—Ä—à—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä—é—é—á–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º.

## üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–í–ê–õ–Ü–î–ù–ò–ô HTML):
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É</b>, <i>–¥–ª—è –∫—É—Ä—Å–∏–≤—É</i>, <code>–¥–ª—è –∫–æ–¥—É –∞–±–æ –Ω–∞–∑–≤ –≥–µ—Ä–æ—ó–≤/–ø—Ä–µ–¥–º–µ—Ç—ñ–≤</code>. –£–°–Ü –¢–ï–ì–ò –ü–û–í–ò–ù–ù–Ü –ë–£–¢–ò –ö–û–†–ï–ö–¢–ù–û –ó–ê–ö–†–ò–¢–Ü!
-   –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—é–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞—Ä–∫–µ—Ä–∞ "‚Ä¢ " –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (–∑ –ø—Ä–æ–±—ñ–ª–æ–º –ø—ñ—Å–ª—è –º–∞—Ä–∫–µ—Ä–∞).
-   –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é, –ª–µ–≥–∫–æ—é –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, –æ–±—Å—è–≥–æ–º –ø—Ä–∏–±–ª–∏–∑–Ω–æ 200-300 —Å–ª—ñ–≤.
-   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Ä–µ—á–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è.

## üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
-   **–ì–µ—Ä–æ—ó**: –ì–ª–∏–±–æ–∫–µ –∑–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤, —ó—Ö–Ω—ñ—Ö –º–µ—Ö–∞–Ω—ñ–∫, —Ä–æ–ª–µ–π, —Å–∏–ª—å–Ω–∏—Ö —Ç–∞ —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω, –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–ø—ñ–∫—ñ–≤.
-   **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –†–æ–∑—É–º—ñ–Ω–Ω—è –ª–∞–π–Ω—ñ–Ω–≥—É, —Ä–æ—Ç–∞—Ü—ñ–π, –∫–æ–Ω—Ç—Ä–æ–ª—é –æ–±'—î–∫—Ç—ñ–≤ (–ß–µ—Ä–µ–ø–∞—Ö–∞, –õ–æ—Ä–¥), —Ç—ñ–º—Ñ–∞–π—Ç-—Ç–∞–∫—Ç–∏–∫.
-   **–†–∞–Ω–≥—ñ–Ω–≥ —Ç–∞ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä–∞–Ω–≥—É, –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é.

## ‚ùå –£–ù–ò–ö–ê–ô:
-   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
-   –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ù–ï–ó–ê–ö–†–ò–¢–ò–• –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö HTML —Ç–µ–≥—ñ–≤.
-   –í–∏–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –≥–µ—Ä–æ—ó–≤, –º–µ—Ö–∞–Ω—ñ–∫ –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.

# –ó–ê–ü–ò–¢ –í–Ü–î {user_name}:
"{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ –≤–∏—â–µ, –æ—Å–æ–±–ª–∏–≤–æ —â–æ–¥–æ –í–ê–õ–Ü–î–ù–û–ì–û HTML —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –≥–µ—Ä–æ—ó–≤):"""

    def _beautify_response(self, text: str) -> str:
        """–û—Ñ–æ—Ä–º–ª—é—î —Ç–µ–∫—Å—Ç GPT –¥–ª—è Telegram –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º HTML —Ç–µ–≥—ñ–≤."""
        self.class_logger.debug(f"Beautify: –æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–æ–≤–∂–∏–Ω–æ—é {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –ú–∞–ø–ø—ñ–Ω–≥ –µ–º–æ–¥–∑—ñ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç", "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨",
            "–≥–µ—Ä–æ—è": "ü¶∏", "–≥–µ—Ä–æ—ó–≤": "ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ", "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù",
            "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó": "ü§ù", "—Å–∏–Ω–µ—Ä–≥—ñ—è": "‚ú®", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞": "üìä", "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è",
            "–ø–æ—Ä–∞–¥–∏": "üí°", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏": "üí°"
        }

        def replace_header(match):
            header_text = match.group(1).strip(": ").capitalize()
            best_emoji = "üí°"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
            # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫–ª—é—á—ñ–≤
            specific_keys = ["–≥–µ—Ä–æ—ó–≤", "–≥–µ—Ä–æ—è", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó", "—Å–∏–Ω–µ—Ä–≥—ñ—è", "–∫–ª—é—á–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "–ø–æ—Ç–æ—á–Ω–∞ –º–µ—Ç–∞"]
            for key in specific_keys:
                if key in header_text.lower():
                    best_emoji = header_emojis.get(key, best_emoji)
                    break
            else:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ —Å–µ—Ä–µ–¥ –∑–∞–≥–∞–ª—å–Ω–∏—Ö
                for key, emj in header_emojis.items():
                    if key in header_text.lower():
                        best_emoji = emj
                        break
            return f"\n\n{best_emoji} <b>{header_text}</b>:"

        # –ó–∞–º—ñ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        
        # –ó–∞–º—ñ–Ω–∞ —Å–ø–∏—Å–∫—ñ–≤
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*‚Ä¢\s+-\s+", "  ‚ó¶ ", text, flags=re.MULTILINE)
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        # –ó–∞–º—ñ–Ω–∞ Markdown –Ω–∞ HTML, —è–∫—â–æ GPT –≤—Å–µ –∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î
        text = re.sub(r"\*\*(?P<content>.+?)\*\*", r"<b>\g<content></b>", text)
        text = re.sub(r"\*(?P<content>.+?)\*", r"<i>\g<content></i>", text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–µ–≥—ñ–≤ <b>
        open_b_count = len(re.findall(r"<b>", text))
        close_b_count = len(re.findall(r"</b>", text))

        if open_b_count > close_b_count:
            missing_tags = open_b_count - close_b_count
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {missing_tags} –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–≥—ñ–≤ <b>. –î–æ–¥–∞—é —ó—Ö –≤ –∫—ñ–Ω–µ—Ü—å.")
            text += "</b>" * missing_tags
        elif close_b_count > open_b_count:
            self.class_logger.warning(f"Beautify: –í–∏—è–≤–ª–µ–Ω–æ {close_b_count - open_b_count} –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤ </b>.")

        self.class_logger.debug("Beautify: –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        """–û—Ç—Ä–∏–º—É—î —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /go."""
        self.class_logger.info(f"–ó–∞–ø–∏—Ç –¥–æ GPT (/go) –≤—ñ–¥ '{user_name}': '{user_query[:50]}...'")
        
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1", 
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 1000, 
            "temperature": 0.65, 
            "top_p": 0.9,
            "presence_penalty": 0.3, 
            "frequency_penalty": 0.2 
        }
        
        try:
            if not self.session or self.session.closed:
                self.class_logger.warning("–°–µ—Å—ñ—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –∑–∞–∫—Ä–∏—Ç–∞. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                self.session = ClientSession(
                    timeout=ClientTimeout(total=45), 
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
                
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): {response.status} - {error_text}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –®–Ü üòî (–∫–æ–¥: {response.status})."
                    
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (—Ç–µ–∫—Å—Ç): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –®–Ü –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ü§Ø."
                    
                raw_gpt_text = result["choices"][0]["message"]["content"]
                self.class_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT: {len(raw_gpt_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
                return self._beautify_response(raw_gpt_text)
                
        except asyncio.TimeoutError:
            self.class_logger.error(f"OpenAI API Timeout (—Ç–µ–∫—Å—Ç) –¥–ª—è: '{user_query}'")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ –®–Ü –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É ‚è≥."
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ GPT –¥–ª—è '{user_query}': {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç, {user_name} üòï."

    async def analyze_image_with_vision(self, image_base64: str, prompt: str) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Vision API v3.0.
        
        Args:
            image_base64: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ base64
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            JSON –æ–±'—î–∫—Ç –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∞–±–æ –ø–æ–º–∏–ª–∫–æ—é
        """
        self.class_logger.info("–ó–∞–ø—É—Å–∫ Vision API v3.0 –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞")
        
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {self.api_key}"}
        payload = {
            "model": "gpt-4o-mini", 
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt}, 
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                    ]
                }
            ],
            "max_tokens": 2000,  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            "temperature": 0.1   # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ
        }
        
        self.class_logger.debug(f"Vision API –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –º–æ–¥–µ–ª—å={payload['model']}, max_tokens={payload['max_tokens']}, temp={payload['temperature']}")

        try:
            if not self.session or self.session.closed:
                self.class_logger.warning("–°–µ—Å—ñ—è –¥–ª—è Vision API –∑–∞–∫—Ä–∏—Ç–∞. –°—Ç–≤–æ—Ä—é—é —Ç–∏–º—á–∞—Å–æ–≤—É —Å–µ—Å—ñ—é.")
                async with ClientSession(headers={"Authorization": f"Bearer {self.api_key}"}) as temp_session:
                    async with temp_session.post(
                        "https://api.openai.com/v1/chat/completions", 
                        headers=headers,
                        json=payload,
                        timeout=ClientTimeout(total=120)  # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º-–∞—É—Ç
                    ) as response:
                        return await self._handle_vision_response(response)
            else:
                async with self.session.post(
                    "https://api.openai.com/v1/chat/completions", 
                    headers=headers, 
                    json=payload,
                    timeout=ClientTimeout(total=120)
                ) as response:
                    return await self._handle_vision_response(response)
                    
        except asyncio.TimeoutError:
            self.class_logger.error("Vision API —Ç–∞–π–º-–∞—É—Ç —á–µ—Ä–µ–∑ 120 —Å–µ–∫—É–Ω–¥")
            return {"error": "–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π —á—ñ—Ç–∫—ñ—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç."}
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Vision API: {e}")
            return {"error": f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}"}

    async def _handle_vision_response(self, response: aiohttp.ClientResponse) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é JSON."""
        if response.status == 200:
            try:
                result = await response.json()
            except aiohttp.ContentTypeError: 
                raw_text_response = await response.text()
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î JSON. –°—Ç–∞—Ç—É—Å: {response.status}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {raw_text_response[:300]}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", "raw_response": raw_text_response}

            content = result.get("choices", [{}])[0].get("message", {}).get("content")
            if content:
                self.class_logger.info(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                
                # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                json_str = content.strip()
                
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–∏—Ö markdown –±–ª–æ–∫—ñ–≤
                json_match = re.search(r"```(?:json)?\s*([\s\S]+?)\s*```", content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(1).strip()
                
                # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                if not json_str.startswith("{"):
                    start_pos = json_str.find("{")
                    if start_pos != -1:
                        json_str = json_str[start_pos:]
                        
                if not json_str.endswith("}"):
                    end_pos = json_str.rfind("}")
                    if end_pos != -1:
                        json_str = json_str[:end_pos + 1]
                
                try:
                    parsed_json = json.loads(json_str)
                    self.class_logger.info("JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ")
                    
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö
                    cleaned_data = self._validate_and_clean_profile_data(parsed_json)
                    return cleaned_data
                    
                except json.JSONDecodeError as e:
                    self.class_logger.error(f"–ü–æ–º–∏–ª–∫–∞ JSON –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è: {e}. –†—è–¥–æ–∫: '{json_str[:300]}'")
                    return {"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API.", "raw_response": content}
            else:
                self.class_logger.error(f"Vision API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {result}")
                return {"error": "Vision API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."}
        else:
            error_text = await response.text()
            self.class_logger.error(f"Vision API –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text[:300]}")
            return {"error": f"–ü–æ–º–∏–ª–∫–∞ Vision API: {response.status}", "details": error_text[:200]}

    def _validate_and_clean_profile_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª—ñ–¥—É—î —Ç–∞ –æ—á–∏—â–∞—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ Vision API.
        
        Args:
            data: –°–∏—Ä—ñ –¥–∞–Ω—ñ –∑ Vision API
            
        Returns:
            –û—á–∏—â–µ–Ω—ñ —Ç–∞ –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        """
        cleaned = {}
        
        # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        string_fields = ["game_nickname", "mlbb_id_server", "current_rank", "highest_rank_season", "squad_name", "location"]
        for field in string_fields:
            value = data.get(field)
            if isinstance(value, str) and value.strip() and value.lower() not in ["null", "none", "–Ω/–¥", "–Ω–µ–≤—ñ–¥–æ–º–æ"]:
                cleaned[field] = value.strip()
            else:
                cleaned[field] = None
        
        # –û—á–∏—Å—Ç–∫–∞ —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        numeric_fields = ["matches_played", "likes_received"]
        for field in numeric_fields:
            value = data.get(field)
            if isinstance(value, (int, float)) and value >= 0:
                cleaned[field] = int(value)
            elif isinstance(value, str):
                # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ —É —á–∏—Å–ª–æ
                clean_str = re.sub(r'[^\d]', '', value)
                if clean_str.isdigit():
                    cleaned[field] = int(clean_str)
                else:
                    cleaned[field] = None
            else:
                cleaned[field] = None
        
        # –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        additional_info = data.get("additional_info", {})
        if isinstance(additional_info, dict):
            cleaned_additional = {}
            for key, value in additional_info.items():
                if value is not None and str(value).strip() and str(value).lower() not in ["null", "none"]:
                    cleaned_additional[key] = str(value).strip()
            if cleaned_additional:
                cleaned["additional_info"] = cleaned_additional
        
        self.class_logger.debug(f"–î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –æ—á–∏—â–µ–Ω–æ: {len(cleaned)} –ø–æ–ª—ñ–≤")
        return cleaned

    async def get_profile_description(self, user_name: str, profile_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
        self.class_logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name}'")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–º–ø—Ç—É
        additional_info_text = ""
        if "additional_info" in profile_data and profile_data["additional_info"]:
            additional_info_items = []
            for key, value in profile_data["additional_info"].items():
                additional_info_items.append(f"{key}: {value}")
            additional_info_text = ", ".join(additional_info_items)
        else:
            additional_info_text = "–ù–µ–º–∞—î"
        
        system_prompt_text = PROFILE_DESCRIPTION_PROMPT_TEMPLATE.format(
            user_name=html.escape(user_name),
            game_nickname=html.escape(str(profile_data.get("game_nickname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            current_rank=html.escape(str(profile_data.get("current_rank", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            highest_rank_season=html.escape(str(profile_data.get("highest_rank_season", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            matches_played=profile_data.get("matches_played", "N/A"),
            likes_received=profile_data.get("likes_received", "N/A"),
            location=html.escape(str(profile_data.get("location", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))),
            squad_name=html.escape(str(profile_data.get("squad_name", "–ù–µ–º–∞—î"))),
            additional_info=html.escape(additional_info_text)
        )
        
        payload = {
            "model": "gpt-4.1", 
            "messages": [{"role": "system", "content": system_prompt_text}],
            "max_tokens": 250,  # –¢—Ä–æ—Ö–∏ –∑–±—ñ–ª—å—à–µ–Ω–æ
            "temperature": 0.7,
            "top_p": 0.9,
            "presence_penalty": 0.2,
            "frequency_penalty": 0.2
        }
        
        try:
            if not self.session or self.session.closed:
                self.class_logger.warning("–°–µ—Å—ñ—è –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–∫—Ä–∏—Ç–∞. –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—é.")
                self.session = ClientSession(
                    timeout=ClientTimeout(total=30), 
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )
                
            async with self.session.post("https://api.openai.com/v1/chat/completions", json=payload) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): {response.status} - {error_text}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
                    
                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message") or not result["choices"][0]["message"].get("content"):
                    self.class_logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ (–æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é): –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - {result}")
                    return "<i>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –≤—ñ–¥ –®–Ü. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
                
                description_text = result["choices"][0]["message"]["content"].strip()
                self.class_logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é: {len(description_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
                return html.escape(description_text) 
                
        except asyncio.TimeoutError:
            self.class_logger.error("–¢–∞–π–º-–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é")
            return "<i>–û–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ... –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>" 
        except Exception as e:
            self.class_logger.exception(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–ø–∏—Å—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è '{user_name}': {e}")
            return "<i>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É. –ê–ª–µ –æ—Å—å —Ç–≤–æ—ó –¥–∞–Ω—ñ:</i>"


# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê ===
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ."""
    await state.clear() 
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start.")
    
    kyiv_tz = timezone(timedelta(hours=3))
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour
    
    greeting_msg = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
                   "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
                   "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
    emoji = "üåÖ" if 5 <= current_hour < 12 else \
            "‚òÄÔ∏è" if 12 <= current_hour < 17 else \
            "üåÜ" if 17 <= current_hour < 22 else "üåô"
    
    welcome_text = f"""
{greeting_msg}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v3.0!
–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang –∑ <b>—Ä–µ–≤–æ–ª—é—Ü—ñ–π–Ω–æ—é</b> —Å–∏—Å—Ç–µ–º–æ—é —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤!

<b>üöÄ –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ v3.0:</b>
‚Ä¢ <b>üéØ –ù–∞–¥—Ç–æ—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∞–Ω–≥—ñ–≤</b> - —Ç–µ–ø–µ—Ä —Ä–æ–∑—Ä—ñ–∑–Ω—è—é –Ω–∞–≤—ñ—Ç—å —Ä–∏–º—Å—å–∫—ñ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑—ñ—Ä–∫–∏!
‚Ä¢ <b>üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é</b> - –≤–∏—Ç—è–≥—É—é –º–∞–∫—Å–∏–º—É–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª–∞
‚Ä¢ <b>üíé –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ</b> - VIP —Ä—ñ–≤–µ–Ω—å, —Ç–∏—Ç—É–ª–∏, —Ä–∞–º–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ —Ç–∞ —ñ–Ω—à–µ

<b>üí° –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>
‚Ä¢ <b>–¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ—Ä–∞–¥–∏:</b> <code>/go —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è</code>
‚Ä¢ <b>–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é:</b> <code>/analyzeprofile</code> ‚Üí –Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç

<b>üèÜ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ <code>/go</code>:</b>
‚Ä¢ <code>/go —è–∫ —à–≤–∏–¥–∫–æ –ø—ñ–¥–Ω—è—Ç–∏—Å—è –∑ –ï–ø—ñ–∫–∞ –¥–æ –õ–µ–≥–µ–Ω–¥–∏</code>
‚Ä¢ <code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è —Å–æ–ª–æ —Ä–∞–Ω–∫–µ–¥</code>
‚Ä¢ <code>/go —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –ø—Ä–æ—Ç–∏ –§–∞–Ω–Ω—ñ</code>

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    
    try:
        await message.answer(welcome_text)
        logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è v3.0 –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è {user_name}")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}: {e}")


@dp.message(Command("go"))
async def cmd_go(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /go –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤."""
    await state.clear()
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑—Ä–æ–±–∏–≤ –∑–∞–ø–∏—Ç –∑ /go: '{user_query[:50]}...'")
    
    if not user_query:
        logger.info(f"–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç /go –≤—ñ–¥ {user_name}")
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è <code>/go</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "‚Ä¢ <code>/go –Ω–∞–π–∫—Ä–∞—â—ñ –≥–µ—Ä–æ—ó –¥–ª—è –º—ñ–¥—É</code>\n"
            "‚Ä¢ <code>/go —è–∫ –∫–æ–Ω—Ç—Ä–∏—Ç–∏ –ê–ª–¥–æ—É—Å–∞</code>"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —Ç–∞ –ø—ñ–¥–±–∏—Ä–∞—é –≥–µ—Ä–æ—ó–≤...",
        f"üß† –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, {user_name}, —â–æ–± –¥–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ, {user_name}!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Ç–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É!"
    ]
    thinking_msg_text = thinking_messages[int(time.time()) % len(thinking_messages)]
    
    thinking_msg: Optional[Message] = None
    try:
        thinking_msg = await message.reply(thinking_msg_text)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ thinking_msg –¥–ª—è {user_name}: {e}")

    start_time = time.time()
    response_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    
    try:
        async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
            response_text = await gpt.get_response(user_name, user_query)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ MLBBChatGPT –¥–ª—è '{user_query}' –≤—ñ–¥ {user_name}: {e}")

    processing_time = time.time() - start_time
    logger.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ /go –¥–ª—è {user_name}: {processing_time:.2f}—Å")

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v3.0 GPT-4.1</i>" 
    
    full_response_to_send = f"{response_text}{admin_info}"

    try:
        if thinking_msg: 
            await thinking_msg.edit_text(full_response_to_send)
        else: 
            await message.reply(full_response_to_send)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å /go –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ /go –¥–ª—è {user_name}: {e}")
        if "can't parse entities" in str(e).lower():
            # Fallback –¥–ª—è HTML –ø–æ–º–∏–ª–æ–∫
            plain_text_response = re.sub(r"<[^>]+>", "", response_text) 
            fallback_message = f"{plain_text_response}{admin_info}\n\n<i>(–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML. –ü–æ–∫–∞–∑–∞–Ω–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç.)</i>"
            try:
                if thinking_msg: 
                    await thinking_msg.edit_text(fallback_message, parse_mode=None)
                else: 
                    await message.reply(fallback_message, parse_mode=None)
            except Exception as plain_e: 
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç /go –¥–ª—è {user_name}: {plain_e}")
        else:
            try: 
                await message.reply(f"–í–∏–±–∞—á, {user_name}, –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", parse_mode=None)
            except Exception as final_e: 
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è {user_name}: {final_e}")


# === –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –°–ö–†–Ü–ù–®–û–¢–Ü–í ===

@dp.message(Command("analyzeprofile"))
async def cmd_analyze_profile(message: Message, state: FSMContext):
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {message.from_user.id}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ /analyzeprofile")
    
    await state.set_state(VisionAnalysisStates.awaiting_profile_screenshot)
    
    await message.reply(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
        "üéØ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Mobile Legends –¥–ª—è <b>–¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É v3.0</b>!\n\n"
        "<b>üî• –©–æ –Ω–æ–≤–æ–≥–æ –≤ v3.0:</b>\n"
        "‚Ä¢ –ù–∞–¥—Ç–æ—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∞–Ω–≥—ñ–≤ —Ç–∞ –ø—ñ–¥—Ä–∞–Ω–≥—ñ–≤\n"
        "‚Ä¢ –í–∏—è–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (VIP, —Ç–∏—Ç—É–ª–∏, –¥—ñ–∞–º–∞–Ω—Ç–∏)\n"
        "‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é\n\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel."
    )


@dp.message(VisionAnalysisStates.awaiting_profile_screenshot, F.photo)
async def handle_profile_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é."""
    bot_instance = message.bot
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –≤—ñ–¥ {user_name} (ID: {message.from_user.id})")

    if not message.photo: 
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω—à–æ—Ç).")
        return

    photo_file_id = message.photo[-1].file_id
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏
    try:
        await message.delete() 
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –≤–∏–¥–∞–ª–µ–Ω–æ")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º: {e}")

    await state.update_data(vision_photo_file_id=photo_file_id, original_user_name=user_name)
    
    caption_text = "üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ—Ñ—ñ–ª—é –æ—Ç—Ä–∏–º–∞–Ω–æ!\nüéØ <b>Vision API v3.0</b> –≥–æ—Ç–æ–≤–∏–π –¥–æ –∞–Ω–∞–ª—ñ–∑—É.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –ê–Ω–∞–ª—ñ–∑¬ª –¥–ª—è –∑–∞–ø—É—Å–∫—É."
    
    analyze_button = InlineKeyboardButton(text="üîç –ê–Ω–∞–ª—ñ–∑ v3.0", callback_data="trigger_vision_analysis")
    delete_preview_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_bot_message") 
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[analyze_button, delete_preview_button]])
    
    try:
        sent_message = await bot_instance.send_photo(
            chat_id=chat_id,
            photo=photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
        await state.update_data(bot_message_id_for_analysis=sent_message.message_id)
        await state.set_state(VisionAnalysisStates.awaiting_analysis_trigger)
        logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ {user_name} –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –±–æ—Ç–æ–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏ v3.0")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {e}")
        await bot_instance.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()


@dp.callback_query(F.data == "trigger_vision_analysis", VisionAnalysisStates.awaiting_analysis_trigger)
async def trigger_vision_analysis_callback(callback_query: CallbackQuery, state: FSMContext):
    """–í–∏–∫–æ–Ω—É—î –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Vision API v3.0."""
    bot_instance = callback_query.bot
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    
    try:
        await callback_query.message.edit_caption(
            caption="‚è≥ –ê–Ω–∞–ª—ñ–∑—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é <b>Vision API v3.0</b>...\n"
                   "üß† –û–±—Ä–æ–±–ª—è—é –¥–µ—Ç–∞–ª—ñ —Ä–∞–Ω–≥—É —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...\n"
                   "üé® –ì–µ–Ω–µ—Ä—É—é –¥—Ä—É–∂–Ω—ñ–π –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é...",
            reply_markup=None
        )
        await callback_query.answer("üöÄ –ó–∞–ø—É—â–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ v3.0...")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º: {e}")

    user_data = await state.get_data()
    photo_file_id = user_data.get("vision_photo_file_id")
    user_name = user_data.get("original_user_name", "–ì—Ä–∞–≤–µ—Ü—å")

    if not photo_file_id:
        logger.error("File_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        try:
            await callback_query.message.edit_caption(
                caption="‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —â–µ —Ä–∞–∑.", 
                reply_markup=None
            )
        except TelegramAPIError: 
            pass
        await state.clear()
        return

    final_caption_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üòî"
    structured_data_text = ""
    profile_description = ""

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Telegram
        file_info = await bot_instance.get_file(photo_file_id)
        if not file_info.file_path:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –≤ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        
        downloaded_file_io = await bot_instance.download_file(file_info.file_path)
        if downloaded_file_io is None:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
            
        image_bytes = downloaded_file_io.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        async with MLBBChatGPT(OPENAI_API_KEY) as gpt_analyzer:
            # –ê–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Vision API v3.0
            analysis_result_json = await gpt_analyzer.analyze_image_with_vision(image_base64, PROFILE_SCREENSHOT_PROMPT) 
            
            if analysis_result_json and "error" not in analysis_result_json:
                logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ñ—ñ–ª—é v3.0 –¥–ª—è {user_name}: {len(analysis_result_json)} –ø–æ–ª—ñ–≤")
                
                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                response_parts = [f"<b>üéØ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é v3.0, {user_name}:</b>"]
                
                # –ú–∞–ø–ø—ñ–Ω–≥ –ø–æ–ª—ñ–≤ –∑ –µ–º–æ–¥–∑—ñ
                fields_translation = {
                    "game_nickname": "üéÆ –ù—ñ–∫–Ω–µ–π–º", 
                    "mlbb_id_server": "üÜî ID (–°–µ—Ä–≤–µ—Ä)",
                    "current_rank": "üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–Ω–≥", 
                    "highest_rank_season": "üåü –ù–∞–π–≤–∏—â–∏–π —Ä–∞–Ω–≥ (—Å–µ–∑–æ–Ω)",
                    "matches_played": "‚öîÔ∏è –ú–∞—Ç—á—ñ–≤ –∑—ñ–≥—Ä–∞–Ω–æ", 
                    "likes_received": "üëç –õ–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ",
                    "squad_name": "üõ°Ô∏è –°–∫–≤–∞–¥", 
                    "location": "üåç –õ–æ–∫–∞—Ü—ñ—è"
                }
                
                has_data = False
                for key, readable_name in fields_translation.items():
                    value = analysis_result_json.get(key)
                    if value is not None: 
                        display_value = str(value)
                        
                        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–∞–Ω–≥—ñ–≤
                        if "rank" in key and ("‚òÖ" in display_value or "–∑—ñ—Ä–æ–∫" in display_value.lower() or "—Å–ª–∞–≤–∞" in display_value.lower()):
                            if "‚òÖ" not in display_value:
                                display_value = display_value.replace("–∑—ñ—Ä–æ–∫", "‚òÖ").replace("–∑—ñ—Ä–∫–∏", "‚òÖ")
                            display_value = re.sub(r'\s+‚òÖ', '‚òÖ', display_value)
                        
                        response_parts.append(f"<b>{readable_name}:</b> {html.escape(display_value)}")
                        has_data = True
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è v3.0
                additional_info = analysis_result_json.get("additional_info", {})
                if isinstance(additional_info, dict) and additional_info:
                    response_parts.append("\n<b>üíé –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è v3.0:</b>")
                    for key, value in additional_info.items():
                        if value:
                            key_readable = key.replace("_", " ").title()
                            response_parts.append(f"‚Ä¢ <b>{key_readable}:</b> {html.escape(str(value))}")
                
                if not has_data:
                    response_parts.append("\n<i>üòî –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —á—ñ—Ç–∫—ñ—à–∏–π –∑–Ω—ñ–º–æ–∫ –ø—Ä–æ—Ñ—ñ–ª—é.</i>")
                
                structured_data_text = "\n".join(response_parts)

                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥—Ä—É–∂–Ω—å–æ–≥–æ –æ–ø–∏—Å—É
                profile_description = await gpt_analyzer.get_profile_description(user_name, analysis_result_json)
                final_caption_text = f"{profile_description}\n\n{structured_data_text}"

            else: 
                error_msg = analysis_result_json.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É') if analysis_result_json else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Vision API –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞'
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ñ—ñ–ª—é v3.0 –¥–ª—è {user_name}: {error_msg}")
                final_caption_text = f"üòî –í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ v3.0.\n<i>–ü–æ–º–∏–ª–∫–∞: {html.escape(error_msg)}</i>"

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_name}: {e}")
        final_caption_text = f"üòû –î—É–∂–µ —à–∫–æ–¥–∞, {user_name}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    delete_button = InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑", callback_data="delete_bot_message")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])
    
    try:
        await bot_instance.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=final_caption_text,
            reply_markup=keyboard
        )
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É v3.0 –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–ª—è {user_name}")
    except TelegramAPIError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É: {e}. –ù–∞–¥—Å–∏–ª–∞—é –Ω–æ–≤–µ.")
        try:
            await bot_instance.send_photo(
                chat_id=chat_id, 
                photo=photo_file_id, 
                caption=final_caption_text, 
                reply_markup=keyboard
            )
        except Exception as send_err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º: {send_err}")
            await bot_instance.send_message(chat_id, final_caption_text)

    await state.clear()


@dp.callback_query(F.data == "delete_bot_message")
async def delete_bot_message_callback(callback_query: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É."""
    try:
        await callback_query.message.delete()
        await callback_query.answer("üóëÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        
        current_state = await state.get_state()
        if current_state == VisionAnalysisStates.awaiting_analysis_trigger.state:
            logger.info("–ü—Ä–µ–≤ º—é –∞–Ω–∞–ª—ñ–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
