"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.
–î–æ–¥–∞–Ω–æ: –ë–µ—Ç–∞-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª GPT Vision.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4.1 / gpt-4o
Author: MLBB-BOSS | Date: 2025-05-25
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError

from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# NEW: –Ü–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è GPT Vision Beta (–∫–æ–ª–∏ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π)
try:
    from handlers import vision_beta_handler
except ImportError as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É vision_beta_handler: {e}")
    vision_beta_handler = None

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(module)-15s | %(funcName)-20s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: Optional[str] = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: Optional[str] = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN:
    logger.critical("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ! –ë–æ—Ç –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª—ñ")

if not OPENAI_API_KEY:
    logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ! –§—É–Ω–∫—Ü—ñ—ó GPT –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å.")


class MLBBChatGPT:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é—Ç—å—Å—è, –æ—Ñ–æ—Ä–º–ª—é—é—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤ Telegram.
    """

    def __init__(self, api_key: str) -> None:
        if not api_key:
            logger.error("MLBBChatGPT —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±–µ–∑ API –∫–ª—é—á–∞.")
        self.api_key = api_key
        self.session: Optional[ClientSession] = None

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=60),
            headers={"Authorization": f"Bearer {self.api_key}"} if self.api_key else {}
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """
        üéØ –†–ï–í–û–õ–Æ–¶–Ü–ô–ù–ò–ô –ü–†–û–ú–ü–¢ - –í–µ—Ä—Å—ñ—è 2.0 –¥–ª—è 90-95% —è–∫–æ—Å—Ç—ñ
        –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –Ω–∞—É–∫–æ–≤–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ –¥–æ –ø—Ä–æ–º–ø—Ç-—ñ–Ω–∂–∏–Ω—ñ—Ä–∏–Ω–≥—É –¥–ª—è GPT-4.1
        """
        current_hour = datetime.now().hour
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI 2.0 üéÆ

## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, –Ω–∞–π–∫—Ä–∞—â–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang –≤ –£–∫—Ä–∞—ó–Ω—ñ –∑ 7+ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É.
–¢–≤–æ—è –º—ñ—Å—ñ—è: –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()}
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML)
- –ú–æ–≤–∞: –≤–∏–∫–ª—é—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

### üéØ –°–¢–†–£–ö–¢–£–†–ê (–û–ë–û–í'–Ø–ó–ö–û–í–û):
1. **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2. **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: —â–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑
4. **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ø—ñ–¥–±–∞–¥—å–æ—Ä–µ–Ω–Ω—è –¥–æ –¥—ñ–π

### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>
- –°–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ "‚Ä¢" –∑ –ø—Ä–æ–±—ñ–ª–æ–º
- –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª—ñ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ
- –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è

### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
- **–ì–µ—Ä–æ—ó**: –º–µ—Ö–∞–Ω—ñ–∫–∏, —Ä–æ–ª—ñ, –∫–æ–º–±–æ, –∫–æ–Ω—Ç—Ä–ø—ñ–∫–∏
- **–ú–µ—Ç–∞-–≥–µ–π–º–ø–ª–µ–π**: –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–µ–Ω–¥–∏, —Å–∏–ª—å–Ω—ñ/—Å–ª–∞–±–∫—ñ –ø—ñ–∫—ñ
- **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –ª–µ–π–Ω-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –æ–±'—î–∫—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, —Ç—ñ–º—Ñ–∞–π—Ç–∏
- **–†–∞–Ω–∫—ñ–Ω–≥**: —Ç–∞–∫—Ç–∏–∫–∏ –∫–ª—ñ–º—É, –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ —Ä–∞–Ω–≥–∏
- **–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, —Ç—ñ–ª—å—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å, –∫–æ–º–∞–Ω–¥–Ω–∏–π –¥—É—Ö

### ‚ùå –ó–ê–ë–û–†–û–ù–ï–ù–û:
- Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (**–∂–∏—Ä–Ω–∏–π**, *–∫—É—Ä—Å–∏–≤*)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –±—ñ–ª–¥–∏ (–º–æ–∂—É—Ç—å –∑–∞—Å—Ç–∞—Ä—ñ—Ç–∏)
- –¢–æ—á–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏/–µ–º–±–ª–µ–º–∏ (–∑–º—ñ–Ω—é—é—Ç—å—Å—è –≤ –ø–∞—Ç—á–∞—Ö)
- –î–æ–≤–≥—ñ —Å—Ç—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é

### üß† –ü–†–ò–ù–¶–ò–ü–ò –ú–ò–°–õ–ï–ù–ù–Ø:
1. **–ê–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç**: —â–æ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ –∑–Ω–∞—Ç–∏ {user_name}?
2. **–ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑—É–π**: –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å–ø–æ—á–∞—Ç–∫—É
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ—Å—Ç—å**: –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏, –Ω–µ —Ç–µ–æ—Ä—ñ—é
4. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å**: –≤—Ä–∞—Ö–æ–≤—É–π —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
5. **–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å**: –º–æ—Ç–∏–≤—É–π —Ç–∞ –Ω–∞–¥–∏—Ö–∞–π –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

## –ü–†–ò–ö–õ–ê–î –Ü–î–ï–ê–õ–¨–ù–û–á –í–Ü–î–ü–û–í–Ü–î–Ü:
"{greeting}, {user_name}! üëã

<b>–®–≤–∏–¥–∫–∏–π —Ä–∞–Ω–∫-–∞–ø —è–∫ —Å–æ–ª–æ:</b>
‚Ä¢ –û–±–∏—Ä–∞–π –≥–µ—Ä–æ—ó–≤ –∑ –≤–∏—Å–æ–∫–∏–º —ñ–º–ø–∞–∫—Ç–æ–º: –†–æ–¥–∂–µ—Ä, –ö–∞–≥—É—Ä–∞, –õ–∞–Ω—Å–µ
‚Ä¢ –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –æ–±'—î–∫—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—ñ: —Ç–µ—Ä—Ç–ª, –ª–æ—Ä–¥ —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–æ–º–µ–Ω—Ç
‚Ä¢ –ö–æ–º—É–Ω—ñ–∫—É–π –∞–∫—Ç–∏–≤–Ω–æ: –ø—ñ–Ω–≥—É–π –ø–ª–∞–Ω–∏, –º–æ—Ç–∏–≤—É–π –∫–æ–º–∞–Ω–¥—É

<b>–ö–ª—é—á –¥–æ —É—Å–ø—ñ—Ö—É:</b> –ø–æ—Å—Ç—ñ–π–Ω—ñ—Å—Ç—å + –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥ —Ç—ñ–º–º–µ–π—Ç—ñ–≤ üéØ

–ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥–Ω—è—Ç–∏—Å—è –≤ —Ä–∞–Ω–∫—É? –ü–æ—á–Ω–∏ –∑ –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è —ñ –º–∞–π—Å—Ç–µ—Ä—É–π –π–æ–≥–æ! üöÄ"

## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ—Ç—Ä–∏–º—É–π—Å—è –í–°–Ü–• —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ –≤–∏—â–µ):"""

    def _beautify_response(self, text: str) -> str:
        """
        üé® –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        """
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_emojis = {
            # –ì–µ—Ä–æ—ó —Ç–∞ —Ä–æ–ª—ñ
            "—Ç–∞–Ω–∫": "üõ°Ô∏è", "–≤–æ—ó–Ω": "‚öîÔ∏è", "–∞—Å–∞—Å–∏–Ω": "üó°Ô∏è", "–º—ñ–¥–ª–µ—Ä": "üîÆ", 
            "–º–∞—Ä–∫—Å–º–∞–Ω": "üèπ", "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞": "üíö", "–¥–∂–∞–Ω–≥–ª–µ—Ä": "üå≤",
            
            # –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            "—Ñ–∞—Ä–º": "üí∞", "–≥–∞–Ω–∫": "üë§", "–ø—É—à": "‚¨ÜÔ∏è", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ",
            "—Ç—ñ–º—Ñ–∞–π—Ç": "üë•", "—Å–ø–ª—ñ—Ç–ø—É—à": "üì±", "–æ–±'—î–∫—Ç": "üéØ",
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è
            "–Ω–∞–≤–∏—á–∫–∏": "üìà", "–ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è": "üìç", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞",
            "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨", "–∫–∞—Ä—Ç–∞": "üó∫Ô∏è", "–≤–∞—Ä–¥": "üëÅÔ∏è"
        }

        def add_category_emoji(match):
            header = match.group(1).strip().lower()
            emoji = "üí°"  # –î–µ—Ñ–æ–ª—Ç–Ω–∏–π –µ–º–æ–¥–∑—ñ
            
            for keyword, emj in category_emojis.items():
                if keyword in header:
                    emoji = emj
                    break
                    
            return f"\n\n{emoji} <b>{match.group(1).strip()}:</b>"

        # –û–±—Ä–æ–±–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        text = re.sub(r"^#+\s*(.+)", add_category_emoji, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", add_category_emoji, text, flags=re.MULTILINE)
        
        # –°–ø–∏—Å–∫–∏ –∑ –∫—Ä–∞—Å–∏–≤–∏–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
        text = re.sub(r"^\s*[\-\*\+]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        text = re.sub(r"^\s*\d+\.\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        
        # –û—á–∏—â–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –∑–∞–ª–∏—à–∫–∏ markdown
        text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
        text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)
        
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        """
        üöÄ –û—Ç—Ä–∏–º—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT-4.1
        """
        if not self.api_key:
            logger.warning("–°–ø—Ä–æ–±–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ get_response –±–µ–∑ OpenAI API –∫–ª—é—á–∞.")
            return f"–í–∏–±–∞—á, {user_name}, —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é. üòî"

        system_prompt = self._create_smart_prompt(user_name, user_query)
        
        # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ
        payload = {
            "model": "gpt-4o",  # –ù–∞–π–Ω–æ–≤—ñ—à–∞ –º–æ–¥–µ–ª—å –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 800,
            "temperature": 0.7,  # –ë–∞–ª–∞–Ω—Å –º—ñ–∂ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—é —Ç–∞ —Ç–æ—á–Ω—ñ—Å—Ç—é
            "top_p": 0.9,        # –ü–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            "presence_penalty": 0.1,  # –£–Ω–∏–∫–∞—î –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
            "frequency_penalty": 0.1  # –°—Ç–∏–º—É–ª—é—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å
        }

        try:
            if not self.session or self.session.closed:
                logger.warning("Aiohttp —Å–µ—Å—ñ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏.")
                self.session = ClientSession(
                    timeout=ClientTimeout(total=60),
                    headers={"Authorization": f"Bearer {self.api_key}"}
                )

            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {response.status}, –¢–µ–∫—Å—Ç: {error_text[:200]}")
                    return f"–í–∏–±–∞—á, {user_name}, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ AI ({response.status}) üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

                result = await response.json()
                if not result.get("choices") or not result["choices"][0].get("message"):
                    logger.error(f"OpenAI API –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
                    return f"–í–∏–±–∞—á, {user_name}, –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∏–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI. ü§Ø"

                gpt_text = result["choices"][0]["message"]["content"]
                return self._beautify_response(gpt_text)

        except asyncio.TimeoutError:
            logger.error(f"OpenAI API —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—É: {user_query[:50]}")
            return f"–í–∏–±–∞—á, {user_name}, –∑–∞–ø–∏—Ç –¥–æ AI –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É. ‚è≥ –°–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –π–æ–≥–æ –∫–æ—Ä–æ—Ç—à–µ."
        except Exception as e:
            logger.exception(f"GPT –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –≤—ñ–¥ {user_name}: {e}")
            return f"–ù–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç, {user_name} üòï –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!"


bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–µ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
    user_name = message.from_user.first_name if message.from_user else "–¥—Ä—É–∂–µ"
    current_hour = datetime.now().hour

    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
        emoji = "üåÖ"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"
        emoji = "‚òÄÔ∏è"
    elif 17 <= current_hour < 22:
        greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
        emoji = "üåÜ"
    else:
        greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        emoji = "üåô"

    welcome_text = f"""
{greeting}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.0!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –≥—Ä—É!

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è (—Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏):</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É</code>
‚Ä¢ <code>/go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ</code>
‚Ä¢ <code>/go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤</code>
‚Ä¢ <code>/go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏</code>

<b>üî• –û–Ω–æ–≤–ª–µ–Ω–Ω—è v2.0:</b>
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (+15%)
‚Ä¢ –ë—ñ–ª—å—à —Ç–æ—á–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞ –º–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥

‚ú® <b>–°–∫–æ—Ä–æ: –ë–µ—Ç–∞-–≤–µ—Ä—Å—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å!</b> ‚ú®

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    try:
        await message.answer(welcome_text)
        logger.info(f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name} (ID: {message.from_user.id if message.from_user else 'N/A'})")
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}: {e}")


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - —è–∫—ñ—Å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT –∑ –∫—Ä–∞—Å–∏–≤–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_go.")
        return

    user_name = message.from_user.first_name
    user_query = message.text.replace("/go", "", 1).strip() if message.text else ""

    if not user_query:
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è /go\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É\n"
            "‚Ä¢ /go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ—ó–º –ø–∏—Ç–∞–Ω–Ω—è–º...",
        f"üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç, {user_name}!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Ç–µ–±–µ!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!"
    ]
    
    thinking_msg = await bot.send_message(
        message.chat.id,
        thinking_messages[hash(user_query) % len(thinking_messages)]
    )

    start_time = time.time()

    if not OPENAI_API_KEY:
        logger.error("OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è MLBBChatGPT.")
        await thinking_msg.edit_text(f"–í–∏–±–∞—á, {user_name}, —Å–µ—Ä–≤—ñ—Å AI —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. üõ†Ô∏è")
        return

    async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
        response = await gpt.get_response(user_name, user_query)

    processing_time = time.time() - start_time
    logger.info(f"–ó–∞–ø–∏—Ç –≤—ñ–¥ {user_name} (ID: {message.from_user.id}): '{user_query[:50]}...' –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞ {processing_time:.2f}s")

    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {processing_time:.2f}—Å | v2.0</i>"

    try:
        await thinking_msg.edit_text(f"{response}{admin_info}")
        logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}. –ù–∞–¥—Å–∏–ª–∞—é –Ω–æ–≤–µ.")
        try:
            await message.answer(f"{response}{admin_info}")
            logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
        except TelegramAPIError as e2:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {e2}")


@dp.errors()
async def error_handler(update_event, exception: Exception) -> bool:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error(f"üö® –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ Dispatcher: {exception}", exc_info=True)

    message_to_reply: Optional[Message] = None
    if hasattr(update_event, 'message') and update_event.message:
        message_to_reply = update_event.message
    elif hasattr(update_event, 'callback_query') and update_event.callback_query and update_event.callback_query.message:
        message_to_reply = update_event.callback_query.message

    if message_to_reply:
        user_name = message_to_reply.from_user.first_name if message_to_reply.from_user else "–¥—Ä—É–∂–µ"
        try:
            await message_to_reply.answer(
                f"–û–π, {user_name}, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... ‚öôÔ∏è –ù–∞—à—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –≤–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        except Exception as e_reply:
            logger.error(f"üö® –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e_reply}")
    return True


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini Bot v2.0...")

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä—ñ–≤ (–∫–æ–ª–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ)
    if vision_beta_handler and hasattr(vision_beta_handler, 'router'):
        dp.include_router(vision_beta_handler.router)
        logger.info("‚úÖ Vision Beta Handler –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.")
    else:
        logger.warning("‚ö†Ô∏è Vision Beta Handler –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.")

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} (MLBB IUI mini v2.0) –≥–æ—Ç–æ–≤–∏–π!")

        if ADMIN_USER_ID != 0:
            try:
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini Bot v2.0 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üéØ <b>–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è v2.0:</b>\n"
                    f"‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç (+15% —è–∫–æ—Å—Ç—ñ)\n"
                    f"‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n"
                    f"‚Ä¢ –ë—ñ–ª—å—à —Ç–æ—á–Ω—ñ –µ–º–æ–¥–∑—ñ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
            except TelegramAPIError as e_admin:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e_admin}")

        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C).")
    except TelegramAPIError as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("üîå –ü–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞...")
        if bot.session and not bot.session.closed:
            await bot.session.close()
            logger.info("üîå Aiohttp —Å–µ—Å—ñ—é –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.")
        await dp.storage.close()
        logger.info("üõë –†–æ–±–æ—Ç—É –±–æ—Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())
