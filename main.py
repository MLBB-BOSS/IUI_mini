"""
MLBB IUI mini - –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é GPT —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: —Ä–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ Mobile Legends Bang Bang.

Python 3.11+ | aiogram 3.19+ | OpenAI gpt-4.1
Author: MLBB-BOSS | Date: 2025-05-25
"""

import asyncio
import logging
import os
import re
import time
from datetime import datetime, timezone, timedelta  # –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import ClientSession, ClientTimeout
from dotenv import load_dotenv

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID: int = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")


class MLBBChatGPT:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π GPT –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è MLBB –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é—Ç—å—Å—è, –æ—Ñ–æ—Ä–º–ª—é—é—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –≤ Telegram.
    """

    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.session: Optional[ClientSession] = None

    async def __aenter__(self):
        self.session = ClientSession(
            timeout=ClientTimeout(total=30),
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    def _create_smart_prompt(self, user_name: str, user_query: str) -> str:
        """
        üöÄ –†–ï–í–û–õ–Æ–¶–Ü–ô–ù–ò–ô –ü–†–û–ú–ü–¢ v2.0 - –ù–∞—É–∫–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ 90-95% —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        """
        kyiv_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
        current_time_kyiv = datetime.now(kyiv_tz)
        current_hour = current_time_kyiv.hour

        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É" if 5 <= current_hour < 12 else \
            "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è" if 12 <= current_hour < 17 else \
            "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞" if 17 <= current_hour < 22 else "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

        return f"""# –°–ò–°–¢–ï–ú–ê: MLBB –ï–ö–°–ü–ï–†–¢ IUI v2.0 üéÆ

## –ü–†–û–§–Ü–õ–¨ –ê–°–ò–°–¢–ï–ù–¢–ê
–¢–∏ - IUI, –Ω–∞–π–∫—Ä–∞—â–∏–π AI-–µ–∫—Å–ø–µ—Ä—Ç Mobile Legends Bang Bang –≤ –£–∫—Ä–∞—ó–Ω—ñ –∑ 7+ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É.
–¢–≤–æ—è –º—ñ—Å—ñ—è: –Ω–∞–¥–∞–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {user_name} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω—ñ, —Ç–æ—á–Ω—ñ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

## –ö–û–ù–¢–ï–ö–°–¢ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}
- –ß–∞—Å: {greeting.lower()}
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram (–ø—ñ–¥—Ç—Ä–∏–º—É—î HTML)
- –ú–æ–≤–∞: –≤–∏–∫–ª—é—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

## –°–¢–ê–ù–î–ê–†–¢–ò –Ø–ö–û–°–¢–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô

### üéØ –û–ë–û–í'–Ø–ó–ö–û–í–ê –°–¢–†–£–ö–¢–£–†–ê:
1. **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è**: "{greeting}, {user_name}! üëã"
2. **–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏**: —â–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑
4. **–ú–æ—Ç–∏–≤–∞—Ü—ñ—è**: –ø—ñ–¥–±–∞–¥—å–æ—Ä–µ–Ω–Ω—è –¥–æ –¥—ñ–π

### üìù –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>
- –°–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ "‚Ä¢" –∑ –ø—Ä–æ–±—ñ–ª–æ–º
- –ú–∞–∫—Å–∏–º—É–º 200-250 —Å–ª—ñ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ
- –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è

### üéÆ –ï–ö–°–ü–ï–†–¢–ò–ó–ê MLBB:
- **–ì–µ—Ä–æ—ó**: –º–µ—Ö–∞–Ω—ñ–∫–∏, —Ä–æ–ª—ñ, –∫–æ–º–±–æ, –∫–æ–Ω—Ç—Ä–ø—ñ–∫–∏, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –º–µ—Ç–∞
- **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó**: –ª–µ–π–Ω-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –æ–±'—î–∫—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, —Ç—ñ–º—Ñ–∞–π—Ç–∏
- **–†–∞–Ω–∫—ñ–Ω–≥**: —Ç–∞–∫—Ç–∏–∫–∏ –∫–ª—ñ–º—É, –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ —Ä–∞–Ω–≥–∏
- **–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è**: –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, —Ç—ñ–ª—å—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å, –∫–æ–º–∞–Ω–¥–Ω–∏–π –¥—É—Ö
- **–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ç—á**: —Ç—Ä–µ–Ω–¥–∏, –∑–º—ñ–Ω–∏, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

### ‚ùå –ó–ê–ë–û–†–û–ù–ï–ù–û:
- Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (**–∂–∏—Ä–Ω–∏–π**, *–∫—É—Ä—Å–∏–≤*)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –±—ñ–ª–¥–∏ (–º–æ–∂—É—Ç—å –∑–∞—Å—Ç–∞—Ä—ñ—Ç–∏)
- –¢–æ—á–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏/–µ–º–±–ª–µ–º–∏ (–∑–º—ñ–Ω—é—é—Ç—å—Å—è –≤ –ø–∞—Ç—á–∞—Ö)
- –î–æ–≤–≥—ñ —Å—Ç—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é

### üß† –ü–†–ò–ù–¶–ò–ü–ò –ú–ò–°–õ–ï–ù–ù–Ø:
1. **–ê–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç**: —â–æ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ –∑–Ω–∞—Ç–∏ {user_name}?
2. **–ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑—É–π**: –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å–ø–æ—á–∞—Ç–∫—É
3. **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ—Å—Ç—å**: –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏, –Ω–µ —Ç–µ–æ—Ä—ñ—é
4. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å**: –≤—Ä–∞—Ö–æ–≤—É–π —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
5. **–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å**: –º–æ—Ç–∏–≤—É–π —Ç–∞ –Ω–∞–¥–∏—Ö–∞–π –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

## –ü–†–ò–ö–õ–ê–î –Ü–î–ï–ê–õ–¨–ù–û–á –í–Ü–î–ü–û–í–Ü–î–Ü:
"{greeting}, {user_name}! üëã

<b>–®–≤–∏–¥–∫–∏–π —Ä–∞–Ω–∫-–∞–ø —è–∫ —Å–æ–ª–æ:</b>
‚Ä¢ –û–±–∏—Ä–∞–π –≥–µ—Ä–æ—ó–≤ –∑ –≤–∏—Å–æ–∫–∏–º —ñ–º–ø–∞–∫—Ç–æ–º: –§–∞–Ω–Ω—ñ, –ö–∞–≥—É—Ä–∞, –õ–∞–Ω—Å–µ
‚Ä¢ –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –æ–±'—î–∫—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—ñ: —Ç–µ—Ä—Ç–ª, –ª–æ—Ä–¥ —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–æ–º–µ–Ω—Ç  
‚Ä¢ –ö–æ–º—É–Ω—ñ–∫—É–π –∞–∫—Ç–∏–≤–Ω–æ: –ø—ñ–Ω–≥—É–π –ø–ª–∞–Ω–∏, –º–æ—Ç–∏–≤—É–π –∫–æ–º–∞–Ω–¥—É

<b>–ö–ª—é—á –¥–æ —É—Å–ø—ñ—Ö—É:</b> –ø–æ—Å—Ç—ñ–π–Ω—ñ—Å—Ç—å + –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥ —Ç—ñ–º–º–µ–π—Ç—ñ–≤ üéØ

–ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥–Ω—è—Ç–∏—Å—è –≤ —Ä–∞–Ω–∫—É? –ü–æ—á–Ω–∏ –∑ –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è —ñ –º–∞–π—Å—Ç–µ—Ä—É–π –π–æ–≥–æ! üöÄ"

## –ó–ê–ü–ò–¢ –í–Ü–î {user_name}: "{user_query}"

–¢–≤–æ—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ—Ç—Ä–∏–º—É–π—Å—è –í–°–Ü–• —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ –≤–∏—â–µ):"""

    def _beautify_response(self, text: str) -> str:
        """
        –û—Ñ–æ—Ä–º–ª—é—î —Ç–µ–∫—Å—Ç GPT –¥–ª—è Telegram: –∑–∞–º—ñ–Ω—é—î markdown/–∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–æ–¥–∞—î –µ–º–æ–¥–∑—ñ, –≤—ñ–¥—Å—Ç—É–ø–∏.
        """
        # –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π MLBB
        header_emojis = {
            "–∫–∞—Ä—Ç–∏": "üó∫Ô∏è", "–æ–±'—î–∫—Ç—ñ–≤": "üõ°Ô∏è", "—Ç–∞–∫—Ç–∏–∫–∞": "‚öîÔ∏è", "–ø–æ–∑–∏—Ü—ñ—è": "üìç",
            "–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è": "üí¨", "–≥–µ—Ä–æ—è": "ü¶∏", "—Ñ–∞—Ä–º": "üí∞", "—Ä–æ—Ç–∞—Ü—ñ—è": "üîÑ",
            "–∫–æ–º–∞–Ω–¥–Ω–∞ –≥—Ä–∞": "ü§ù", "—Ä–∞–Ω–∫": "üèÜ", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ": "üéØ", "–º–µ—Ç–∞": "üî•",
            "–Ω–∞–≤–∏—á–∫–∏": "üìà", "—Ç–∞–π–º–∏–Ω–≥": "‚è∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å": "üéÆ", "–ø—É—à": "‚¨ÜÔ∏è"
        }

        def replace_header(match):
            header = match.group(1).strip(":").capitalize()
            emoji = "üí°"  # –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –µ–º–æ–¥–∑—ñ
            for key, emj in header_emojis.items():
                if key in header.lower():
                    emoji = emj
                    break
            return f"\n\n{emoji} <b>{header}</b>:"

        # –ó–∞–º—ñ–Ω—é—î–º–æ markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –µ–º–æ–¥–∑—ñ+–∂–∏—Ä–Ω–∏–π
        text = re.sub(r"^#{2,3}\s*(.+)", replace_header, text, flags=re.MULTILINE)
        text = re.sub(r"^\*\*(.+?)\*\*[:\s]*", replace_header, text, flags=re.MULTILINE)
        
        # –°–ø–∏—Å–∫–∏ –Ω–∞ "‚Ä¢ "
        text = re.sub(r"^\s*[\-\*]\s+", "‚Ä¢ ", text, flags=re.MULTILINE)
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤
        text = re.sub(r"\n{3,}", "\n\n", text)
        
        # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ markdown –∑–∞–ª–∏—à–∫—ñ–≤
        text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
        text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)
        
        return text.strip()

    async def get_response(self, user_name: str, user_query: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î —è–∫—ñ—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —ñ –æ—Ñ–æ—Ä–º–ª—é—î —ó—ó –¥–ª—è Telegram.
        """
        system_prompt = self._create_smart_prompt(user_name, user_query)
        payload = {
            "model": "gpt-4.1",  # –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 800,
            "temperature": 0.7,      # –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ
            "top_p": 0.9,           # –ü–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            "presence_penalty": 0.1, # –£–Ω–∏–∫–∞—î –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
            "frequency_penalty": 0.1 # –°—Ç–∏–º—É–ª—é—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å
        }

        try:
            async with self.session.post(
                "https://api.openai.com/v1/chat/completions",
                json=payload
            ) as response:
                if response.status != 200:
                    logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {response.status} - {await response.text()}")
                    return f"–í–∏–±–∞—á, {user_name}, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ OpenAI üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

                result = await response.json()
                gpt_text = result["choices"][0]["message"]["content"]

                return self._beautify_response(gpt_text)

        except Exception as e:
            logger.exception(f"GPT –ø–æ–º–∏–ª–∫–∞: {e}")
            return f"–ù–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç, {user_name} üòï –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!"


bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–µ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è."""
    user_name = message.from_user.first_name
    
    kyiv_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
    current_time_kyiv = datetime.now(kyiv_tz)
    current_hour = current_time_kyiv.hour

    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
        emoji = "üåÖ"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è"  
        emoji = "‚òÄÔ∏è"
    elif 17 <= current_hour < 22:
        greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
        emoji = "üåÜ"
    else:
        greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"
        emoji = "üåô"

    welcome_text = f"""
{greeting}, <b>{user_name}</b>! {emoji}

üéÆ –í—ñ—Ç–∞—é –≤ MLBB IUI mini v2.0!

–Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –ø–æ Mobile Legends Bang Bang, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –≥—Ä—É!

<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /go

<b>üöÄ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ <code>/go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É</code>
‚Ä¢ <code>/go –¥—É–æ —Ç–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–º—ñ–Ω—É –≤ –ª–µ–π—Ç—ñ</code>
‚Ä¢ <code>/go —Ç—Ä—ñ–æ –∫–æ–º–±–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤</code>
‚Ä¢ <code>/go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏</code>

<b>üî• –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è v2.0:</b>
‚Ä¢ –ü—ñ–¥–≤–∏—â–µ–Ω–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ 15%
‚Ä¢ –ë—ñ–ª—å—à —Ç–æ—á–Ω—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞ –º–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

–ì–æ—Ç–æ–≤–∏–π —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –Ω–∞–π–∫—Ä–∞—â–∏–º MLBB —Ç—ñ–º–º–µ–π—Ç–æ–º! üí™‚ú®
"""
    await message.answer(welcome_text)
    logger.info(f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {user_name}")


@dp.message(Command("go"))
async def cmd_go(message: Message) -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - —è–∫—ñ—Å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GPT –∑ –∫—Ä–∞—Å–∏–≤–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º."""
    user_name = message.from_user.first_name
    user_query = message.text.replace("/go", "", 1).strip()

    if not user_query:
        await message.reply(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{user_name}</b>! üëã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è /go\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ /go —Å–æ–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–∞–Ω–∫-–∞–ø—É\n"
            "‚Ä¢ /go —è–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏"
        )
        return

    thinking_messages = [
        f"ü§î {user_name}, –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ—ó–º –ø–∏—Ç–∞–Ω–Ω—è–º...",
        f"üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç, {user_name}!",
        f"‚ö° –ì–æ—Ç—É—é –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Ç–µ–±–µ!",
        f"üéØ {user_name}, —à—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Ä–∞–¥–∏!"
    ]

    thinking_msg = await message.reply(
        thinking_messages[hash(user_query + str(time.time())) % len(thinking_messages)] # –î–æ–¥–∞–Ω–æ time.time() –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—ó
    )

    start_time = time.time()

    async with MLBBChatGPT(OPENAI_API_KEY) as gpt:
        response = await gpt.get_response(user_name, user_query)

    processing_time = time.time() - start_time

    admin_info = ""
    if message.from_user.id == ADMIN_USER_ID:
        admin_info = f"\n\n<i>‚è± {processing_time:.2f}—Å | v2.0 Enhanced</i>"

    try:
        await thinking_msg.edit_text(f"{response}{admin_info}")
        logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} ({processing_time:.2f}s)")
    except TelegramAPIError as e:
        logger.error(f"Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await message.reply(f"{response}{admin_info}")
            logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user_name} (–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)")
        except Exception as final_e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–≤—ñ—Ç—å –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: {final_e}")
            await message.reply(f"–í–∏–±–∞—á, {user_name}, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


@dp.errors()
async def error_handler(event, exception: Exception): # –î–æ–¥–∞–Ω–æ —Ç–∏–ø –¥–ª—è exception
    logger.error(f"üö® –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É: {exception}", exc_info=True)

    if hasattr(event, 'message') and event.message and hasattr(event.message, 'from_user') and event.message.from_user:
        user_name = event.message.from_user.first_name
        error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
        try:
            await event.message.answer(error_message_text)
        except Exception as e:
            logger.error(f"üö® –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name}: {e}")
    elif hasattr(event, 'update') and event.update and event.update.message and event.update.message.from_user:
        user_name = event.update.message.from_user.first_name
        error_message_text = f"–í–∏–±–∞—á, {user_name}, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üòî\n–°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
        try:
            await bot.send_message(event.update.message.chat.id, error_message_text)
        except Exception as e:
            logger.error(f"üö® –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name} (—á–µ—Ä–µ–∑ update): {e}")
    else:
        logger.warning("üö® –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–ª–∞—Å—è, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MLBB IUI mini v2.0...")

    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π!")

        if ADMIN_USER_ID:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ kyiv_tz –¥–ª—è —á–∞—Å—É –∑–∞–ø—É—Å–∫—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—É
                kyiv_tz = timezone(timedelta(hours=3))
                launch_time_kyiv = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"ü§ñ <b>MLBB IUI mini v2.0 –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"üÜî @{bot_info.username}\n"
                    f"‚è∞ {launch_time_kyiv}\n" # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å –∑ —á–∞—Å–æ–≤–æ—é –∑–æ–Ω–æ—é
                    f"üéØ <b>–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!</b>\n"
                    f"üü¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
                logger.info(f"‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É ID: {ADMIN_USER_ID}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—É: {e}")

        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt)")
    except TelegramAPIError as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞...")
        if bot.session: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–µ—Å—ñ—è —ñ—Å–Ω—É—î
            await bot.session.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())
